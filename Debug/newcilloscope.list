
newcilloscope.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009098  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08009368  08009368  0000a368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009410  08009410  0000a410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009418  08009418  0000a418  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800941c  0800941c  0000a41c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000088  24000000  08009420  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000324  24000088  080094a8  0000b088  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240003ac  080094a8  0000b3ac  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000b088  2**0
                  CONTENTS, READONLY
 10 .debug_info   00016baa  00000000  00000000  0000b0b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002a98  00000000  00000000  00021c60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000010a0  00000000  00000000  000246f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000cb9  00000000  00000000  00025798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00035361  00000000  00000000  00026451  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00015a8d  00000000  00000000  0005b7b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015a287  00000000  00000000  0007123f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001cb4c6  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004dd0  00000000  00000000  001cb50c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000069  00000000  00000000  001d02dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000088 	.word	0x24000088
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08009350 	.word	0x08009350

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	2400008c 	.word	0x2400008c
 800030c:	08009350 	.word	0x08009350

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295
 80003c4:	f000 b96a 	b.w	800069c <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9d08      	ldr	r5, [sp, #32]
 80003e6:	460c      	mov	r4, r1
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d14e      	bne.n	800048a <__udivmoddi4+0xaa>
 80003ec:	4694      	mov	ip, r2
 80003ee:	458c      	cmp	ip, r1
 80003f0:	4686      	mov	lr, r0
 80003f2:	fab2 f282 	clz	r2, r2
 80003f6:	d962      	bls.n	80004be <__udivmoddi4+0xde>
 80003f8:	b14a      	cbz	r2, 800040e <__udivmoddi4+0x2e>
 80003fa:	f1c2 0320 	rsb	r3, r2, #32
 80003fe:	4091      	lsls	r1, r2
 8000400:	fa20 f303 	lsr.w	r3, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	4319      	orrs	r1, r3
 800040a:	fa00 fe02 	lsl.w	lr, r0, r2
 800040e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000412:	fa1f f68c 	uxth.w	r6, ip
 8000416:	fbb1 f4f7 	udiv	r4, r1, r7
 800041a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041e:	fb07 1114 	mls	r1, r7, r4, r1
 8000422:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000426:	fb04 f106 	mul.w	r1, r4, r6
 800042a:	4299      	cmp	r1, r3
 800042c:	d90a      	bls.n	8000444 <__udivmoddi4+0x64>
 800042e:	eb1c 0303 	adds.w	r3, ip, r3
 8000432:	f104 30ff 	add.w	r0, r4, #4294967295
 8000436:	f080 8112 	bcs.w	800065e <__udivmoddi4+0x27e>
 800043a:	4299      	cmp	r1, r3
 800043c:	f240 810f 	bls.w	800065e <__udivmoddi4+0x27e>
 8000440:	3c02      	subs	r4, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	fa1f f38e 	uxth.w	r3, lr
 800044a:	fbb1 f0f7 	udiv	r0, r1, r7
 800044e:	fb07 1110 	mls	r1, r7, r0, r1
 8000452:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000456:	fb00 f606 	mul.w	r6, r0, r6
 800045a:	429e      	cmp	r6, r3
 800045c:	d90a      	bls.n	8000474 <__udivmoddi4+0x94>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 31ff 	add.w	r1, r0, #4294967295
 8000466:	f080 80fc 	bcs.w	8000662 <__udivmoddi4+0x282>
 800046a:	429e      	cmp	r6, r3
 800046c:	f240 80f9 	bls.w	8000662 <__udivmoddi4+0x282>
 8000470:	4463      	add	r3, ip
 8000472:	3802      	subs	r0, #2
 8000474:	1b9b      	subs	r3, r3, r6
 8000476:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800047a:	2100      	movs	r1, #0
 800047c:	b11d      	cbz	r5, 8000486 <__udivmoddi4+0xa6>
 800047e:	40d3      	lsrs	r3, r2
 8000480:	2200      	movs	r2, #0
 8000482:	e9c5 3200 	strd	r3, r2, [r5]
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	428b      	cmp	r3, r1
 800048c:	d905      	bls.n	800049a <__udivmoddi4+0xba>
 800048e:	b10d      	cbz	r5, 8000494 <__udivmoddi4+0xb4>
 8000490:	e9c5 0100 	strd	r0, r1, [r5]
 8000494:	2100      	movs	r1, #0
 8000496:	4608      	mov	r0, r1
 8000498:	e7f5      	b.n	8000486 <__udivmoddi4+0xa6>
 800049a:	fab3 f183 	clz	r1, r3
 800049e:	2900      	cmp	r1, #0
 80004a0:	d146      	bne.n	8000530 <__udivmoddi4+0x150>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d302      	bcc.n	80004ac <__udivmoddi4+0xcc>
 80004a6:	4290      	cmp	r0, r2
 80004a8:	f0c0 80f0 	bcc.w	800068c <__udivmoddi4+0x2ac>
 80004ac:	1a86      	subs	r6, r0, r2
 80004ae:	eb64 0303 	sbc.w	r3, r4, r3
 80004b2:	2001      	movs	r0, #1
 80004b4:	2d00      	cmp	r5, #0
 80004b6:	d0e6      	beq.n	8000486 <__udivmoddi4+0xa6>
 80004b8:	e9c5 6300 	strd	r6, r3, [r5]
 80004bc:	e7e3      	b.n	8000486 <__udivmoddi4+0xa6>
 80004be:	2a00      	cmp	r2, #0
 80004c0:	f040 8090 	bne.w	80005e4 <__udivmoddi4+0x204>
 80004c4:	eba1 040c 	sub.w	r4, r1, ip
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa1f f78c 	uxth.w	r7, ip
 80004d0:	2101      	movs	r1, #1
 80004d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004da:	fb08 4416 	mls	r4, r8, r6, r4
 80004de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004e2:	fb07 f006 	mul.w	r0, r7, r6
 80004e6:	4298      	cmp	r0, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x11c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x11a>
 80004f4:	4298      	cmp	r0, r3
 80004f6:	f200 80cd 	bhi.w	8000694 <__udivmoddi4+0x2b4>
 80004fa:	4626      	mov	r6, r4
 80004fc:	1a1c      	subs	r4, r3, r0
 80004fe:	fa1f f38e 	uxth.w	r3, lr
 8000502:	fbb4 f0f8 	udiv	r0, r4, r8
 8000506:	fb08 4410 	mls	r4, r8, r0, r4
 800050a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800050e:	fb00 f707 	mul.w	r7, r0, r7
 8000512:	429f      	cmp	r7, r3
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x148>
 8000516:	eb1c 0303 	adds.w	r3, ip, r3
 800051a:	f100 34ff 	add.w	r4, r0, #4294967295
 800051e:	d202      	bcs.n	8000526 <__udivmoddi4+0x146>
 8000520:	429f      	cmp	r7, r3
 8000522:	f200 80b0 	bhi.w	8000686 <__udivmoddi4+0x2a6>
 8000526:	4620      	mov	r0, r4
 8000528:	1bdb      	subs	r3, r3, r7
 800052a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800052e:	e7a5      	b.n	800047c <__udivmoddi4+0x9c>
 8000530:	f1c1 0620 	rsb	r6, r1, #32
 8000534:	408b      	lsls	r3, r1
 8000536:	fa22 f706 	lsr.w	r7, r2, r6
 800053a:	431f      	orrs	r7, r3
 800053c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000540:	fa04 f301 	lsl.w	r3, r4, r1
 8000544:	ea43 030c 	orr.w	r3, r3, ip
 8000548:	40f4      	lsrs	r4, r6
 800054a:	fa00 f801 	lsl.w	r8, r0, r1
 800054e:	0c38      	lsrs	r0, r7, #16
 8000550:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000554:	fbb4 fef0 	udiv	lr, r4, r0
 8000558:	fa1f fc87 	uxth.w	ip, r7
 800055c:	fb00 441e 	mls	r4, r0, lr, r4
 8000560:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000564:	fb0e f90c 	mul.w	r9, lr, ip
 8000568:	45a1      	cmp	r9, r4
 800056a:	fa02 f201 	lsl.w	r2, r2, r1
 800056e:	d90a      	bls.n	8000586 <__udivmoddi4+0x1a6>
 8000570:	193c      	adds	r4, r7, r4
 8000572:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000576:	f080 8084 	bcs.w	8000682 <__udivmoddi4+0x2a2>
 800057a:	45a1      	cmp	r9, r4
 800057c:	f240 8081 	bls.w	8000682 <__udivmoddi4+0x2a2>
 8000580:	f1ae 0e02 	sub.w	lr, lr, #2
 8000584:	443c      	add	r4, r7
 8000586:	eba4 0409 	sub.w	r4, r4, r9
 800058a:	fa1f f983 	uxth.w	r9, r3
 800058e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000592:	fb00 4413 	mls	r4, r0, r3, r4
 8000596:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800059a:	fb03 fc0c 	mul.w	ip, r3, ip
 800059e:	45a4      	cmp	ip, r4
 80005a0:	d907      	bls.n	80005b2 <__udivmoddi4+0x1d2>
 80005a2:	193c      	adds	r4, r7, r4
 80005a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80005a8:	d267      	bcs.n	800067a <__udivmoddi4+0x29a>
 80005aa:	45a4      	cmp	ip, r4
 80005ac:	d965      	bls.n	800067a <__udivmoddi4+0x29a>
 80005ae:	3b02      	subs	r3, #2
 80005b0:	443c      	add	r4, r7
 80005b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80005b6:	fba0 9302 	umull	r9, r3, r0, r2
 80005ba:	eba4 040c 	sub.w	r4, r4, ip
 80005be:	429c      	cmp	r4, r3
 80005c0:	46ce      	mov	lr, r9
 80005c2:	469c      	mov	ip, r3
 80005c4:	d351      	bcc.n	800066a <__udivmoddi4+0x28a>
 80005c6:	d04e      	beq.n	8000666 <__udivmoddi4+0x286>
 80005c8:	b155      	cbz	r5, 80005e0 <__udivmoddi4+0x200>
 80005ca:	ebb8 030e 	subs.w	r3, r8, lr
 80005ce:	eb64 040c 	sbc.w	r4, r4, ip
 80005d2:	fa04 f606 	lsl.w	r6, r4, r6
 80005d6:	40cb      	lsrs	r3, r1
 80005d8:	431e      	orrs	r6, r3
 80005da:	40cc      	lsrs	r4, r1
 80005dc:	e9c5 6400 	strd	r6, r4, [r5]
 80005e0:	2100      	movs	r1, #0
 80005e2:	e750      	b.n	8000486 <__udivmoddi4+0xa6>
 80005e4:	f1c2 0320 	rsb	r3, r2, #32
 80005e8:	fa20 f103 	lsr.w	r1, r0, r3
 80005ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80005f0:	fa24 f303 	lsr.w	r3, r4, r3
 80005f4:	4094      	lsls	r4, r2
 80005f6:	430c      	orrs	r4, r1
 80005f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000600:	fa1f f78c 	uxth.w	r7, ip
 8000604:	fbb3 f0f8 	udiv	r0, r3, r8
 8000608:	fb08 3110 	mls	r1, r8, r0, r3
 800060c:	0c23      	lsrs	r3, r4, #16
 800060e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000612:	fb00 f107 	mul.w	r1, r0, r7
 8000616:	4299      	cmp	r1, r3
 8000618:	d908      	bls.n	800062c <__udivmoddi4+0x24c>
 800061a:	eb1c 0303 	adds.w	r3, ip, r3
 800061e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000622:	d22c      	bcs.n	800067e <__udivmoddi4+0x29e>
 8000624:	4299      	cmp	r1, r3
 8000626:	d92a      	bls.n	800067e <__udivmoddi4+0x29e>
 8000628:	3802      	subs	r0, #2
 800062a:	4463      	add	r3, ip
 800062c:	1a5b      	subs	r3, r3, r1
 800062e:	b2a4      	uxth	r4, r4
 8000630:	fbb3 f1f8 	udiv	r1, r3, r8
 8000634:	fb08 3311 	mls	r3, r8, r1, r3
 8000638:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800063c:	fb01 f307 	mul.w	r3, r1, r7
 8000640:	42a3      	cmp	r3, r4
 8000642:	d908      	bls.n	8000656 <__udivmoddi4+0x276>
 8000644:	eb1c 0404 	adds.w	r4, ip, r4
 8000648:	f101 36ff 	add.w	r6, r1, #4294967295
 800064c:	d213      	bcs.n	8000676 <__udivmoddi4+0x296>
 800064e:	42a3      	cmp	r3, r4
 8000650:	d911      	bls.n	8000676 <__udivmoddi4+0x296>
 8000652:	3902      	subs	r1, #2
 8000654:	4464      	add	r4, ip
 8000656:	1ae4      	subs	r4, r4, r3
 8000658:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800065c:	e739      	b.n	80004d2 <__udivmoddi4+0xf2>
 800065e:	4604      	mov	r4, r0
 8000660:	e6f0      	b.n	8000444 <__udivmoddi4+0x64>
 8000662:	4608      	mov	r0, r1
 8000664:	e706      	b.n	8000474 <__udivmoddi4+0x94>
 8000666:	45c8      	cmp	r8, r9
 8000668:	d2ae      	bcs.n	80005c8 <__udivmoddi4+0x1e8>
 800066a:	ebb9 0e02 	subs.w	lr, r9, r2
 800066e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000672:	3801      	subs	r0, #1
 8000674:	e7a8      	b.n	80005c8 <__udivmoddi4+0x1e8>
 8000676:	4631      	mov	r1, r6
 8000678:	e7ed      	b.n	8000656 <__udivmoddi4+0x276>
 800067a:	4603      	mov	r3, r0
 800067c:	e799      	b.n	80005b2 <__udivmoddi4+0x1d2>
 800067e:	4630      	mov	r0, r6
 8000680:	e7d4      	b.n	800062c <__udivmoddi4+0x24c>
 8000682:	46d6      	mov	lr, sl
 8000684:	e77f      	b.n	8000586 <__udivmoddi4+0x1a6>
 8000686:	4463      	add	r3, ip
 8000688:	3802      	subs	r0, #2
 800068a:	e74d      	b.n	8000528 <__udivmoddi4+0x148>
 800068c:	4606      	mov	r6, r0
 800068e:	4623      	mov	r3, r4
 8000690:	4608      	mov	r0, r1
 8000692:	e70f      	b.n	80004b4 <__udivmoddi4+0xd4>
 8000694:	3e02      	subs	r6, #2
 8000696:	4463      	add	r3, ip
 8000698:	e730      	b.n	80004fc <__udivmoddi4+0x11c>
 800069a:	bf00      	nop

0800069c <__aeabi_idiv0>:
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop

080006a0 <main>:




int main(void)
{
 80006a0:	b590      	push	{r4, r7, lr}
 80006a2:	b083      	sub	sp, #12
 80006a4:	af00      	add	r7, sp, #0
  MPU_Config();
 80006a6:	f000 f9eb 	bl	8000a80 <MPU_Config>
  HAL_Init();
 80006aa:	f000 fecb 	bl	8001444 <HAL_Init>
  SystemClock_Config();
 80006ae:	f000 f851 	bl	8000754 <SystemClock_Config>
  MX_GPIO_Init();
 80006b2:	f000 f985 	bl	80009c0 <MX_GPIO_Init>
  MX_ADC1_Init();
 80006b6:	f000 f8bd 	bl	8000834 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 80006ba:	f000 f935 	bl	8000928 <MX_USART2_UART_Init>
  BSP_LED_Init(LED_GREEN);
 80006be:	2000      	movs	r0, #0
 80006c0:	f000 fcdc 	bl	800107c <BSP_LED_Init>
  BSP_LED_Init(LED_YELLOW);
 80006c4:	2001      	movs	r0, #1
 80006c6:	f000 fcd9 	bl	800107c <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 80006ca:	2002      	movs	r0, #2
 80006cc:	f000 fcd6 	bl	800107c <BSP_LED_Init>
  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 80006d0:	2101      	movs	r1, #1
 80006d2:	2000      	movs	r0, #0
 80006d4:	f000 fd48 	bl	8001168 <BSP_PB_Init>

  BspCOMInit.BaudRate   = 115200;
 80006d8:	4b1b      	ldr	r3, [pc, #108]	@ (8000748 <main+0xa8>)
 80006da:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006de:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 80006e0:	4b19      	ldr	r3, [pc, #100]	@ (8000748 <main+0xa8>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 80006e6:	4b18      	ldr	r3, [pc, #96]	@ (8000748 <main+0xa8>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 80006ec:	4b16      	ldr	r3, [pc, #88]	@ (8000748 <main+0xa8>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 80006f2:	4b15      	ldr	r3, [pc, #84]	@ (8000748 <main+0xa8>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 80006f8:	4913      	ldr	r1, [pc, #76]	@ (8000748 <main+0xa8>)
 80006fa:	2000      	movs	r0, #0
 80006fc:	f000 fdc4 	bl	8001288 <BSP_COM_Init>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <main+0x6a>
  {
    Error_Handler();
 8000706:	f000 fa0f 	bl	8000b28 <Error_Handler>



  while (1)
  {
	  HAL_ADC_Start(&hadc1);
 800070a:	4810      	ldr	r0, [pc, #64]	@ (800074c <main+0xac>)
 800070c:	f001 fc2e 	bl	8001f6c <HAL_ADC_Start>
	 // HAL_ADC_Start_DMA(&hadc1);
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000710:	f04f 31ff 	mov.w	r1, #4294967295
 8000714:	480d      	ldr	r0, [pc, #52]	@ (800074c <main+0xac>)
 8000716:	f001 fcf3 	bl	8002100 <HAL_ADC_PollForConversion>
	  uint16_t adc_value= HAL_ADC_GetValue(&hadc1);
 800071a:	480c      	ldr	r0, [pc, #48]	@ (800074c <main+0xac>)
 800071c:	f001 fde4 	bl	80022e8 <HAL_ADC_GetValue>
 8000720:	4603      	mov	r3, r0
 8000722:	80fb      	strh	r3, [r7, #6]
	  printf("adc value:%d\n, voltage:%dmv \r\n\n",adc_value, Get_Voltage(1,adc_value));
 8000724:	88fc      	ldrh	r4, [r7, #6]
 8000726:	88fb      	ldrh	r3, [r7, #6]
 8000728:	4619      	mov	r1, r3
 800072a:	2001      	movs	r0, #1
 800072c:	f000 f9d4 	bl	8000ad8 <Get_Voltage>
 8000730:	4603      	mov	r3, r0
 8000732:	461a      	mov	r2, r3
 8000734:	4621      	mov	r1, r4
 8000736:	4806      	ldr	r0, [pc, #24]	@ (8000750 <main+0xb0>)
 8000738:	f007 ff9c 	bl	8008674 <iprintf>
	  HAL_Delay(1000);
 800073c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000740:	f000 ff12 	bl	8001568 <HAL_Delay>
  {
 8000744:	bf00      	nop
 8000746:	e7e0      	b.n	800070a <main+0x6a>
 8000748:	240000a4 	.word	0x240000a4
 800074c:	240000b4 	.word	0x240000b4
 8000750:	08009368 	.word	0x08009368

08000754 <SystemClock_Config>:
  }
}


void SystemClock_Config(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b09c      	sub	sp, #112	@ 0x70
 8000758:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800075a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800075e:	224c      	movs	r2, #76	@ 0x4c
 8000760:	2100      	movs	r1, #0
 8000762:	4618      	mov	r0, r3
 8000764:	f007 ffdb 	bl	800871e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000768:	1d3b      	adds	r3, r7, #4
 800076a:	2220      	movs	r2, #32
 800076c:	2100      	movs	r1, #0
 800076e:	4618      	mov	r0, r3
 8000770:	f007 ffd5 	bl	800871e <memset>


  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000774:	2002      	movs	r0, #2
 8000776:	f003 f8c7 	bl	8003908 <HAL_PWREx_ConfigSupply>


  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800077a:	2300      	movs	r3, #0
 800077c:	603b      	str	r3, [r7, #0]
 800077e:	4b2c      	ldr	r3, [pc, #176]	@ (8000830 <SystemClock_Config+0xdc>)
 8000780:	699b      	ldr	r3, [r3, #24]
 8000782:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000786:	4a2a      	ldr	r2, [pc, #168]	@ (8000830 <SystemClock_Config+0xdc>)
 8000788:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800078c:	6193      	str	r3, [r2, #24]
 800078e:	4b28      	ldr	r3, [pc, #160]	@ (8000830 <SystemClock_Config+0xdc>)
 8000790:	699b      	ldr	r3, [r3, #24]
 8000792:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000796:	603b      	str	r3, [r7, #0]
 8000798:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800079a:	bf00      	nop
 800079c:	4b24      	ldr	r3, [pc, #144]	@ (8000830 <SystemClock_Config+0xdc>)
 800079e:	699b      	ldr	r3, [r3, #24]
 80007a0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80007a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80007a8:	d1f8      	bne.n	800079c <SystemClock_Config+0x48>


  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007aa:	2302      	movs	r3, #2
 80007ac:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80007ae:	2301      	movs	r3, #1
 80007b0:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 80007b2:	2340      	movs	r3, #64	@ 0x40
 80007b4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007b6:	2302      	movs	r3, #2
 80007b8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007ba:	2300      	movs	r3, #0
 80007bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007be:	2304      	movs	r3, #4
 80007c0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 22;
 80007c2:	2316      	movs	r3, #22
 80007c4:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 4;
 80007c6:	2304      	movs	r3, #4
 80007c8:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007ca:	2304      	movs	r3, #4
 80007cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007ce:	2302      	movs	r3, #2
 80007d0:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80007d2:	230c      	movs	r3, #12
 80007d4:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80007d6:	2300      	movs	r3, #0
 80007d8:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80007da:	2300      	movs	r3, #0
 80007dc:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007e2:	4618      	mov	r0, r3
 80007e4:	f003 f8ca 	bl	800397c <HAL_RCC_OscConfig>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80007ee:	f000 f99b 	bl	8000b28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007f2:	233f      	movs	r3, #63	@ 0x3f
 80007f4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007f6:	2303      	movs	r3, #3
 80007f8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80007fa:	2300      	movs	r3, #0
 80007fc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80007fe:	2308      	movs	r3, #8
 8000800:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000802:	2340      	movs	r3, #64	@ 0x40
 8000804:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000806:	2340      	movs	r3, #64	@ 0x40
 8000808:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800080a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800080e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000810:	2340      	movs	r3, #64	@ 0x40
 8000812:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000814:	1d3b      	adds	r3, r7, #4
 8000816:	2101      	movs	r1, #1
 8000818:	4618      	mov	r0, r3
 800081a:	f003 fc89 	bl	8004130 <HAL_RCC_ClockConfig>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000824:	f000 f980 	bl	8000b28 <Error_Handler>
  }
}
 8000828:	bf00      	nop
 800082a:	3770      	adds	r7, #112	@ 0x70
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	58024800 	.word	0x58024800

08000834 <MX_ADC1_Init>:


static void MX_ADC1_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b08c      	sub	sp, #48	@ 0x30
 8000838:	af00      	add	r7, sp, #0


  ADC_MultiModeTypeDef multimode = {0};
 800083a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800083e:	2200      	movs	r2, #0
 8000840:	601a      	str	r2, [r3, #0]
 8000842:	605a      	str	r2, [r3, #4]
 8000844:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000846:	463b      	mov	r3, r7
 8000848:	2224      	movs	r2, #36	@ 0x24
 800084a:	2100      	movs	r1, #0
 800084c:	4618      	mov	r0, r3
 800084e:	f007 ff66 	bl	800871e <memset>

  hadc1.Instance = ADC1;
 8000852:	4b32      	ldr	r3, [pc, #200]	@ (800091c <MX_ADC1_Init+0xe8>)
 8000854:	4a32      	ldr	r2, [pc, #200]	@ (8000920 <MX_ADC1_Init+0xec>)
 8000856:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000858:	4b30      	ldr	r3, [pc, #192]	@ (800091c <MX_ADC1_Init+0xe8>)
 800085a:	2200      	movs	r2, #0
 800085c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 800085e:	4b2f      	ldr	r3, [pc, #188]	@ (800091c <MX_ADC1_Init+0xe8>)
 8000860:	2200      	movs	r2, #0
 8000862:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000864:	4b2d      	ldr	r3, [pc, #180]	@ (800091c <MX_ADC1_Init+0xe8>)
 8000866:	2200      	movs	r2, #0
 8000868:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800086a:	4b2c      	ldr	r3, [pc, #176]	@ (800091c <MX_ADC1_Init+0xe8>)
 800086c:	2204      	movs	r2, #4
 800086e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000870:	4b2a      	ldr	r3, [pc, #168]	@ (800091c <MX_ADC1_Init+0xe8>)
 8000872:	2200      	movs	r2, #0
 8000874:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000876:	4b29      	ldr	r3, [pc, #164]	@ (800091c <MX_ADC1_Init+0xe8>)
 8000878:	2200      	movs	r2, #0
 800087a:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800087c:	4b27      	ldr	r3, [pc, #156]	@ (800091c <MX_ADC1_Init+0xe8>)
 800087e:	2201      	movs	r2, #1
 8000880:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000882:	4b26      	ldr	r3, [pc, #152]	@ (800091c <MX_ADC1_Init+0xe8>)
 8000884:	2200      	movs	r2, #0
 8000886:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800088a:	4b24      	ldr	r3, [pc, #144]	@ (800091c <MX_ADC1_Init+0xe8>)
 800088c:	2200      	movs	r2, #0
 800088e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000890:	4b22      	ldr	r3, [pc, #136]	@ (800091c <MX_ADC1_Init+0xe8>)
 8000892:	2200      	movs	r2, #0
 8000894:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000896:	4b21      	ldr	r3, [pc, #132]	@ (800091c <MX_ADC1_Init+0xe8>)
 8000898:	2200      	movs	r2, #0
 800089a:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800089c:	4b1f      	ldr	r3, [pc, #124]	@ (800091c <MX_ADC1_Init+0xe8>)
 800089e:	2200      	movs	r2, #0
 80008a0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80008a2:	4b1e      	ldr	r3, [pc, #120]	@ (800091c <MX_ADC1_Init+0xe8>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 80008a8:	4b1c      	ldr	r3, [pc, #112]	@ (800091c <MX_ADC1_Init+0xe8>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.Ratio = 1;
 80008b0:	4b1a      	ldr	r3, [pc, #104]	@ (800091c <MX_ADC1_Init+0xe8>)
 80008b2:	2201      	movs	r2, #1
 80008b4:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008b6:	4819      	ldr	r0, [pc, #100]	@ (800091c <MX_ADC1_Init+0xe8>)
 80008b8:	f001 f950 	bl	8001b5c <HAL_ADC_Init>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80008c2:	f000 f931 	bl	8000b28 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80008c6:	2300      	movs	r3, #0
 80008c8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80008ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008ce:	4619      	mov	r1, r3
 80008d0:	4812      	ldr	r0, [pc, #72]	@ (800091c <MX_ADC1_Init+0xe8>)
 80008d2:	f002 fb89 	bl	8002fe8 <HAL_ADCEx_MultiModeConfigChannel>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80008dc:	f000 f924 	bl	8000b28 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80008e0:	4b10      	ldr	r3, [pc, #64]	@ (8000924 <MX_ADC1_Init+0xf0>)
 80008e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008e4:	2306      	movs	r3, #6
 80008e6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80008e8:	2300      	movs	r3, #0
 80008ea:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008ec:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80008f0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008f2:	2304      	movs	r3, #4
 80008f4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80008f6:	2300      	movs	r3, #0
 80008f8:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80008fa:	2300      	movs	r3, #0
 80008fc:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000900:	463b      	mov	r3, r7
 8000902:	4619      	mov	r1, r3
 8000904:	4805      	ldr	r0, [pc, #20]	@ (800091c <MX_ADC1_Init+0xe8>)
 8000906:	f001 fcfd 	bl	8002304 <HAL_ADC_ConfigChannel>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8000910:	f000 f90a 	bl	8000b28 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000914:	bf00      	nop
 8000916:	3730      	adds	r7, #48	@ 0x30
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	240000b4 	.word	0x240000b4
 8000920:	40022000 	.word	0x40022000
 8000924:	08600004 	.word	0x08600004

08000928 <MX_USART2_UART_Init>:


static void MX_USART2_UART_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 800092c:	4b22      	ldr	r3, [pc, #136]	@ (80009b8 <MX_USART2_UART_Init+0x90>)
 800092e:	4a23      	ldr	r2, [pc, #140]	@ (80009bc <MX_USART2_UART_Init+0x94>)
 8000930:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000932:	4b21      	ldr	r3, [pc, #132]	@ (80009b8 <MX_USART2_UART_Init+0x90>)
 8000934:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000938:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800093a:	4b1f      	ldr	r3, [pc, #124]	@ (80009b8 <MX_USART2_UART_Init+0x90>)
 800093c:	2200      	movs	r2, #0
 800093e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000940:	4b1d      	ldr	r3, [pc, #116]	@ (80009b8 <MX_USART2_UART_Init+0x90>)
 8000942:	2200      	movs	r2, #0
 8000944:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000946:	4b1c      	ldr	r3, [pc, #112]	@ (80009b8 <MX_USART2_UART_Init+0x90>)
 8000948:	2200      	movs	r2, #0
 800094a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800094c:	4b1a      	ldr	r3, [pc, #104]	@ (80009b8 <MX_USART2_UART_Init+0x90>)
 800094e:	220c      	movs	r2, #12
 8000950:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000952:	4b19      	ldr	r3, [pc, #100]	@ (80009b8 <MX_USART2_UART_Init+0x90>)
 8000954:	2200      	movs	r2, #0
 8000956:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000958:	4b17      	ldr	r3, [pc, #92]	@ (80009b8 <MX_USART2_UART_Init+0x90>)
 800095a:	2200      	movs	r2, #0
 800095c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800095e:	4b16      	ldr	r3, [pc, #88]	@ (80009b8 <MX_USART2_UART_Init+0x90>)
 8000960:	2200      	movs	r2, #0
 8000962:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000964:	4b14      	ldr	r3, [pc, #80]	@ (80009b8 <MX_USART2_UART_Init+0x90>)
 8000966:	2200      	movs	r2, #0
 8000968:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800096a:	4b13      	ldr	r3, [pc, #76]	@ (80009b8 <MX_USART2_UART_Init+0x90>)
 800096c:	2200      	movs	r2, #0
 800096e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000970:	4811      	ldr	r0, [pc, #68]	@ (80009b8 <MX_USART2_UART_Init+0x90>)
 8000972:	f006 fb4f 	bl	8007014 <HAL_UART_Init>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800097c:	f000 f8d4 	bl	8000b28 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000980:	2100      	movs	r1, #0
 8000982:	480d      	ldr	r0, [pc, #52]	@ (80009b8 <MX_USART2_UART_Init+0x90>)
 8000984:	f007 fce9 	bl	800835a <HAL_UARTEx_SetTxFifoThreshold>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800098e:	f000 f8cb 	bl	8000b28 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000992:	2100      	movs	r1, #0
 8000994:	4808      	ldr	r0, [pc, #32]	@ (80009b8 <MX_USART2_UART_Init+0x90>)
 8000996:	f007 fd1e 	bl	80083d6 <HAL_UARTEx_SetRxFifoThreshold>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80009a0:	f000 f8c2 	bl	8000b28 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80009a4:	4804      	ldr	r0, [pc, #16]	@ (80009b8 <MX_USART2_UART_Init+0x90>)
 80009a6:	f007 fc9f 	bl	80082e8 <HAL_UARTEx_DisableFifoMode>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80009b0:	f000 f8ba 	bl	8000b28 <Error_Handler>
  }

}
 80009b4:	bf00      	nop
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	24000124 	.word	0x24000124
 80009bc:	40004400 	.word	0x40004400

080009c0 <MX_GPIO_Init>:



static void MX_GPIO_Init(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b088      	sub	sp, #32
 80009c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c6:	f107 030c 	add.w	r3, r7, #12
 80009ca:	2200      	movs	r2, #0
 80009cc:	601a      	str	r2, [r3, #0]
 80009ce:	605a      	str	r2, [r3, #4]
 80009d0:	609a      	str	r2, [r3, #8]
 80009d2:	60da      	str	r2, [r3, #12]
 80009d4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009d6:	4b28      	ldr	r3, [pc, #160]	@ (8000a78 <MX_GPIO_Init+0xb8>)
 80009d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009dc:	4a26      	ldr	r2, [pc, #152]	@ (8000a78 <MX_GPIO_Init+0xb8>)
 80009de:	f043 0304 	orr.w	r3, r3, #4
 80009e2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009e6:	4b24      	ldr	r3, [pc, #144]	@ (8000a78 <MX_GPIO_Init+0xb8>)
 80009e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009ec:	f003 0304 	and.w	r3, r3, #4
 80009f0:	60bb      	str	r3, [r7, #8]
 80009f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009f4:	4b20      	ldr	r3, [pc, #128]	@ (8000a78 <MX_GPIO_Init+0xb8>)
 80009f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009fa:	4a1f      	ldr	r2, [pc, #124]	@ (8000a78 <MX_GPIO_Init+0xb8>)
 80009fc:	f043 0301 	orr.w	r3, r3, #1
 8000a00:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a04:	4b1c      	ldr	r3, [pc, #112]	@ (8000a78 <MX_GPIO_Init+0xb8>)
 8000a06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a0a:	f003 0301 	and.w	r3, r3, #1
 8000a0e:	607b      	str	r3, [r7, #4]
 8000a10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a12:	4b19      	ldr	r3, [pc, #100]	@ (8000a78 <MX_GPIO_Init+0xb8>)
 8000a14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a18:	4a17      	ldr	r2, [pc, #92]	@ (8000a78 <MX_GPIO_Init+0xb8>)
 8000a1a:	f043 0320 	orr.w	r3, r3, #32
 8000a1e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a22:	4b15      	ldr	r3, [pc, #84]	@ (8000a78 <MX_GPIO_Init+0xb8>)
 8000a24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a28:	f003 0320 	and.w	r3, r3, #32
 8000a2c:	603b      	str	r3, [r7, #0]
 8000a2e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8000a30:	2200      	movs	r2, #0
 8000a32:	21c0      	movs	r1, #192	@ 0xc0
 8000a34:	4811      	ldr	r0, [pc, #68]	@ (8000a7c <MX_GPIO_Init+0xbc>)
 8000a36:	f002 ff4d 	bl	80038d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000a3a:	2320      	movs	r3, #32
 8000a3c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a42:	2300      	movs	r3, #0
 8000a44:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a46:	f107 030c 	add.w	r3, r7, #12
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	480b      	ldr	r0, [pc, #44]	@ (8000a7c <MX_GPIO_Init+0xbc>)
 8000a4e:	f002 fd99 	bl	8003584 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000a52:	23c0      	movs	r3, #192	@ 0xc0
 8000a54:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a56:	2301      	movs	r3, #1
 8000a58:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a62:	f107 030c 	add.w	r3, r7, #12
 8000a66:	4619      	mov	r1, r3
 8000a68:	4804      	ldr	r0, [pc, #16]	@ (8000a7c <MX_GPIO_Init+0xbc>)
 8000a6a:	f002 fd8b 	bl	8003584 <HAL_GPIO_Init>


}
 8000a6e:	bf00      	nop
 8000a70:	3720      	adds	r7, #32
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	58024400 	.word	0x58024400
 8000a7c:	58020000 	.word	0x58020000

08000a80 <MPU_Config>:



void MPU_Config(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b084      	sub	sp, #16
 8000a84:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000a86:	463b      	mov	r3, r7
 8000a88:	2200      	movs	r2, #0
 8000a8a:	601a      	str	r2, [r3, #0]
 8000a8c:	605a      	str	r2, [r3, #4]
 8000a8e:	609a      	str	r2, [r3, #8]
 8000a90:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000a92:	f002 fc9b 	bl	80033cc <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000a96:	2301      	movs	r3, #1
 8000a98:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000aa2:	231f      	movs	r3, #31
 8000aa4:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000aa6:	2387      	movs	r3, #135	@ 0x87
 8000aa8:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000aba:	2300      	movs	r3, #0
 8000abc:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000ac2:	463b      	mov	r3, r7
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f002 fcb9 	bl	800343c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000aca:	2004      	movs	r0, #4
 8000acc:	f002 fc96 	bl	80033fc <HAL_MPU_Enable>

}
 8000ad0:	bf00      	nop
 8000ad2:	3710      	adds	r7, #16
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}

08000ad8 <Get_Voltage>:

int Get_Voltage(int scale, uint16_t adc_integer){
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
 8000ae0:	460b      	mov	r3, r1
 8000ae2:	807b      	strh	r3, [r7, #2]
	if(scale==1){
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	2b01      	cmp	r3, #1
 8000ae8:	d10c      	bne.n	8000b04 <Get_Voltage+0x2c>
		return (adc_integer*3300/65535);
 8000aea:	887b      	ldrh	r3, [r7, #2]
 8000aec:	f640 42e4 	movw	r2, #3300	@ 0xce4
 8000af0:	fb02 f303 	mul.w	r3, r2, r3
 8000af4:	4a0a      	ldr	r2, [pc, #40]	@ (8000b20 <Get_Voltage+0x48>)
 8000af6:	fb82 1203 	smull	r1, r2, r2, r3
 8000afa:	441a      	add	r2, r3
 8000afc:	13d2      	asrs	r2, r2, #15
 8000afe:	17db      	asrs	r3, r3, #31
 8000b00:	1ad3      	subs	r3, r2, r3
 8000b02:	e009      	b.n	8000b18 <Get_Voltage+0x40>
	}
	else if(scale==2){
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	2b02      	cmp	r3, #2
 8000b08:	d101      	bne.n	8000b0e <Get_Voltage+0x36>
		return 0;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	e004      	b.n	8000b18 <Get_Voltage+0x40>
	}
	else{
		printf("improper scale");
 8000b0e:	4805      	ldr	r0, [pc, #20]	@ (8000b24 <Get_Voltage+0x4c>)
 8000b10:	f007 fdb0 	bl	8008674 <iprintf>
		return -1;
 8000b14:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 8000b18:	4618      	mov	r0, r3
 8000b1a:	3708      	adds	r7, #8
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	80008001 	.word	0x80008001
 8000b24:	08009388 	.word	0x08009388

08000b28 <Error_Handler>:




void Error_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b2c:	b672      	cpsid	i
}
 8000b2e:	bf00      	nop

  __disable_irq();
  while (1)
 8000b30:	bf00      	nop
 8000b32:	e7fd      	b.n	8000b30 <Error_Handler+0x8>

08000b34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b083      	sub	sp, #12
 8000b38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b3a:	4b0a      	ldr	r3, [pc, #40]	@ (8000b64 <HAL_MspInit+0x30>)
 8000b3c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000b40:	4a08      	ldr	r2, [pc, #32]	@ (8000b64 <HAL_MspInit+0x30>)
 8000b42:	f043 0302 	orr.w	r3, r3, #2
 8000b46:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000b4a:	4b06      	ldr	r3, [pc, #24]	@ (8000b64 <HAL_MspInit+0x30>)
 8000b4c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000b50:	f003 0302 	and.w	r3, r3, #2
 8000b54:	607b      	str	r3, [r7, #4]
 8000b56:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b58:	bf00      	nop
 8000b5a:	370c      	adds	r7, #12
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr
 8000b64:	58024400 	.word	0x58024400

08000b68 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b0b8      	sub	sp, #224	@ 0xe0
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b70:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000b74:	2200      	movs	r2, #0
 8000b76:	601a      	str	r2, [r3, #0]
 8000b78:	605a      	str	r2, [r3, #4]
 8000b7a:	609a      	str	r2, [r3, #8]
 8000b7c:	60da      	str	r2, [r3, #12]
 8000b7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b80:	f107 0310 	add.w	r3, r7, #16
 8000b84:	22b8      	movs	r2, #184	@ 0xb8
 8000b86:	2100      	movs	r1, #0
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f007 fdc8 	bl	800871e <memset>
  if(hadc->Instance==ADC1)
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	4a2c      	ldr	r2, [pc, #176]	@ (8000c44 <HAL_ADC_MspInit+0xdc>)
 8000b94:	4293      	cmp	r3, r2
 8000b96:	d150      	bne.n	8000c3a <HAL_ADC_MspInit+0xd2>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000b98:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000b9c:	f04f 0300 	mov.w	r3, #0
 8000ba0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 8000ba4:	2304      	movs	r3, #4
 8000ba6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 20;
 8000ba8:	2314      	movs	r3, #20
 8000baa:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 8;
 8000bac:	2308      	movs	r3, #8
 8000bae:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000bb0:	2302      	movs	r3, #2
 8000bb2:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000bb4:	2302      	movs	r3, #2
 8000bb6:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000bb8:	23c0      	movs	r3, #192	@ 0xc0
 8000bba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bca:	f107 0310 	add.w	r3, r7, #16
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f003 fe3a 	bl	8004848 <HAL_RCCEx_PeriphCLKConfig>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <HAL_ADC_MspInit+0x76>
    {
      Error_Handler();
 8000bda:	f7ff ffa5 	bl	8000b28 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000bde:	4b1a      	ldr	r3, [pc, #104]	@ (8000c48 <HAL_ADC_MspInit+0xe0>)
 8000be0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000be4:	4a18      	ldr	r2, [pc, #96]	@ (8000c48 <HAL_ADC_MspInit+0xe0>)
 8000be6:	f043 0320 	orr.w	r3, r3, #32
 8000bea:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000bee:	4b16      	ldr	r3, [pc, #88]	@ (8000c48 <HAL_ADC_MspInit+0xe0>)
 8000bf0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000bf4:	f003 0320 	and.w	r3, r3, #32
 8000bf8:	60fb      	str	r3, [r7, #12]
 8000bfa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000bfc:	4b12      	ldr	r3, [pc, #72]	@ (8000c48 <HAL_ADC_MspInit+0xe0>)
 8000bfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c02:	4a11      	ldr	r2, [pc, #68]	@ (8000c48 <HAL_ADC_MspInit+0xe0>)
 8000c04:	f043 0320 	orr.w	r3, r3, #32
 8000c08:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c0c:	4b0e      	ldr	r3, [pc, #56]	@ (8000c48 <HAL_ADC_MspInit+0xe0>)
 8000c0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c12:	f003 0320 	and.w	r3, r3, #32
 8000c16:	60bb      	str	r3, [r7, #8]
 8000c18:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PF11     ------> ADC1_INP2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000c1a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000c1e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c22:	2303      	movs	r3, #3
 8000c24:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000c2e:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000c32:	4619      	mov	r1, r3
 8000c34:	4805      	ldr	r0, [pc, #20]	@ (8000c4c <HAL_ADC_MspInit+0xe4>)
 8000c36:	f002 fca5 	bl	8003584 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000c3a:	bf00      	nop
 8000c3c:	37e0      	adds	r7, #224	@ 0xe0
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	40022000 	.word	0x40022000
 8000c48:	58024400 	.word	0x58024400
 8000c4c:	58021400 	.word	0x58021400

08000c50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b0b8      	sub	sp, #224	@ 0xe0
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c58:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	601a      	str	r2, [r3, #0]
 8000c60:	605a      	str	r2, [r3, #4]
 8000c62:	609a      	str	r2, [r3, #8]
 8000c64:	60da      	str	r2, [r3, #12]
 8000c66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c68:	f107 0310 	add.w	r3, r7, #16
 8000c6c:	22b8      	movs	r2, #184	@ 0xb8
 8000c6e:	2100      	movs	r1, #0
 8000c70:	4618      	mov	r0, r3
 8000c72:	f007 fd54 	bl	800871e <memset>
  if(huart->Instance==USART2)
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	4a26      	ldr	r2, [pc, #152]	@ (8000d14 <HAL_UART_MspInit+0xc4>)
 8000c7c:	4293      	cmp	r3, r2
 8000c7e:	d145      	bne.n	8000d0c <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000c80:	f04f 0202 	mov.w	r2, #2
 8000c84:	f04f 0300 	mov.w	r3, #0
 8000c88:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c92:	f107 0310 	add.w	r3, r7, #16
 8000c96:	4618      	mov	r0, r3
 8000c98:	f003 fdd6 	bl	8004848 <HAL_RCCEx_PeriphCLKConfig>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000ca2:	f7ff ff41 	bl	8000b28 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ca6:	4b1c      	ldr	r3, [pc, #112]	@ (8000d18 <HAL_UART_MspInit+0xc8>)
 8000ca8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000cac:	4a1a      	ldr	r2, [pc, #104]	@ (8000d18 <HAL_UART_MspInit+0xc8>)
 8000cae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cb2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000cb6:	4b18      	ldr	r3, [pc, #96]	@ (8000d18 <HAL_UART_MspInit+0xc8>)
 8000cb8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000cbc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000cc0:	60fb      	str	r3, [r7, #12]
 8000cc2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cc4:	4b14      	ldr	r3, [pc, #80]	@ (8000d18 <HAL_UART_MspInit+0xc8>)
 8000cc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cca:	4a13      	ldr	r2, [pc, #76]	@ (8000d18 <HAL_UART_MspInit+0xc8>)
 8000ccc:	f043 0301 	orr.w	r3, r3, #1
 8000cd0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cd4:	4b10      	ldr	r3, [pc, #64]	@ (8000d18 <HAL_UART_MspInit+0xc8>)
 8000cd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cda:	f003 0301 	and.w	r3, r3, #1
 8000cde:	60bb      	str	r3, [r7, #8]
 8000ce0:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000ce2:	230c      	movs	r3, #12
 8000ce4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce8:	2302      	movs	r3, #2
 8000cea:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cfa:	2307      	movs	r3, #7
 8000cfc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d00:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000d04:	4619      	mov	r1, r3
 8000d06:	4805      	ldr	r0, [pc, #20]	@ (8000d1c <HAL_UART_MspInit+0xcc>)
 8000d08:	f002 fc3c 	bl	8003584 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000d0c:	bf00      	nop
 8000d0e:	37e0      	adds	r7, #224	@ 0xe0
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	40004400 	.word	0x40004400
 8000d18:	58024400 	.word	0x58024400
 8000d1c:	58020000 	.word	0x58020000

08000d20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d24:	bf00      	nop
 8000d26:	e7fd      	b.n	8000d24 <NMI_Handler+0x4>

08000d28 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d2c:	bf00      	nop
 8000d2e:	e7fd      	b.n	8000d2c <HardFault_Handler+0x4>

08000d30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d34:	bf00      	nop
 8000d36:	e7fd      	b.n	8000d34 <MemManage_Handler+0x4>

08000d38 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d3c:	bf00      	nop
 8000d3e:	e7fd      	b.n	8000d3c <BusFault_Handler+0x4>

08000d40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d44:	bf00      	nop
 8000d46:	e7fd      	b.n	8000d44 <UsageFault_Handler+0x4>

08000d48 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d4c:	bf00      	nop
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr

08000d56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d56:	b480      	push	{r7}
 8000d58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d5a:	bf00      	nop
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr

08000d64 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d68:	bf00      	nop
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr

08000d72 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d72:	b580      	push	{r7, lr}
 8000d74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d76:	f000 fbd7 	bl	8001528 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d7a:	bf00      	nop
 8000d7c:	bd80      	pop	{r7, pc}

08000d7e <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000d7e:	b580      	push	{r7, lr}
 8000d80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8000d82:	2000      	movs	r0, #0
 8000d84:	f000 fa62 	bl	800124c <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d88:	bf00      	nop
 8000d8a:	bd80      	pop	{r7, pc}

08000d8c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b086      	sub	sp, #24
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	60f8      	str	r0, [r7, #12]
 8000d94:	60b9      	str	r1, [r7, #8]
 8000d96:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d98:	2300      	movs	r3, #0
 8000d9a:	617b      	str	r3, [r7, #20]
 8000d9c:	e00a      	b.n	8000db4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d9e:	f3af 8000 	nop.w
 8000da2:	4601      	mov	r1, r0
 8000da4:	68bb      	ldr	r3, [r7, #8]
 8000da6:	1c5a      	adds	r2, r3, #1
 8000da8:	60ba      	str	r2, [r7, #8]
 8000daa:	b2ca      	uxtb	r2, r1
 8000dac:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	3301      	adds	r3, #1
 8000db2:	617b      	str	r3, [r7, #20]
 8000db4:	697a      	ldr	r2, [r7, #20]
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	429a      	cmp	r2, r3
 8000dba:	dbf0      	blt.n	8000d9e <_read+0x12>
  }

  return len;
 8000dbc:	687b      	ldr	r3, [r7, #4]
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	3718      	adds	r7, #24
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}

08000dc6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000dc6:	b580      	push	{r7, lr}
 8000dc8:	b086      	sub	sp, #24
 8000dca:	af00      	add	r7, sp, #0
 8000dcc:	60f8      	str	r0, [r7, #12]
 8000dce:	60b9      	str	r1, [r7, #8]
 8000dd0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	617b      	str	r3, [r7, #20]
 8000dd6:	e009      	b.n	8000dec <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000dd8:	68bb      	ldr	r3, [r7, #8]
 8000dda:	1c5a      	adds	r2, r3, #1
 8000ddc:	60ba      	str	r2, [r7, #8]
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	4618      	mov	r0, r3
 8000de2:	f000 fab3 	bl	800134c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000de6:	697b      	ldr	r3, [r7, #20]
 8000de8:	3301      	adds	r3, #1
 8000dea:	617b      	str	r3, [r7, #20]
 8000dec:	697a      	ldr	r2, [r7, #20]
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	429a      	cmp	r2, r3
 8000df2:	dbf1      	blt.n	8000dd8 <_write+0x12>
  }
  return len;
 8000df4:	687b      	ldr	r3, [r7, #4]
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	3718      	adds	r7, #24
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}

08000dfe <_close>:

int _close(int file)
{
 8000dfe:	b480      	push	{r7}
 8000e00:	b083      	sub	sp, #12
 8000e02:	af00      	add	r7, sp, #0
 8000e04:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e06:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	370c      	adds	r7, #12
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr

08000e16 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e16:	b480      	push	{r7}
 8000e18:	b083      	sub	sp, #12
 8000e1a:	af00      	add	r7, sp, #0
 8000e1c:	6078      	str	r0, [r7, #4]
 8000e1e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000e26:	605a      	str	r2, [r3, #4]
  return 0;
 8000e28:	2300      	movs	r3, #0
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	370c      	adds	r7, #12
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr

08000e36 <_isatty>:

int _isatty(int file)
{
 8000e36:	b480      	push	{r7}
 8000e38:	b083      	sub	sp, #12
 8000e3a:	af00      	add	r7, sp, #0
 8000e3c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e3e:	2301      	movs	r3, #1
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	370c      	adds	r7, #12
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr

08000e4c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b085      	sub	sp, #20
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	60f8      	str	r0, [r7, #12]
 8000e54:	60b9      	str	r1, [r7, #8]
 8000e56:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e58:	2300      	movs	r3, #0
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	3714      	adds	r7, #20
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr
	...

08000e68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b086      	sub	sp, #24
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e70:	4a14      	ldr	r2, [pc, #80]	@ (8000ec4 <_sbrk+0x5c>)
 8000e72:	4b15      	ldr	r3, [pc, #84]	@ (8000ec8 <_sbrk+0x60>)
 8000e74:	1ad3      	subs	r3, r2, r3
 8000e76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e7c:	4b13      	ldr	r3, [pc, #76]	@ (8000ecc <_sbrk+0x64>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d102      	bne.n	8000e8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e84:	4b11      	ldr	r3, [pc, #68]	@ (8000ecc <_sbrk+0x64>)
 8000e86:	4a12      	ldr	r2, [pc, #72]	@ (8000ed0 <_sbrk+0x68>)
 8000e88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e8a:	4b10      	ldr	r3, [pc, #64]	@ (8000ecc <_sbrk+0x64>)
 8000e8c:	681a      	ldr	r2, [r3, #0]
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	4413      	add	r3, r2
 8000e92:	693a      	ldr	r2, [r7, #16]
 8000e94:	429a      	cmp	r2, r3
 8000e96:	d207      	bcs.n	8000ea8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e98:	f007 fc90 	bl	80087bc <__errno>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	220c      	movs	r2, #12
 8000ea0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ea2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ea6:	e009      	b.n	8000ebc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ea8:	4b08      	ldr	r3, [pc, #32]	@ (8000ecc <_sbrk+0x64>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000eae:	4b07      	ldr	r3, [pc, #28]	@ (8000ecc <_sbrk+0x64>)
 8000eb0:	681a      	ldr	r2, [r3, #0]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	4413      	add	r3, r2
 8000eb6:	4a05      	ldr	r2, [pc, #20]	@ (8000ecc <_sbrk+0x64>)
 8000eb8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000eba:	68fb      	ldr	r3, [r7, #12]
}
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	3718      	adds	r7, #24
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	24050000 	.word	0x24050000
 8000ec8:	00000400 	.word	0x00000400
 8000ecc:	240001b8 	.word	0x240001b8
 8000ed0:	240003b0 	.word	0x240003b0

08000ed4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000ed8:	4b3e      	ldr	r3, [pc, #248]	@ (8000fd4 <SystemInit+0x100>)
 8000eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ede:	4a3d      	ldr	r2, [pc, #244]	@ (8000fd4 <SystemInit+0x100>)
 8000ee0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ee4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ee8:	4b3b      	ldr	r3, [pc, #236]	@ (8000fd8 <SystemInit+0x104>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f003 030f 	and.w	r3, r3, #15
 8000ef0:	2b06      	cmp	r3, #6
 8000ef2:	d807      	bhi.n	8000f04 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ef4:	4b38      	ldr	r3, [pc, #224]	@ (8000fd8 <SystemInit+0x104>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f023 030f 	bic.w	r3, r3, #15
 8000efc:	4a36      	ldr	r2, [pc, #216]	@ (8000fd8 <SystemInit+0x104>)
 8000efe:	f043 0307 	orr.w	r3, r3, #7
 8000f02:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000f04:	4b35      	ldr	r3, [pc, #212]	@ (8000fdc <SystemInit+0x108>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a34      	ldr	r2, [pc, #208]	@ (8000fdc <SystemInit+0x108>)
 8000f0a:	f043 0301 	orr.w	r3, r3, #1
 8000f0e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000f10:	4b32      	ldr	r3, [pc, #200]	@ (8000fdc <SystemInit+0x108>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000f16:	4b31      	ldr	r3, [pc, #196]	@ (8000fdc <SystemInit+0x108>)
 8000f18:	681a      	ldr	r2, [r3, #0]
 8000f1a:	4930      	ldr	r1, [pc, #192]	@ (8000fdc <SystemInit+0x108>)
 8000f1c:	4b30      	ldr	r3, [pc, #192]	@ (8000fe0 <SystemInit+0x10c>)
 8000f1e:	4013      	ands	r3, r2
 8000f20:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000f22:	4b2d      	ldr	r3, [pc, #180]	@ (8000fd8 <SystemInit+0x104>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	f003 0308 	and.w	r3, r3, #8
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d007      	beq.n	8000f3e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000f2e:	4b2a      	ldr	r3, [pc, #168]	@ (8000fd8 <SystemInit+0x104>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f023 030f 	bic.w	r3, r3, #15
 8000f36:	4a28      	ldr	r2, [pc, #160]	@ (8000fd8 <SystemInit+0x104>)
 8000f38:	f043 0307 	orr.w	r3, r3, #7
 8000f3c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000f3e:	4b27      	ldr	r3, [pc, #156]	@ (8000fdc <SystemInit+0x108>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000f44:	4b25      	ldr	r3, [pc, #148]	@ (8000fdc <SystemInit+0x108>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000f4a:	4b24      	ldr	r3, [pc, #144]	@ (8000fdc <SystemInit+0x108>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000f50:	4b22      	ldr	r3, [pc, #136]	@ (8000fdc <SystemInit+0x108>)
 8000f52:	4a24      	ldr	r2, [pc, #144]	@ (8000fe4 <SystemInit+0x110>)
 8000f54:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000f56:	4b21      	ldr	r3, [pc, #132]	@ (8000fdc <SystemInit+0x108>)
 8000f58:	4a23      	ldr	r2, [pc, #140]	@ (8000fe8 <SystemInit+0x114>)
 8000f5a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000f5c:	4b1f      	ldr	r3, [pc, #124]	@ (8000fdc <SystemInit+0x108>)
 8000f5e:	4a23      	ldr	r2, [pc, #140]	@ (8000fec <SystemInit+0x118>)
 8000f60:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000f62:	4b1e      	ldr	r3, [pc, #120]	@ (8000fdc <SystemInit+0x108>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000f68:	4b1c      	ldr	r3, [pc, #112]	@ (8000fdc <SystemInit+0x108>)
 8000f6a:	4a20      	ldr	r2, [pc, #128]	@ (8000fec <SystemInit+0x118>)
 8000f6c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000f6e:	4b1b      	ldr	r3, [pc, #108]	@ (8000fdc <SystemInit+0x108>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000f74:	4b19      	ldr	r3, [pc, #100]	@ (8000fdc <SystemInit+0x108>)
 8000f76:	4a1d      	ldr	r2, [pc, #116]	@ (8000fec <SystemInit+0x118>)
 8000f78:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000f7a:	4b18      	ldr	r3, [pc, #96]	@ (8000fdc <SystemInit+0x108>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000f80:	4b16      	ldr	r3, [pc, #88]	@ (8000fdc <SystemInit+0x108>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a15      	ldr	r2, [pc, #84]	@ (8000fdc <SystemInit+0x108>)
 8000f86:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000f8a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000f8c:	4b13      	ldr	r3, [pc, #76]	@ (8000fdc <SystemInit+0x108>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8000f92:	4b12      	ldr	r3, [pc, #72]	@ (8000fdc <SystemInit+0x108>)
 8000f94:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000f98:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d113      	bne.n	8000fc8 <SystemInit+0xf4>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000fa0:	4b0e      	ldr	r3, [pc, #56]	@ (8000fdc <SystemInit+0x108>)
 8000fa2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000fa6:	4a0d      	ldr	r2, [pc, #52]	@ (8000fdc <SystemInit+0x108>)
 8000fa8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000fac:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000fb0:	4b0f      	ldr	r3, [pc, #60]	@ (8000ff0 <SystemInit+0x11c>)
 8000fb2:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000fb6:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000fb8:	4b08      	ldr	r3, [pc, #32]	@ (8000fdc <SystemInit+0x108>)
 8000fba:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000fbe:	4a07      	ldr	r2, [pc, #28]	@ (8000fdc <SystemInit+0x108>)
 8000fc0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000fc4:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000fc8:	bf00      	nop
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop
 8000fd4:	e000ed00 	.word	0xe000ed00
 8000fd8:	52002000 	.word	0x52002000
 8000fdc:	58024400 	.word	0x58024400
 8000fe0:	eaf6ed7f 	.word	0xeaf6ed7f
 8000fe4:	02020200 	.word	0x02020200
 8000fe8:	01ff0000 	.word	0x01ff0000
 8000fec:	01010280 	.word	0x01010280
 8000ff0:	52004000 	.word	0x52004000

08000ff4 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8000ff8:	4b09      	ldr	r3, [pc, #36]	@ (8001020 <ExitRun0Mode+0x2c>)
 8000ffa:	68db      	ldr	r3, [r3, #12]
 8000ffc:	4a08      	ldr	r2, [pc, #32]	@ (8001020 <ExitRun0Mode+0x2c>)
 8000ffe:	f043 0302 	orr.w	r3, r3, #2
 8001002:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8001004:	bf00      	nop
 8001006:	4b06      	ldr	r3, [pc, #24]	@ (8001020 <ExitRun0Mode+0x2c>)
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800100e:	2b00      	cmp	r3, #0
 8001010:	d0f9      	beq.n	8001006 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8001012:	bf00      	nop
 8001014:	bf00      	nop
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop
 8001020:	58024800 	.word	0x58024800

08001024 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001024:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8001060 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001028:	f7ff ffe4 	bl	8000ff4 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 800102c:	f7ff ff52 	bl	8000ed4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001030:	480c      	ldr	r0, [pc, #48]	@ (8001064 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001032:	490d      	ldr	r1, [pc, #52]	@ (8001068 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001034:	4a0d      	ldr	r2, [pc, #52]	@ (800106c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001036:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001038:	e002      	b.n	8001040 <LoopCopyDataInit>

0800103a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800103a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800103c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800103e:	3304      	adds	r3, #4

08001040 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001040:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001042:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001044:	d3f9      	bcc.n	800103a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001046:	4a0a      	ldr	r2, [pc, #40]	@ (8001070 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001048:	4c0a      	ldr	r4, [pc, #40]	@ (8001074 <LoopFillZerobss+0x22>)
  movs r3, #0
 800104a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800104c:	e001      	b.n	8001052 <LoopFillZerobss>

0800104e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800104e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001050:	3204      	adds	r2, #4

08001052 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001052:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001054:	d3fb      	bcc.n	800104e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001056:	f007 fbb7 	bl	80087c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800105a:	f7ff fb21 	bl	80006a0 <main>
  bx  lr
 800105e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001060:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001064:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001068:	24000088 	.word	0x24000088
  ldr r2, =_sidata
 800106c:	08009420 	.word	0x08009420
  ldr r2, =_sbss
 8001070:	24000088 	.word	0x24000088
  ldr r4, =_ebss
 8001074:	240003ac 	.word	0x240003ac

08001078 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001078:	e7fe      	b.n	8001078 <ADC3_IRQHandler>
	...

0800107c <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b08c      	sub	sp, #48	@ 0x30
 8001080:	af00      	add	r7, sp, #0
 8001082:	4603      	mov	r3, r0
 8001084:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001086:	2300      	movs	r3, #0
 8001088:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 800108a:	79fb      	ldrb	r3, [r7, #7]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d009      	beq.n	80010a4 <BSP_LED_Init+0x28>
 8001090:	79fb      	ldrb	r3, [r7, #7]
 8001092:	2b01      	cmp	r3, #1
 8001094:	d006      	beq.n	80010a4 <BSP_LED_Init+0x28>
 8001096:	79fb      	ldrb	r3, [r7, #7]
 8001098:	2b02      	cmp	r3, #2
 800109a:	d003      	beq.n	80010a4 <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800109c:	f06f 0301 	mvn.w	r3, #1
 80010a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80010a2:	e055      	b.n	8001150 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 80010a4:	79fb      	ldrb	r3, [r7, #7]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d10f      	bne.n	80010ca <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 80010aa:	4b2c      	ldr	r3, [pc, #176]	@ (800115c <BSP_LED_Init+0xe0>)
 80010ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010b0:	4a2a      	ldr	r2, [pc, #168]	@ (800115c <BSP_LED_Init+0xe0>)
 80010b2:	f043 0302 	orr.w	r3, r3, #2
 80010b6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010ba:	4b28      	ldr	r3, [pc, #160]	@ (800115c <BSP_LED_Init+0xe0>)
 80010bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010c0:	f003 0302 	and.w	r3, r3, #2
 80010c4:	617b      	str	r3, [r7, #20]
 80010c6:	697b      	ldr	r3, [r7, #20]
 80010c8:	e021      	b.n	800110e <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 80010ca:	79fb      	ldrb	r3, [r7, #7]
 80010cc:	2b01      	cmp	r3, #1
 80010ce:	d10f      	bne.n	80010f0 <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 80010d0:	4b22      	ldr	r3, [pc, #136]	@ (800115c <BSP_LED_Init+0xe0>)
 80010d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010d6:	4a21      	ldr	r2, [pc, #132]	@ (800115c <BSP_LED_Init+0xe0>)
 80010d8:	f043 0310 	orr.w	r3, r3, #16
 80010dc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010e0:	4b1e      	ldr	r3, [pc, #120]	@ (800115c <BSP_LED_Init+0xe0>)
 80010e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010e6:	f003 0310 	and.w	r3, r3, #16
 80010ea:	613b      	str	r3, [r7, #16]
 80010ec:	693b      	ldr	r3, [r7, #16]
 80010ee:	e00e      	b.n	800110e <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 80010f0:	4b1a      	ldr	r3, [pc, #104]	@ (800115c <BSP_LED_Init+0xe0>)
 80010f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010f6:	4a19      	ldr	r2, [pc, #100]	@ (800115c <BSP_LED_Init+0xe0>)
 80010f8:	f043 0302 	orr.w	r3, r3, #2
 80010fc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001100:	4b16      	ldr	r3, [pc, #88]	@ (800115c <BSP_LED_Init+0xe0>)
 8001102:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001106:	f003 0302 	and.w	r3, r3, #2
 800110a:	60fb      	str	r3, [r7, #12]
 800110c:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 800110e:	79fb      	ldrb	r3, [r7, #7]
 8001110:	4a13      	ldr	r2, [pc, #76]	@ (8001160 <BSP_LED_Init+0xe4>)
 8001112:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001116:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8001118:	2301      	movs	r3, #1
 800111a:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 800111c:	2300      	movs	r3, #0
 800111e:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001120:	2303      	movs	r3, #3
 8001122:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8001124:	79fb      	ldrb	r3, [r7, #7]
 8001126:	4a0f      	ldr	r2, [pc, #60]	@ (8001164 <BSP_LED_Init+0xe8>)
 8001128:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800112c:	f107 0218 	add.w	r2, r7, #24
 8001130:	4611      	mov	r1, r2
 8001132:	4618      	mov	r0, r3
 8001134:	f002 fa26 	bl	8003584 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8001138:	79fb      	ldrb	r3, [r7, #7]
 800113a:	4a0a      	ldr	r2, [pc, #40]	@ (8001164 <BSP_LED_Init+0xe8>)
 800113c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001140:	79fb      	ldrb	r3, [r7, #7]
 8001142:	4a07      	ldr	r2, [pc, #28]	@ (8001160 <BSP_LED_Init+0xe4>)
 8001144:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001148:	2200      	movs	r2, #0
 800114a:	4619      	mov	r1, r3
 800114c:	f002 fbc2 	bl	80038d4 <HAL_GPIO_WritePin>
  }

  return ret;
 8001150:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8001152:	4618      	mov	r0, r3
 8001154:	3730      	adds	r7, #48	@ 0x30
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	58024400 	.word	0x58024400
 8001160:	080093a8 	.word	0x080093a8
 8001164:	2400000c 	.word	0x2400000c

08001168 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b088      	sub	sp, #32
 800116c:	af00      	add	r7, sp, #0
 800116e:	4603      	mov	r3, r0
 8001170:	460a      	mov	r2, r1
 8001172:	71fb      	strb	r3, [r7, #7]
 8001174:	4613      	mov	r3, r2
 8001176:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8001178:	4b2e      	ldr	r3, [pc, #184]	@ (8001234 <BSP_PB_Init+0xcc>)
 800117a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800117e:	4a2d      	ldr	r2, [pc, #180]	@ (8001234 <BSP_PB_Init+0xcc>)
 8001180:	f043 0304 	orr.w	r3, r3, #4
 8001184:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001188:	4b2a      	ldr	r3, [pc, #168]	@ (8001234 <BSP_PB_Init+0xcc>)
 800118a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800118e:	f003 0304 	and.w	r3, r3, #4
 8001192:	60bb      	str	r3, [r7, #8]
 8001194:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8001196:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800119a:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 800119c:	2302      	movs	r3, #2
 800119e:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80011a0:	2302      	movs	r3, #2
 80011a2:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 80011a4:	79bb      	ldrb	r3, [r7, #6]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d10c      	bne.n	80011c4 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 80011aa:	2300      	movs	r3, #0
 80011ac:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 80011ae:	79fb      	ldrb	r3, [r7, #7]
 80011b0:	4a21      	ldr	r2, [pc, #132]	@ (8001238 <BSP_PB_Init+0xd0>)
 80011b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011b6:	f107 020c 	add.w	r2, r7, #12
 80011ba:	4611      	mov	r1, r2
 80011bc:	4618      	mov	r0, r3
 80011be:	f002 f9e1 	bl	8003584 <HAL_GPIO_Init>
 80011c2:	e031      	b.n	8001228 <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 80011c4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80011c8:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80011ca:	79fb      	ldrb	r3, [r7, #7]
 80011cc:	4a1a      	ldr	r2, [pc, #104]	@ (8001238 <BSP_PB_Init+0xd0>)
 80011ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011d2:	f107 020c 	add.w	r2, r7, #12
 80011d6:	4611      	mov	r1, r2
 80011d8:	4618      	mov	r0, r3
 80011da:	f002 f9d3 	bl	8003584 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 80011de:	79fb      	ldrb	r3, [r7, #7]
 80011e0:	00db      	lsls	r3, r3, #3
 80011e2:	4a16      	ldr	r2, [pc, #88]	@ (800123c <BSP_PB_Init+0xd4>)
 80011e4:	441a      	add	r2, r3
 80011e6:	79fb      	ldrb	r3, [r7, #7]
 80011e8:	4915      	ldr	r1, [pc, #84]	@ (8001240 <BSP_PB_Init+0xd8>)
 80011ea:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80011ee:	4619      	mov	r1, r3
 80011f0:	4610      	mov	r0, r2
 80011f2:	f002 f982 	bl	80034fa <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 80011f6:	79fb      	ldrb	r3, [r7, #7]
 80011f8:	00db      	lsls	r3, r3, #3
 80011fa:	4a10      	ldr	r2, [pc, #64]	@ (800123c <BSP_PB_Init+0xd4>)
 80011fc:	1898      	adds	r0, r3, r2
 80011fe:	79fb      	ldrb	r3, [r7, #7]
 8001200:	4a10      	ldr	r2, [pc, #64]	@ (8001244 <BSP_PB_Init+0xdc>)
 8001202:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001206:	461a      	mov	r2, r3
 8001208:	2100      	movs	r1, #0
 800120a:	f002 f957 	bl	80034bc <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 800120e:	2028      	movs	r0, #40	@ 0x28
 8001210:	79fb      	ldrb	r3, [r7, #7]
 8001212:	4a0d      	ldr	r2, [pc, #52]	@ (8001248 <BSP_PB_Init+0xe0>)
 8001214:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001218:	2200      	movs	r2, #0
 800121a:	4619      	mov	r1, r3
 800121c:	f002 f8a1 	bl	8003362 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8001220:	2328      	movs	r3, #40	@ 0x28
 8001222:	4618      	mov	r0, r3
 8001224:	f002 f8b7 	bl	8003396 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8001228:	2300      	movs	r3, #0
}
 800122a:	4618      	mov	r0, r3
 800122c:	3720      	adds	r7, #32
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	58024400 	.word	0x58024400
 8001238:	24000018 	.word	0x24000018
 800123c:	240001bc 	.word	0x240001bc
 8001240:	080093b0 	.word	0x080093b0
 8001244:	2400001c 	.word	0x2400001c
 8001248:	24000020 	.word	0x24000020

0800124c <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
 8001252:	4603      	mov	r3, r0
 8001254:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8001256:	79fb      	ldrb	r3, [r7, #7]
 8001258:	00db      	lsls	r3, r3, #3
 800125a:	4a04      	ldr	r2, [pc, #16]	@ (800126c <BSP_PB_IRQHandler+0x20>)
 800125c:	4413      	add	r3, r2
 800125e:	4618      	mov	r0, r3
 8001260:	f002 f960 	bl	8003524 <HAL_EXTI_IRQHandler>
}
 8001264:	bf00      	nop
 8001266:	3708      	adds	r7, #8
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	240001bc 	.word	0x240001bc

08001270 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8001270:	b480      	push	{r7}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0
 8001276:	4603      	mov	r3, r0
 8001278:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 800127a:	bf00      	nop
 800127c:	370c      	adds	r7, #12
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
	...

08001288 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b084      	sub	sp, #16
 800128c:	af00      	add	r7, sp, #0
 800128e:	4603      	mov	r3, r0
 8001290:	6039      	str	r1, [r7, #0]
 8001292:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001294:	2300      	movs	r3, #0
 8001296:	60fb      	str	r3, [r7, #12]

  if(COM >= COMn)
 8001298:	79fb      	ldrb	r3, [r7, #7]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d003      	beq.n	80012a6 <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800129e:	f06f 0301 	mvn.w	r3, #1
 80012a2:	60fb      	str	r3, [r7, #12]
 80012a4:	e018      	b.n	80012d8 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 80012a6:	79fb      	ldrb	r3, [r7, #7]
 80012a8:	2294      	movs	r2, #148	@ 0x94
 80012aa:	fb02 f303 	mul.w	r3, r2, r3
 80012ae:	4a0d      	ldr	r2, [pc, #52]	@ (80012e4 <BSP_COM_Init+0x5c>)
 80012b0:	4413      	add	r3, r2
 80012b2:	4618      	mov	r0, r3
 80012b4:	f000 f86e 	bl	8001394 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_USART3_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 80012b8:	79fb      	ldrb	r3, [r7, #7]
 80012ba:	2294      	movs	r2, #148	@ 0x94
 80012bc:	fb02 f303 	mul.w	r3, r2, r3
 80012c0:	4a08      	ldr	r2, [pc, #32]	@ (80012e4 <BSP_COM_Init+0x5c>)
 80012c2:	4413      	add	r3, r2
 80012c4:	6839      	ldr	r1, [r7, #0]
 80012c6:	4618      	mov	r0, r3
 80012c8:	f000 f80e 	bl	80012e8 <MX_USART3_Init>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d002      	beq.n	80012d8 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80012d2:	f06f 0303 	mvn.w	r3, #3
 80012d6:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80012d8:	68fb      	ldr	r3, [r7, #12]
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3710      	adds	r7, #16
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	240001c4 	.word	0x240001c4

080012e8 <MX_USART3_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART3_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 80012f2:	4b15      	ldr	r3, [pc, #84]	@ (8001348 <MX_USART3_Init+0x60>)
 80012f4:	681a      	ldr	r2, [r3, #0]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	681a      	ldr	r2, [r3, #0]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	220c      	movs	r2, #12
 8001306:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	895b      	ldrh	r3, [r3, #10]
 800130c:	461a      	mov	r2, r3
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = (uint32_t)COM_Init->WordLength;
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	685a      	ldr	r2, [r3, #4]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	891b      	ldrh	r3, [r3, #8]
 800131e:	461a      	mov	r2, r3
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	899b      	ldrh	r3, [r3, #12]
 8001328:	461a      	mov	r2, r3
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001334:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 8001336:	6878      	ldr	r0, [r7, #4]
 8001338:	f005 fe6c 	bl	8007014 <HAL_UART_Init>
 800133c:	4603      	mov	r3, r0
}
 800133e:	4618      	mov	r0, r3
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	24000008 	.word	0x24000008

0800134c <__io_putchar>:
 #ifdef __GNUC__
 int __io_putchar (int ch)
 #else
 int fputc (int ch, FILE *f)
 #endif /* __GNUC__ */
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit (&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 8001354:	4b09      	ldr	r3, [pc, #36]	@ (800137c <__io_putchar+0x30>)
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	461a      	mov	r2, r3
 800135a:	2394      	movs	r3, #148	@ 0x94
 800135c:	fb02 f303 	mul.w	r3, r2, r3
 8001360:	4a07      	ldr	r2, [pc, #28]	@ (8001380 <__io_putchar+0x34>)
 8001362:	1898      	adds	r0, r3, r2
 8001364:	1d39      	adds	r1, r7, #4
 8001366:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800136a:	2201      	movs	r2, #1
 800136c:	f005 fea2 	bl	80070b4 <HAL_UART_Transmit>
  return ch;
 8001370:	687b      	ldr	r3, [r7, #4]
}
 8001372:	4618      	mov	r0, r3
 8001374:	3708      	adds	r7, #8
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	24000258 	.word	0x24000258
 8001380:	240001c4 	.word	0x240001c4

08001384 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8001388:	2000      	movs	r0, #0
 800138a:	f7ff ff71 	bl	8001270 <BSP_PB_Callback>
}
 800138e:	bf00      	nop
 8001390:	bd80      	pop	{r7, pc}
	...

08001394 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b08a      	sub	sp, #40	@ 0x28
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 800139c:	4b27      	ldr	r3, [pc, #156]	@ (800143c <COM1_MspInit+0xa8>)
 800139e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013a2:	4a26      	ldr	r2, [pc, #152]	@ (800143c <COM1_MspInit+0xa8>)
 80013a4:	f043 0308 	orr.w	r3, r3, #8
 80013a8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013ac:	4b23      	ldr	r3, [pc, #140]	@ (800143c <COM1_MspInit+0xa8>)
 80013ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013b2:	f003 0308 	and.w	r3, r3, #8
 80013b6:	613b      	str	r3, [r7, #16]
 80013b8:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 80013ba:	4b20      	ldr	r3, [pc, #128]	@ (800143c <COM1_MspInit+0xa8>)
 80013bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013c0:	4a1e      	ldr	r2, [pc, #120]	@ (800143c <COM1_MspInit+0xa8>)
 80013c2:	f043 0308 	orr.w	r3, r3, #8
 80013c6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013ca:	4b1c      	ldr	r3, [pc, #112]	@ (800143c <COM1_MspInit+0xa8>)
 80013cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013d0:	f003 0308 	and.w	r3, r3, #8
 80013d4:	60fb      	str	r3, [r7, #12]
 80013d6:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 80013d8:	4b18      	ldr	r3, [pc, #96]	@ (800143c <COM1_MspInit+0xa8>)
 80013da:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80013de:	4a17      	ldr	r2, [pc, #92]	@ (800143c <COM1_MspInit+0xa8>)
 80013e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80013e4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80013e8:	4b14      	ldr	r3, [pc, #80]	@ (800143c <COM1_MspInit+0xa8>)
 80013ea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80013ee:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80013f2:	60bb      	str	r3, [r7, #8]
 80013f4:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM1_TX_PIN;
 80013f6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80013fa:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80013fc:	2302      	movs	r3, #2
 80013fe:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001400:	2302      	movs	r3, #2
 8001402:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8001404:	2301      	movs	r3, #1
 8001406:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8001408:	2307      	movs	r3, #7
 800140a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 800140c:	f107 0314 	add.w	r3, r7, #20
 8001410:	4619      	mov	r1, r3
 8001412:	480b      	ldr	r0, [pc, #44]	@ (8001440 <COM1_MspInit+0xac>)
 8001414:	f002 f8b6 	bl	8003584 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8001418:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800141c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800141e:	2302      	movs	r3, #2
 8001420:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8001422:	2307      	movs	r3, #7
 8001424:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8001426:	f107 0314 	add.w	r3, r7, #20
 800142a:	4619      	mov	r1, r3
 800142c:	4804      	ldr	r0, [pc, #16]	@ (8001440 <COM1_MspInit+0xac>)
 800142e:	f002 f8a9 	bl	8003584 <HAL_GPIO_Init>
}
 8001432:	bf00      	nop
 8001434:	3728      	adds	r7, #40	@ 0x28
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	58024400 	.word	0x58024400
 8001440:	58020c00 	.word	0x58020c00

08001444 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800144a:	2003      	movs	r0, #3
 800144c:	f001 ff7e 	bl	800334c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001450:	f003 f824 	bl	800449c <HAL_RCC_GetSysClockFreq>
 8001454:	4602      	mov	r2, r0
 8001456:	4b15      	ldr	r3, [pc, #84]	@ (80014ac <HAL_Init+0x68>)
 8001458:	699b      	ldr	r3, [r3, #24]
 800145a:	0a1b      	lsrs	r3, r3, #8
 800145c:	f003 030f 	and.w	r3, r3, #15
 8001460:	4913      	ldr	r1, [pc, #76]	@ (80014b0 <HAL_Init+0x6c>)
 8001462:	5ccb      	ldrb	r3, [r1, r3]
 8001464:	f003 031f 	and.w	r3, r3, #31
 8001468:	fa22 f303 	lsr.w	r3, r2, r3
 800146c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800146e:	4b0f      	ldr	r3, [pc, #60]	@ (80014ac <HAL_Init+0x68>)
 8001470:	699b      	ldr	r3, [r3, #24]
 8001472:	f003 030f 	and.w	r3, r3, #15
 8001476:	4a0e      	ldr	r2, [pc, #56]	@ (80014b0 <HAL_Init+0x6c>)
 8001478:	5cd3      	ldrb	r3, [r2, r3]
 800147a:	f003 031f 	and.w	r3, r3, #31
 800147e:	687a      	ldr	r2, [r7, #4]
 8001480:	fa22 f303 	lsr.w	r3, r2, r3
 8001484:	4a0b      	ldr	r2, [pc, #44]	@ (80014b4 <HAL_Init+0x70>)
 8001486:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001488:	4a0b      	ldr	r2, [pc, #44]	@ (80014b8 <HAL_Init+0x74>)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800148e:	2000      	movs	r0, #0
 8001490:	f000 f814 	bl	80014bc <HAL_InitTick>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800149a:	2301      	movs	r3, #1
 800149c:	e002      	b.n	80014a4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800149e:	f7ff fb49 	bl	8000b34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014a2:	2300      	movs	r3, #0
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	3708      	adds	r7, #8
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	58024400 	.word	0x58024400
 80014b0:	08009398 	.word	0x08009398
 80014b4:	24000004 	.word	0x24000004
 80014b8:	24000000 	.word	0x24000000

080014bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80014c4:	4b15      	ldr	r3, [pc, #84]	@ (800151c <HAL_InitTick+0x60>)
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d101      	bne.n	80014d0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80014cc:	2301      	movs	r3, #1
 80014ce:	e021      	b.n	8001514 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80014d0:	4b13      	ldr	r3, [pc, #76]	@ (8001520 <HAL_InitTick+0x64>)
 80014d2:	681a      	ldr	r2, [r3, #0]
 80014d4:	4b11      	ldr	r3, [pc, #68]	@ (800151c <HAL_InitTick+0x60>)
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	4619      	mov	r1, r3
 80014da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014de:	fbb3 f3f1 	udiv	r3, r3, r1
 80014e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80014e6:	4618      	mov	r0, r3
 80014e8:	f001 ff63 	bl	80033b2 <HAL_SYSTICK_Config>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
 80014f4:	e00e      	b.n	8001514 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2b0f      	cmp	r3, #15
 80014fa:	d80a      	bhi.n	8001512 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014fc:	2200      	movs	r2, #0
 80014fe:	6879      	ldr	r1, [r7, #4]
 8001500:	f04f 30ff 	mov.w	r0, #4294967295
 8001504:	f001 ff2d 	bl	8003362 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001508:	4a06      	ldr	r2, [pc, #24]	@ (8001524 <HAL_InitTick+0x68>)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800150e:	2300      	movs	r3, #0
 8001510:	e000      	b.n	8001514 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001512:	2301      	movs	r3, #1
}
 8001514:	4618      	mov	r0, r3
 8001516:	3708      	adds	r7, #8
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	24000028 	.word	0x24000028
 8001520:	24000000 	.word	0x24000000
 8001524:	24000024 	.word	0x24000024

08001528 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800152c:	4b06      	ldr	r3, [pc, #24]	@ (8001548 <HAL_IncTick+0x20>)
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	461a      	mov	r2, r3
 8001532:	4b06      	ldr	r3, [pc, #24]	@ (800154c <HAL_IncTick+0x24>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4413      	add	r3, r2
 8001538:	4a04      	ldr	r2, [pc, #16]	@ (800154c <HAL_IncTick+0x24>)
 800153a:	6013      	str	r3, [r2, #0]
}
 800153c:	bf00      	nop
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop
 8001548:	24000028 	.word	0x24000028
 800154c:	2400025c 	.word	0x2400025c

08001550 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
  return uwTick;
 8001554:	4b03      	ldr	r3, [pc, #12]	@ (8001564 <HAL_GetTick+0x14>)
 8001556:	681b      	ldr	r3, [r3, #0]
}
 8001558:	4618      	mov	r0, r3
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
 8001562:	bf00      	nop
 8001564:	2400025c 	.word	0x2400025c

08001568 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b084      	sub	sp, #16
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001570:	f7ff ffee 	bl	8001550 <HAL_GetTick>
 8001574:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001580:	d005      	beq.n	800158e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001582:	4b0a      	ldr	r3, [pc, #40]	@ (80015ac <HAL_Delay+0x44>)
 8001584:	781b      	ldrb	r3, [r3, #0]
 8001586:	461a      	mov	r2, r3
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	4413      	add	r3, r2
 800158c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800158e:	bf00      	nop
 8001590:	f7ff ffde 	bl	8001550 <HAL_GetTick>
 8001594:	4602      	mov	r2, r0
 8001596:	68bb      	ldr	r3, [r7, #8]
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	68fa      	ldr	r2, [r7, #12]
 800159c:	429a      	cmp	r2, r3
 800159e:	d8f7      	bhi.n	8001590 <HAL_Delay+0x28>
  {
  }
}
 80015a0:	bf00      	nop
 80015a2:	bf00      	nop
 80015a4:	3710      	adds	r7, #16
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	24000028 	.word	0x24000028

080015b0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
 80015b8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	689b      	ldr	r3, [r3, #8]
 80015be:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	431a      	orrs	r2, r3
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	609a      	str	r2, [r3, #8]
}
 80015ca:	bf00      	nop
 80015cc:	370c      	adds	r7, #12
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr

080015d6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80015d6:	b480      	push	{r7}
 80015d8:	b083      	sub	sp, #12
 80015da:	af00      	add	r7, sp, #0
 80015dc:	6078      	str	r0, [r7, #4]
 80015de:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	431a      	orrs	r2, r3
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	609a      	str	r2, [r3, #8]
}
 80015f0:	bf00      	nop
 80015f2:	370c      	adds	r7, #12
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr

080015fc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	689b      	ldr	r3, [r3, #8]
 8001608:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800160c:	4618      	mov	r0, r3
 800160e:	370c      	adds	r7, #12
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr

08001618 <LL_ADC_SetChannelPreselection>:
  *         @arg @ref LL_ADC_CHANNEL_18
  *         @arg @ref LL_ADC_CHANNEL_19
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001618:	b480      	push	{r7}
 800161a:	b087      	sub	sp, #28
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
 8001620:	6039      	str	r1, [r7, #0]
#if defined(ADC_VER_V5_V90)
    if (ADCx != ADC3)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	4a18      	ldr	r2, [pc, #96]	@ (8001688 <LL_ADC_SetChannelPreselection+0x70>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d027      	beq.n	800167a <LL_ADC_SetChannelPreselection+0x62>
    {
      /* ADC channels preselection */
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001630:	2b00      	cmp	r3, #0
 8001632:	d107      	bne.n	8001644 <LL_ADC_SetChannelPreselection+0x2c>
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	0e9b      	lsrs	r3, r3, #26
 8001638:	f003 031f 	and.w	r3, r3, #31
 800163c:	2201      	movs	r2, #1
 800163e:	fa02 f303 	lsl.w	r3, r2, r3
 8001642:	e015      	b.n	8001670 <LL_ADC_SetChannelPreselection+0x58>
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001648:	693b      	ldr	r3, [r7, #16]
 800164a:	fa93 f3a3 	rbit	r3, r3
 800164e:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d101      	bne.n	800165e <LL_ADC_SetChannelPreselection+0x46>
  {
    return 32U;
 800165a:	2320      	movs	r3, #32
 800165c:	e003      	b.n	8001666 <LL_ADC_SetChannelPreselection+0x4e>
  }
  return __builtin_clz(value);
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	fab3 f383 	clz	r3, r3
 8001664:	b2db      	uxtb	r3, r3
 8001666:	f003 031f 	and.w	r3, r3, #31
 800166a:	2201      	movs	r2, #1
 800166c:	fa02 f303 	lsl.w	r3, r2, r3
 8001670:	687a      	ldr	r2, [r7, #4]
 8001672:	69d2      	ldr	r2, [r2, #28]
 8001674:	431a      	orrs	r2, r3
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	61da      	str	r2, [r3, #28]
    }
#else
    /* ADC channels preselection */
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
}
 800167a:	bf00      	nop
 800167c:	371c      	adds	r7, #28
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr
 8001686:	bf00      	nop
 8001688:	58026000 	.word	0x58026000

0800168c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800168c:	b480      	push	{r7}
 800168e:	b087      	sub	sp, #28
 8001690:	af00      	add	r7, sp, #0
 8001692:	60f8      	str	r0, [r7, #12]
 8001694:	60b9      	str	r1, [r7, #8]
 8001696:	607a      	str	r2, [r7, #4]
 8001698:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	3360      	adds	r3, #96	@ 0x60
 800169e:	461a      	mov	r2, r3
 80016a0:	68bb      	ldr	r3, [r7, #8]
 80016a2:	009b      	lsls	r3, r3, #2
 80016a4:	4413      	add	r3, r2
 80016a6:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	4a10      	ldr	r2, [pc, #64]	@ (80016ec <LL_ADC_SetOffset+0x60>)
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d10b      	bne.n	80016c8 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	4313      	orrs	r3, r2
 80016be:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80016c6:	e00b      	b.n	80016e0 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	430b      	orrs	r3, r1
 80016da:	431a      	orrs	r2, r3
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	601a      	str	r2, [r3, #0]
}
 80016e0:	bf00      	nop
 80016e2:	371c      	adds	r7, #28
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr
 80016ec:	58026000 	.word	0x58026000

080016f0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b085      	sub	sp, #20
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
 80016f8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	3360      	adds	r3, #96	@ 0x60
 80016fe:	461a      	mov	r2, r3
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	009b      	lsls	r3, r3, #2
 8001704:	4413      	add	r3, r2
 8001706:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001710:	4618      	mov	r0, r3
 8001712:	3714      	adds	r7, #20
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr

0800171c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 800171c:	b480      	push	{r7}
 800171e:	b085      	sub	sp, #20
 8001720:	af00      	add	r7, sp, #0
 8001722:	60f8      	str	r0, [r7, #12]
 8001724:	60b9      	str	r1, [r7, #8]
 8001726:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	691b      	ldr	r3, [r3, #16]
 800172c:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8001730:	68bb      	ldr	r3, [r7, #8]
 8001732:	f003 031f 	and.w	r3, r3, #31
 8001736:	6879      	ldr	r1, [r7, #4]
 8001738:	fa01 f303 	lsl.w	r3, r1, r3
 800173c:	431a      	orrs	r2, r3
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	611a      	str	r2, [r3, #16]
}
 8001742:	bf00      	nop
 8001744:	3714      	adds	r7, #20
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
	...

08001750 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001750:	b480      	push	{r7}
 8001752:	b087      	sub	sp, #28
 8001754:	af00      	add	r7, sp, #0
 8001756:	60f8      	str	r0, [r7, #12]
 8001758:	60b9      	str	r1, [r7, #8]
 800175a:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	4a0c      	ldr	r2, [pc, #48]	@ (8001790 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8001760:	4293      	cmp	r3, r2
 8001762:	d00e      	beq.n	8001782 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	3360      	adds	r3, #96	@ 0x60
 8001768:	461a      	mov	r2, r3
 800176a:	68bb      	ldr	r3, [r7, #8]
 800176c:	009b      	lsls	r3, r3, #2
 800176e:	4413      	add	r3, r2
 8001770:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	431a      	orrs	r2, r3
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	601a      	str	r2, [r3, #0]
  }
}
 8001782:	bf00      	nop
 8001784:	371c      	adds	r7, #28
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	58026000 	.word	0x58026000

08001794 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001794:	b480      	push	{r7}
 8001796:	b087      	sub	sp, #28
 8001798:	af00      	add	r7, sp, #0
 800179a:	60f8      	str	r0, [r7, #12]
 800179c:	60b9      	str	r1, [r7, #8]
 800179e:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	4a0c      	ldr	r2, [pc, #48]	@ (80017d4 <LL_ADC_SetOffsetSaturation+0x40>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d10e      	bne.n	80017c6 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	3360      	adds	r3, #96	@ 0x60
 80017ac:	461a      	mov	r2, r3
 80017ae:	68bb      	ldr	r3, [r7, #8]
 80017b0:	009b      	lsls	r3, r3, #2
 80017b2:	4413      	add	r3, r2
 80017b4:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	431a      	orrs	r2, r3
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 80017c6:	bf00      	nop
 80017c8:	371c      	adds	r7, #28
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
 80017d4:	58026000 	.word	0x58026000

080017d8 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80017d8:	b480      	push	{r7}
 80017da:	b087      	sub	sp, #28
 80017dc:	af00      	add	r7, sp, #0
 80017de:	60f8      	str	r0, [r7, #12]
 80017e0:	60b9      	str	r1, [r7, #8]
 80017e2:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	4a0c      	ldr	r2, [pc, #48]	@ (8001818 <LL_ADC_SetOffsetSign+0x40>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d10e      	bne.n	800180a <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	3360      	adds	r3, #96	@ 0x60
 80017f0:	461a      	mov	r2, r3
 80017f2:	68bb      	ldr	r3, [r7, #8]
 80017f4:	009b      	lsls	r3, r3, #2
 80017f6:	4413      	add	r3, r2
 80017f8:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	431a      	orrs	r2, r3
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 800180a:	bf00      	nop
 800180c:	371c      	adds	r7, #28
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop
 8001818:	58026000 	.word	0x58026000

0800181c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800181c:	b480      	push	{r7}
 800181e:	b087      	sub	sp, #28
 8001820:	af00      	add	r7, sp, #0
 8001822:	60f8      	str	r0, [r7, #12]
 8001824:	60b9      	str	r1, [r7, #8]
 8001826:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	3360      	adds	r3, #96	@ 0x60
 800182c:	461a      	mov	r2, r3
 800182e:	68bb      	ldr	r3, [r7, #8]
 8001830:	009b      	lsls	r3, r3, #2
 8001832:	4413      	add	r3, r2
 8001834:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	4a0c      	ldr	r2, [pc, #48]	@ (800186c <LL_ADC_SetOffsetState+0x50>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d108      	bne.n	8001850 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	431a      	orrs	r2, r3
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 800184e:	e007      	b.n	8001860 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	431a      	orrs	r2, r3
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	601a      	str	r2, [r3, #0]
}
 8001860:	bf00      	nop
 8001862:	371c      	adds	r7, #28
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr
 800186c:	58026000 	.word	0x58026000

08001870 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001870:	b480      	push	{r7}
 8001872:	b083      	sub	sp, #12
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	68db      	ldr	r3, [r3, #12]
 800187c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001880:	2b00      	cmp	r3, #0
 8001882:	d101      	bne.n	8001888 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001884:	2301      	movs	r3, #1
 8001886:	e000      	b.n	800188a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001888:	2300      	movs	r3, #0
}
 800188a:	4618      	mov	r0, r3
 800188c:	370c      	adds	r7, #12
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr

08001896 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001896:	b480      	push	{r7}
 8001898:	b087      	sub	sp, #28
 800189a:	af00      	add	r7, sp, #0
 800189c:	60f8      	str	r0, [r7, #12]
 800189e:	60b9      	str	r1, [r7, #8]
 80018a0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	3330      	adds	r3, #48	@ 0x30
 80018a6:	461a      	mov	r2, r3
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	0a1b      	lsrs	r3, r3, #8
 80018ac:	009b      	lsls	r3, r3, #2
 80018ae:	f003 030c 	and.w	r3, r3, #12
 80018b2:	4413      	add	r3, r2
 80018b4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	68bb      	ldr	r3, [r7, #8]
 80018bc:	f003 031f 	and.w	r3, r3, #31
 80018c0:	211f      	movs	r1, #31
 80018c2:	fa01 f303 	lsl.w	r3, r1, r3
 80018c6:	43db      	mvns	r3, r3
 80018c8:	401a      	ands	r2, r3
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	0e9b      	lsrs	r3, r3, #26
 80018ce:	f003 011f 	and.w	r1, r3, #31
 80018d2:	68bb      	ldr	r3, [r7, #8]
 80018d4:	f003 031f 	and.w	r3, r3, #31
 80018d8:	fa01 f303 	lsl.w	r3, r1, r3
 80018dc:	431a      	orrs	r2, r3
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80018e2:	bf00      	nop
 80018e4:	371c      	adds	r7, #28
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr

080018ee <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80018ee:	b480      	push	{r7}
 80018f0:	b087      	sub	sp, #28
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	60f8      	str	r0, [r7, #12]
 80018f6:	60b9      	str	r1, [r7, #8]
 80018f8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	3314      	adds	r3, #20
 80018fe:	461a      	mov	r2, r3
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	0e5b      	lsrs	r3, r3, #25
 8001904:	009b      	lsls	r3, r3, #2
 8001906:	f003 0304 	and.w	r3, r3, #4
 800190a:	4413      	add	r3, r2
 800190c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	68bb      	ldr	r3, [r7, #8]
 8001914:	0d1b      	lsrs	r3, r3, #20
 8001916:	f003 031f 	and.w	r3, r3, #31
 800191a:	2107      	movs	r1, #7
 800191c:	fa01 f303 	lsl.w	r3, r1, r3
 8001920:	43db      	mvns	r3, r3
 8001922:	401a      	ands	r2, r3
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	0d1b      	lsrs	r3, r3, #20
 8001928:	f003 031f 	and.w	r3, r3, #31
 800192c:	6879      	ldr	r1, [r7, #4]
 800192e:	fa01 f303 	lsl.w	r3, r1, r3
 8001932:	431a      	orrs	r2, r3
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001938:	bf00      	nop
 800193a:	371c      	adds	r7, #28
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr

08001944 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001944:	b480      	push	{r7}
 8001946:	b085      	sub	sp, #20
 8001948:	af00      	add	r7, sp, #0
 800194a:	60f8      	str	r0, [r7, #12]
 800194c:	60b9      	str	r1, [r7, #8]
 800194e:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	4a1a      	ldr	r2, [pc, #104]	@ (80019bc <LL_ADC_SetChannelSingleDiff+0x78>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d115      	bne.n	8001984 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001964:	43db      	mvns	r3, r3
 8001966:	401a      	ands	r2, r3
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	f003 0318 	and.w	r3, r3, #24
 800196e:	4914      	ldr	r1, [pc, #80]	@ (80019c0 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8001970:	40d9      	lsrs	r1, r3
 8001972:	68bb      	ldr	r3, [r7, #8]
 8001974:	400b      	ands	r3, r1
 8001976:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800197a:	431a      	orrs	r2, r3
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8001982:	e014      	b.n	80019ae <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 800198a:	68bb      	ldr	r3, [r7, #8]
 800198c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001990:	43db      	mvns	r3, r3
 8001992:	401a      	ands	r2, r3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	f003 0318 	and.w	r3, r3, #24
 800199a:	4909      	ldr	r1, [pc, #36]	@ (80019c0 <LL_ADC_SetChannelSingleDiff+0x7c>)
 800199c:	40d9      	lsrs	r1, r3
 800199e:	68bb      	ldr	r3, [r7, #8]
 80019a0:	400b      	ands	r3, r1
 80019a2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80019a6:	431a      	orrs	r2, r3
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 80019ae:	bf00      	nop
 80019b0:	3714      	adds	r7, #20
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop
 80019bc:	58026000 	.word	0x58026000
 80019c0:	000fffff 	.word	0x000fffff

080019c4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b083      	sub	sp, #12
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	f003 031f 	and.w	r3, r3, #31
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	370c      	adds	r7, #12
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr

080019e0 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b083      	sub	sp, #12
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	370c      	adds	r7, #12
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr

080019fc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b083      	sub	sp, #12
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	689a      	ldr	r2, [r3, #8]
 8001a08:	4b04      	ldr	r3, [pc, #16]	@ (8001a1c <LL_ADC_DisableDeepPowerDown+0x20>)
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	687a      	ldr	r2, [r7, #4]
 8001a0e:	6093      	str	r3, [r2, #8]
}
 8001a10:	bf00      	nop
 8001a12:	370c      	adds	r7, #12
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr
 8001a1c:	5fffffc0 	.word	0x5fffffc0

08001a20 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b083      	sub	sp, #12
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001a30:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001a34:	d101      	bne.n	8001a3a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001a36:	2301      	movs	r3, #1
 8001a38:	e000      	b.n	8001a3c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001a3a:	2300      	movs	r3, #0
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	370c      	adds	r7, #12
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr

08001a48 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	689a      	ldr	r2, [r3, #8]
 8001a54:	4b05      	ldr	r3, [pc, #20]	@ (8001a6c <LL_ADC_EnableInternalRegulator+0x24>)
 8001a56:	4013      	ands	r3, r2
 8001a58:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001a60:	bf00      	nop
 8001a62:	370c      	adds	r7, #12
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr
 8001a6c:	6fffffc0 	.word	0x6fffffc0

08001a70 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a80:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001a84:	d101      	bne.n	8001a8a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001a86:	2301      	movs	r3, #1
 8001a88:	e000      	b.n	8001a8c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001a8a:	2300      	movs	r3, #0
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	370c      	adds	r7, #12
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr

08001a98 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	689a      	ldr	r2, [r3, #8]
 8001aa4:	4b05      	ldr	r3, [pc, #20]	@ (8001abc <LL_ADC_Enable+0x24>)
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	f043 0201 	orr.w	r2, r3, #1
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001ab0:	bf00      	nop
 8001ab2:	370c      	adds	r7, #12
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr
 8001abc:	7fffffc0 	.word	0x7fffffc0

08001ac0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	f003 0301 	and.w	r3, r3, #1
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d101      	bne.n	8001ad8 <LL_ADC_IsEnabled+0x18>
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e000      	b.n	8001ada <LL_ADC_IsEnabled+0x1a>
 8001ad8:	2300      	movs	r3, #0
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	370c      	adds	r7, #12
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr
	...

08001ae8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b083      	sub	sp, #12
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	689a      	ldr	r2, [r3, #8]
 8001af4:	4b05      	ldr	r3, [pc, #20]	@ (8001b0c <LL_ADC_REG_StartConversion+0x24>)
 8001af6:	4013      	ands	r3, r2
 8001af8:	f043 0204 	orr.w	r2, r3, #4
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001b00:	bf00      	nop
 8001b02:	370c      	adds	r7, #12
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr
 8001b0c:	7fffffc0 	.word	0x7fffffc0

08001b10 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b083      	sub	sp, #12
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	f003 0304 	and.w	r3, r3, #4
 8001b20:	2b04      	cmp	r3, #4
 8001b22:	d101      	bne.n	8001b28 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001b24:	2301      	movs	r3, #1
 8001b26:	e000      	b.n	8001b2a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001b28:	2300      	movs	r3, #0
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	370c      	adds	r7, #12
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr

08001b36 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001b36:	b480      	push	{r7}
 8001b38:	b083      	sub	sp, #12
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	f003 0308 	and.w	r3, r3, #8
 8001b46:	2b08      	cmp	r3, #8
 8001b48:	d101      	bne.n	8001b4e <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e000      	b.n	8001b50 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001b4e:	2300      	movs	r3, #0
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	370c      	adds	r7, #12
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr

08001b5c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001b5c:	b590      	push	{r4, r7, lr}
 8001b5e:	b089      	sub	sp, #36	@ 0x24
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b64:	2300      	movs	r3, #0
 8001b66:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d101      	bne.n	8001b76 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e1ee      	b.n	8001f54 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	691b      	ldr	r3, [r3, #16]
 8001b7a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d109      	bne.n	8001b98 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b84:	6878      	ldr	r0, [r7, #4]
 8001b86:	f7fe ffef 	bl	8000b68 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2200      	movs	r2, #0
 8001b94:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f7ff ff3f 	bl	8001a20 <LL_ADC_IsDeepPowerDownEnabled>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d004      	beq.n	8001bb2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4618      	mov	r0, r3
 8001bae:	f7ff ff25 	bl	80019fc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f7ff ff5a 	bl	8001a70 <LL_ADC_IsInternalRegulatorEnabled>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d114      	bne.n	8001bec <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f7ff ff3e 	bl	8001a48 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001bcc:	4b8e      	ldr	r3, [pc, #568]	@ (8001e08 <HAL_ADC_Init+0x2ac>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	099b      	lsrs	r3, r3, #6
 8001bd2:	4a8e      	ldr	r2, [pc, #568]	@ (8001e0c <HAL_ADC_Init+0x2b0>)
 8001bd4:	fba2 2303 	umull	r2, r3, r2, r3
 8001bd8:	099b      	lsrs	r3, r3, #6
 8001bda:	3301      	adds	r3, #1
 8001bdc:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001bde:	e002      	b.n	8001be6 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	3b01      	subs	r3, #1
 8001be4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d1f9      	bne.n	8001be0 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f7ff ff3d 	bl	8001a70 <LL_ADC_IsInternalRegulatorEnabled>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d10d      	bne.n	8001c18 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c00:	f043 0210 	orr.w	r2, r3, #16
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001c0c:	f043 0201 	orr.w	r2, r3, #1
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 8001c14:	2301      	movs	r3, #1
 8001c16:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f7ff ff77 	bl	8001b10 <LL_ADC_REG_IsConversionOngoing>
 8001c22:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c28:	f003 0310 	and.w	r3, r3, #16
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	f040 8188 	bne.w	8001f42 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	f040 8184 	bne.w	8001f42 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c3e:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001c42:	f043 0202 	orr.w	r2, r3, #2
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f7ff ff36 	bl	8001ac0 <LL_ADC_IsEnabled>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d136      	bne.n	8001cc8 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a6c      	ldr	r2, [pc, #432]	@ (8001e10 <HAL_ADC_Init+0x2b4>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d004      	beq.n	8001c6e <HAL_ADC_Init+0x112>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a6a      	ldr	r2, [pc, #424]	@ (8001e14 <HAL_ADC_Init+0x2b8>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d10e      	bne.n	8001c8c <HAL_ADC_Init+0x130>
 8001c6e:	4868      	ldr	r0, [pc, #416]	@ (8001e10 <HAL_ADC_Init+0x2b4>)
 8001c70:	f7ff ff26 	bl	8001ac0 <LL_ADC_IsEnabled>
 8001c74:	4604      	mov	r4, r0
 8001c76:	4867      	ldr	r0, [pc, #412]	@ (8001e14 <HAL_ADC_Init+0x2b8>)
 8001c78:	f7ff ff22 	bl	8001ac0 <LL_ADC_IsEnabled>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	4323      	orrs	r3, r4
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	bf0c      	ite	eq
 8001c84:	2301      	moveq	r3, #1
 8001c86:	2300      	movne	r3, #0
 8001c88:	b2db      	uxtb	r3, r3
 8001c8a:	e008      	b.n	8001c9e <HAL_ADC_Init+0x142>
 8001c8c:	4862      	ldr	r0, [pc, #392]	@ (8001e18 <HAL_ADC_Init+0x2bc>)
 8001c8e:	f7ff ff17 	bl	8001ac0 <LL_ADC_IsEnabled>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	bf0c      	ite	eq
 8001c98:	2301      	moveq	r3, #1
 8001c9a:	2300      	movne	r3, #0
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d012      	beq.n	8001cc8 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a5a      	ldr	r2, [pc, #360]	@ (8001e10 <HAL_ADC_Init+0x2b4>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d004      	beq.n	8001cb6 <HAL_ADC_Init+0x15a>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a58      	ldr	r2, [pc, #352]	@ (8001e14 <HAL_ADC_Init+0x2b8>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d101      	bne.n	8001cba <HAL_ADC_Init+0x15e>
 8001cb6:	4a59      	ldr	r2, [pc, #356]	@ (8001e1c <HAL_ADC_Init+0x2c0>)
 8001cb8:	e000      	b.n	8001cbc <HAL_ADC_Init+0x160>
 8001cba:	4a59      	ldr	r2, [pc, #356]	@ (8001e20 <HAL_ADC_Init+0x2c4>)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	4610      	mov	r0, r2
 8001cc4:	f7ff fc74 	bl	80015b0 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a52      	ldr	r2, [pc, #328]	@ (8001e18 <HAL_ADC_Init+0x2bc>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d129      	bne.n	8001d26 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	7e5b      	ldrb	r3, [r3, #25]
 8001cd6:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8001cdc:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8001ce2:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	2b08      	cmp	r3, #8
 8001cea:	d013      	beq.n	8001d14 <HAL_ADC_Init+0x1b8>
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	2b0c      	cmp	r3, #12
 8001cf2:	d00d      	beq.n	8001d10 <HAL_ADC_Init+0x1b4>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	2b1c      	cmp	r3, #28
 8001cfa:	d007      	beq.n	8001d0c <HAL_ADC_Init+0x1b0>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	2b18      	cmp	r3, #24
 8001d02:	d101      	bne.n	8001d08 <HAL_ADC_Init+0x1ac>
 8001d04:	2318      	movs	r3, #24
 8001d06:	e006      	b.n	8001d16 <HAL_ADC_Init+0x1ba>
 8001d08:	2300      	movs	r3, #0
 8001d0a:	e004      	b.n	8001d16 <HAL_ADC_Init+0x1ba>
 8001d0c:	2310      	movs	r3, #16
 8001d0e:	e002      	b.n	8001d16 <HAL_ADC_Init+0x1ba>
 8001d10:	2308      	movs	r3, #8
 8001d12:	e000      	b.n	8001d16 <HAL_ADC_Init+0x1ba>
 8001d14:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8001d16:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d1e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8001d20:	4313      	orrs	r3, r2
 8001d22:	61bb      	str	r3, [r7, #24]
 8001d24:	e00e      	b.n	8001d44 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	7e5b      	ldrb	r3, [r3, #25]
 8001d2a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001d30:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001d36:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d3e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001d40:	4313      	orrs	r3, r2
 8001d42:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d106      	bne.n	8001d5c <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d52:	3b01      	subs	r3, #1
 8001d54:	045b      	lsls	r3, r3, #17
 8001d56:	69ba      	ldr	r2, [r7, #24]
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d009      	beq.n	8001d78 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d68:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d70:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001d72:	69ba      	ldr	r2, [r7, #24]
 8001d74:	4313      	orrs	r3, r2
 8001d76:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a26      	ldr	r2, [pc, #152]	@ (8001e18 <HAL_ADC_Init+0x2bc>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d115      	bne.n	8001dae <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	68da      	ldr	r2, [r3, #12]
 8001d88:	4b26      	ldr	r3, [pc, #152]	@ (8001e24 <HAL_ADC_Init+0x2c8>)
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	687a      	ldr	r2, [r7, #4]
 8001d8e:	6812      	ldr	r2, [r2, #0]
 8001d90:	69b9      	ldr	r1, [r7, #24]
 8001d92:	430b      	orrs	r3, r1
 8001d94:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	691b      	ldr	r3, [r3, #16]
 8001d9c:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	430a      	orrs	r2, r1
 8001daa:	611a      	str	r2, [r3, #16]
 8001dac:	e009      	b.n	8001dc2 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	68da      	ldr	r2, [r3, #12]
 8001db4:	4b1c      	ldr	r3, [pc, #112]	@ (8001e28 <HAL_ADC_Init+0x2cc>)
 8001db6:	4013      	ands	r3, r2
 8001db8:	687a      	ldr	r2, [r7, #4]
 8001dba:	6812      	ldr	r2, [r2, #0]
 8001dbc:	69b9      	ldr	r1, [r7, #24]
 8001dbe:	430b      	orrs	r3, r1
 8001dc0:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f7ff fea2 	bl	8001b10 <LL_ADC_REG_IsConversionOngoing>
 8001dcc:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f7ff feaf 	bl	8001b36 <LL_ADC_INJ_IsConversionOngoing>
 8001dd8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	f040 808e 	bne.w	8001efe <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	f040 808a 	bne.w	8001efe <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a0a      	ldr	r2, [pc, #40]	@ (8001e18 <HAL_ADC_Init+0x2bc>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d11b      	bne.n	8001e2c <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	7e1b      	ldrb	r3, [r3, #24]
 8001df8:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001e00:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8001e02:	4313      	orrs	r3, r2
 8001e04:	61bb      	str	r3, [r7, #24]
 8001e06:	e018      	b.n	8001e3a <HAL_ADC_Init+0x2de>
 8001e08:	24000000 	.word	0x24000000
 8001e0c:	053e2d63 	.word	0x053e2d63
 8001e10:	40022000 	.word	0x40022000
 8001e14:	40022100 	.word	0x40022100
 8001e18:	58026000 	.word	0x58026000
 8001e1c:	40022300 	.word	0x40022300
 8001e20:	58026300 	.word	0x58026300
 8001e24:	fff04007 	.word	0xfff04007
 8001e28:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	7e1b      	ldrb	r3, [r3, #24]
 8001e30:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 8001e36:	4313      	orrs	r3, r2
 8001e38:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	68da      	ldr	r2, [r3, #12]
 8001e40:	4b46      	ldr	r3, [pc, #280]	@ (8001f5c <HAL_ADC_Init+0x400>)
 8001e42:	4013      	ands	r3, r2
 8001e44:	687a      	ldr	r2, [r7, #4]
 8001e46:	6812      	ldr	r2, [r2, #0]
 8001e48:	69b9      	ldr	r1, [r7, #24]
 8001e4a:	430b      	orrs	r3, r1
 8001e4c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d137      	bne.n	8001ec8 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e5c:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a3f      	ldr	r2, [pc, #252]	@ (8001f60 <HAL_ADC_Init+0x404>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d116      	bne.n	8001e96 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	691a      	ldr	r2, [r3, #16]
 8001e6e:	4b3d      	ldr	r3, [pc, #244]	@ (8001f64 <HAL_ADC_Init+0x408>)
 8001e70:	4013      	ands	r3, r2
 8001e72:	687a      	ldr	r2, [r7, #4]
 8001e74:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 8001e76:	687a      	ldr	r2, [r7, #4]
 8001e78:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001e7a:	4311      	orrs	r1, r2
 8001e7c:	687a      	ldr	r2, [r7, #4]
 8001e7e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001e80:	4311      	orrs	r1, r2
 8001e82:	687a      	ldr	r2, [r7, #4]
 8001e84:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8001e86:	430a      	orrs	r2, r1
 8001e88:	431a      	orrs	r2, r3
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f042 0201 	orr.w	r2, r2, #1
 8001e92:	611a      	str	r2, [r3, #16]
 8001e94:	e020      	b.n	8001ed8 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	691a      	ldr	r2, [r3, #16]
 8001e9c:	4b32      	ldr	r3, [pc, #200]	@ (8001f68 <HAL_ADC_Init+0x40c>)
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	687a      	ldr	r2, [r7, #4]
 8001ea2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001ea4:	3a01      	subs	r2, #1
 8001ea6:	0411      	lsls	r1, r2, #16
 8001ea8:	687a      	ldr	r2, [r7, #4]
 8001eaa:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001eac:	4311      	orrs	r1, r2
 8001eae:	687a      	ldr	r2, [r7, #4]
 8001eb0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001eb2:	4311      	orrs	r1, r2
 8001eb4:	687a      	ldr	r2, [r7, #4]
 8001eb6:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8001eb8:	430a      	orrs	r2, r1
 8001eba:	431a      	orrs	r2, r3
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f042 0201 	orr.w	r2, r2, #1
 8001ec4:	611a      	str	r2, [r3, #16]
 8001ec6:	e007      	b.n	8001ed8 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	691a      	ldr	r2, [r3, #16]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f022 0201 	bic.w	r2, r2, #1
 8001ed6:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	691b      	ldr	r3, [r3, #16]
 8001ede:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	430a      	orrs	r2, r1
 8001eec:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a1b      	ldr	r2, [pc, #108]	@ (8001f60 <HAL_ADC_Init+0x404>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d002      	beq.n	8001efe <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	f000 ff61 	bl	8002dc0 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	691b      	ldr	r3, [r3, #16]
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	d10c      	bne.n	8001f20 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f0c:	f023 010f 	bic.w	r1, r3, #15
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	69db      	ldr	r3, [r3, #28]
 8001f14:	1e5a      	subs	r2, r3, #1
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	430a      	orrs	r2, r1
 8001f1c:	631a      	str	r2, [r3, #48]	@ 0x30
 8001f1e:	e007      	b.n	8001f30 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f022 020f 	bic.w	r2, r2, #15
 8001f2e:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f34:	f023 0303 	bic.w	r3, r3, #3
 8001f38:	f043 0201 	orr.w	r2, r3, #1
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	661a      	str	r2, [r3, #96]	@ 0x60
 8001f40:	e007      	b.n	8001f52 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f46:	f043 0210 	orr.w	r2, r3, #16
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001f52:	7ffb      	ldrb	r3, [r7, #31]
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3724      	adds	r7, #36	@ 0x24
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd90      	pop	{r4, r7, pc}
 8001f5c:	ffffbffc 	.word	0xffffbffc
 8001f60:	58026000 	.word	0x58026000
 8001f64:	fc00f81f 	.word	0xfc00f81f
 8001f68:	fc00f81e 	.word	0xfc00f81e

08001f6c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b086      	sub	sp, #24
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a5c      	ldr	r2, [pc, #368]	@ (80020ec <HAL_ADC_Start+0x180>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d004      	beq.n	8001f88 <HAL_ADC_Start+0x1c>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a5b      	ldr	r2, [pc, #364]	@ (80020f0 <HAL_ADC_Start+0x184>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d101      	bne.n	8001f8c <HAL_ADC_Start+0x20>
 8001f88:	4b5a      	ldr	r3, [pc, #360]	@ (80020f4 <HAL_ADC_Start+0x188>)
 8001f8a:	e000      	b.n	8001f8e <HAL_ADC_Start+0x22>
 8001f8c:	4b5a      	ldr	r3, [pc, #360]	@ (80020f8 <HAL_ADC_Start+0x18c>)
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f7ff fd18 	bl	80019c4 <LL_ADC_GetMultimode>
 8001f94:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f7ff fdb8 	bl	8001b10 <LL_ADC_REG_IsConversionOngoing>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	f040 809a 	bne.w	80020dc <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d101      	bne.n	8001fb6 <HAL_ADC_Start+0x4a>
 8001fb2:	2302      	movs	r3, #2
 8001fb4:	e095      	b.n	80020e2 <HAL_ADC_Start+0x176>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2201      	movs	r2, #1
 8001fba:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f000 fe74 	bl	8002cac <ADC_Enable>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001fc8:	7dfb      	ldrb	r3, [r7, #23]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	f040 8081 	bne.w	80020d2 <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001fd4:	4b49      	ldr	r3, [pc, #292]	@ (80020fc <HAL_ADC_Start+0x190>)
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	661a      	str	r2, [r3, #96]	@ 0x60
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a42      	ldr	r2, [pc, #264]	@ (80020f0 <HAL_ADC_Start+0x184>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d002      	beq.n	8001ff0 <HAL_ADC_Start+0x84>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	e000      	b.n	8001ff2 <HAL_ADC_Start+0x86>
 8001ff0:	4b3e      	ldr	r3, [pc, #248]	@ (80020ec <HAL_ADC_Start+0x180>)
 8001ff2:	687a      	ldr	r2, [r7, #4]
 8001ff4:	6812      	ldr	r2, [r2, #0]
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d002      	beq.n	8002000 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d105      	bne.n	800200c <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002004:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002010:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002014:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002018:	d106      	bne.n	8002028 <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800201e:	f023 0206 	bic.w	r2, r3, #6
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	665a      	str	r2, [r3, #100]	@ 0x64
 8002026:	e002      	b.n	800202e <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2200      	movs	r2, #0
 800202c:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	221c      	movs	r2, #28
 8002034:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2200      	movs	r2, #0
 800203a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a2b      	ldr	r2, [pc, #172]	@ (80020f0 <HAL_ADC_Start+0x184>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d002      	beq.n	800204e <HAL_ADC_Start+0xe2>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	e000      	b.n	8002050 <HAL_ADC_Start+0xe4>
 800204e:	4b27      	ldr	r3, [pc, #156]	@ (80020ec <HAL_ADC_Start+0x180>)
 8002050:	687a      	ldr	r2, [r7, #4]
 8002052:	6812      	ldr	r2, [r2, #0]
 8002054:	4293      	cmp	r3, r2
 8002056:	d008      	beq.n	800206a <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d005      	beq.n	800206a <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	2b05      	cmp	r3, #5
 8002062:	d002      	beq.n	800206a <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	2b09      	cmp	r3, #9
 8002068:	d114      	bne.n	8002094 <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002074:	2b00      	cmp	r3, #0
 8002076:	d007      	beq.n	8002088 <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800207c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002080:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4618      	mov	r0, r3
 800208e:	f7ff fd2b 	bl	8001ae8 <LL_ADC_REG_StartConversion>
 8002092:	e025      	b.n	80020e0 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002098:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	661a      	str	r2, [r3, #96]	@ 0x60
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a12      	ldr	r2, [pc, #72]	@ (80020f0 <HAL_ADC_Start+0x184>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d002      	beq.n	80020b0 <HAL_ADC_Start+0x144>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	e000      	b.n	80020b2 <HAL_ADC_Start+0x146>
 80020b0:	4b0e      	ldr	r3, [pc, #56]	@ (80020ec <HAL_ADC_Start+0x180>)
 80020b2:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d00f      	beq.n	80020e0 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020c4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80020c8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	661a      	str	r2, [r3, #96]	@ 0x60
 80020d0:	e006      	b.n	80020e0 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2200      	movs	r2, #0
 80020d6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 80020da:	e001      	b.n	80020e0 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80020dc:	2302      	movs	r3, #2
 80020de:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80020e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	3718      	adds	r7, #24
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	40022000 	.word	0x40022000
 80020f0:	40022100 	.word	0x40022100
 80020f4:	40022300 	.word	0x40022300
 80020f8:	58026300 	.word	0x58026300
 80020fc:	fffff0fe 	.word	0xfffff0fe

08002100 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b088      	sub	sp, #32
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
 8002108:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a72      	ldr	r2, [pc, #456]	@ (80022d8 <HAL_ADC_PollForConversion+0x1d8>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d004      	beq.n	800211e <HAL_ADC_PollForConversion+0x1e>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a70      	ldr	r2, [pc, #448]	@ (80022dc <HAL_ADC_PollForConversion+0x1dc>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d101      	bne.n	8002122 <HAL_ADC_PollForConversion+0x22>
 800211e:	4b70      	ldr	r3, [pc, #448]	@ (80022e0 <HAL_ADC_PollForConversion+0x1e0>)
 8002120:	e000      	b.n	8002124 <HAL_ADC_PollForConversion+0x24>
 8002122:	4b70      	ldr	r3, [pc, #448]	@ (80022e4 <HAL_ADC_PollForConversion+0x1e4>)
 8002124:	4618      	mov	r0, r3
 8002126:	f7ff fc4d 	bl	80019c4 <LL_ADC_GetMultimode>
 800212a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	695b      	ldr	r3, [r3, #20]
 8002130:	2b08      	cmp	r3, #8
 8002132:	d102      	bne.n	800213a <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002134:	2308      	movs	r3, #8
 8002136:	61fb      	str	r3, [r7, #28]
 8002138:	e037      	b.n	80021aa <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d005      	beq.n	800214c <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	2b05      	cmp	r3, #5
 8002144:	d002      	beq.n	800214c <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	2b09      	cmp	r3, #9
 800214a:	d111      	bne.n	8002170 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	68db      	ldr	r3, [r3, #12]
 8002152:	f003 0301 	and.w	r3, r3, #1
 8002156:	2b00      	cmp	r3, #0
 8002158:	d007      	beq.n	800216a <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800215e:	f043 0220 	orr.w	r2, r3, #32
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	661a      	str	r2, [r3, #96]	@ 0x60
        return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e0b1      	b.n	80022ce <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800216a:	2304      	movs	r3, #4
 800216c:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 800216e:	e01c      	b.n	80021aa <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a58      	ldr	r2, [pc, #352]	@ (80022d8 <HAL_ADC_PollForConversion+0x1d8>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d004      	beq.n	8002184 <HAL_ADC_PollForConversion+0x84>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a57      	ldr	r2, [pc, #348]	@ (80022dc <HAL_ADC_PollForConversion+0x1dc>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d101      	bne.n	8002188 <HAL_ADC_PollForConversion+0x88>
 8002184:	4b56      	ldr	r3, [pc, #344]	@ (80022e0 <HAL_ADC_PollForConversion+0x1e0>)
 8002186:	e000      	b.n	800218a <HAL_ADC_PollForConversion+0x8a>
 8002188:	4b56      	ldr	r3, [pc, #344]	@ (80022e4 <HAL_ADC_PollForConversion+0x1e4>)
 800218a:	4618      	mov	r0, r3
 800218c:	f7ff fc28 	bl	80019e0 <LL_ADC_GetMultiDMATransfer>
 8002190:	4603      	mov	r3, r0
 8002192:	2b00      	cmp	r3, #0
 8002194:	d007      	beq.n	80021a6 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800219a:	f043 0220 	orr.w	r2, r3, #32
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	661a      	str	r2, [r3, #96]	@ 0x60
        return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e093      	b.n	80022ce <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80021a6:	2304      	movs	r3, #4
 80021a8:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80021aa:	f7ff f9d1 	bl	8001550 <HAL_GetTick>
 80021ae:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80021b0:	e021      	b.n	80021f6 <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021b8:	d01d      	beq.n	80021f6 <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80021ba:	f7ff f9c9 	bl	8001550 <HAL_GetTick>
 80021be:	4602      	mov	r2, r0
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	1ad3      	subs	r3, r2, r3
 80021c4:	683a      	ldr	r2, [r7, #0]
 80021c6:	429a      	cmp	r2, r3
 80021c8:	d302      	bcc.n	80021d0 <HAL_ADC_PollForConversion+0xd0>
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d112      	bne.n	80021f6 <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	4013      	ands	r3, r2
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d10b      	bne.n	80021f6 <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021e2:	f043 0204 	orr.w	r2, r3, #4
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2200      	movs	r2, #0
 80021ee:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

          return HAL_TIMEOUT;
 80021f2:	2303      	movs	r3, #3
 80021f4:	e06b      	b.n	80022ce <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	69fb      	ldr	r3, [r7, #28]
 80021fe:	4013      	ands	r3, r2
 8002200:	2b00      	cmp	r3, #0
 8002202:	d0d6      	beq.n	80021b2 <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002208:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4618      	mov	r0, r3
 8002216:	f7ff fb2b 	bl	8001870 <LL_ADC_REG_IsTriggerSourceSWStart>
 800221a:	4603      	mov	r3, r0
 800221c:	2b00      	cmp	r3, #0
 800221e:	d01c      	beq.n	800225a <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	7e5b      	ldrb	r3, [r3, #25]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d118      	bne.n	800225a <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 0308 	and.w	r3, r3, #8
 8002232:	2b08      	cmp	r3, #8
 8002234:	d111      	bne.n	800225a <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800223a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	661a      	str	r2, [r3, #96]	@ 0x60

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002246:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800224a:	2b00      	cmp	r3, #0
 800224c:	d105      	bne.n	800225a <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002252:	f043 0201 	orr.w	r2, r3, #1
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a1f      	ldr	r2, [pc, #124]	@ (80022dc <HAL_ADC_PollForConversion+0x1dc>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d002      	beq.n	800226a <HAL_ADC_PollForConversion+0x16a>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	e000      	b.n	800226c <HAL_ADC_PollForConversion+0x16c>
 800226a:	4b1b      	ldr	r3, [pc, #108]	@ (80022d8 <HAL_ADC_PollForConversion+0x1d8>)
 800226c:	687a      	ldr	r2, [r7, #4]
 800226e:	6812      	ldr	r2, [r2, #0]
 8002270:	4293      	cmp	r3, r2
 8002272:	d008      	beq.n	8002286 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d005      	beq.n	8002286 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	2b05      	cmp	r3, #5
 800227e:	d002      	beq.n	8002286 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	2b09      	cmp	r3, #9
 8002284:	d104      	bne.n	8002290 <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	61bb      	str	r3, [r7, #24]
 800228e:	e00c      	b.n	80022aa <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a11      	ldr	r2, [pc, #68]	@ (80022dc <HAL_ADC_PollForConversion+0x1dc>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d002      	beq.n	80022a0 <HAL_ADC_PollForConversion+0x1a0>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	e000      	b.n	80022a2 <HAL_ADC_PollForConversion+0x1a2>
 80022a0:	4b0d      	ldr	r3, [pc, #52]	@ (80022d8 <HAL_ADC_PollForConversion+0x1d8>)
 80022a2:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	2b08      	cmp	r3, #8
 80022ae:	d104      	bne.n	80022ba <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	2208      	movs	r2, #8
 80022b6:	601a      	str	r2, [r3, #0]
 80022b8:	e008      	b.n	80022cc <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80022ba:	69bb      	ldr	r3, [r7, #24]
 80022bc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d103      	bne.n	80022cc <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	220c      	movs	r2, #12
 80022ca:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80022cc:	2300      	movs	r3, #0
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3720      	adds	r7, #32
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	40022000 	.word	0x40022000
 80022dc:	40022100 	.word	0x40022100
 80022e0:	40022300 	.word	0x40022300
 80022e4:	58026300 	.word	0x58026300

080022e8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b083      	sub	sp, #12
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	370c      	adds	r7, #12
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr
	...

08002304 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002304:	b590      	push	{r4, r7, lr}
 8002306:	b0a5      	sub	sp, #148	@ 0x94
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
 800230c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800230e:	2300      	movs	r3, #0
 8002310:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002314:	2300      	movs	r3, #0
 8002316:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800231e:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	4aa4      	ldr	r2, [pc, #656]	@ (80025b8 <HAL_ADC_ConfigChannel+0x2b4>)
 8002326:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800232e:	2b01      	cmp	r3, #1
 8002330:	d102      	bne.n	8002338 <HAL_ADC_ConfigChannel+0x34>
 8002332:	2302      	movs	r3, #2
 8002334:	f000 bca2 	b.w	8002c7c <HAL_ADC_ConfigChannel+0x978>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2201      	movs	r2, #1
 800233c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4618      	mov	r0, r3
 8002346:	f7ff fbe3 	bl	8001b10 <LL_ADC_REG_IsConversionOngoing>
 800234a:	4603      	mov	r3, r0
 800234c:	2b00      	cmp	r3, #0
 800234e:	f040 8486 	bne.w	8002c5e <HAL_ADC_ConfigChannel+0x95a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	2b00      	cmp	r3, #0
 8002358:	db31      	blt.n	80023be <HAL_ADC_ConfigChannel+0xba>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a97      	ldr	r2, [pc, #604]	@ (80025bc <HAL_ADC_ConfigChannel+0x2b8>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d02c      	beq.n	80023be <HAL_ADC_ConfigChannel+0xba>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800236c:	2b00      	cmp	r3, #0
 800236e:	d108      	bne.n	8002382 <HAL_ADC_ConfigChannel+0x7e>
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	0e9b      	lsrs	r3, r3, #26
 8002376:	f003 031f 	and.w	r3, r3, #31
 800237a:	2201      	movs	r2, #1
 800237c:	fa02 f303 	lsl.w	r3, r2, r3
 8002380:	e016      	b.n	80023b0 <HAL_ADC_ConfigChannel+0xac>
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002388:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800238a:	fa93 f3a3 	rbit	r3, r3
 800238e:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002390:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002392:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8002394:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002396:	2b00      	cmp	r3, #0
 8002398:	d101      	bne.n	800239e <HAL_ADC_ConfigChannel+0x9a>
    return 32U;
 800239a:	2320      	movs	r3, #32
 800239c:	e003      	b.n	80023a6 <HAL_ADC_ConfigChannel+0xa2>
  return __builtin_clz(value);
 800239e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80023a0:	fab3 f383 	clz	r3, r3
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	f003 031f 	and.w	r3, r3, #31
 80023aa:	2201      	movs	r2, #1
 80023ac:	fa02 f303 	lsl.w	r3, r2, r3
 80023b0:	687a      	ldr	r2, [r7, #4]
 80023b2:	6812      	ldr	r2, [r2, #0]
 80023b4:	69d1      	ldr	r1, [r2, #28]
 80023b6:	687a      	ldr	r2, [r7, #4]
 80023b8:	6812      	ldr	r2, [r2, #0]
 80023ba:	430b      	orrs	r3, r1
 80023bc:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6818      	ldr	r0, [r3, #0]
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	6859      	ldr	r1, [r3, #4]
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	461a      	mov	r2, r3
 80023cc:	f7ff fa63 	bl	8001896 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4618      	mov	r0, r3
 80023d6:	f7ff fb9b 	bl	8001b10 <LL_ADC_REG_IsConversionOngoing>
 80023da:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4618      	mov	r0, r3
 80023e4:	f7ff fba7 	bl	8001b36 <LL_ADC_INJ_IsConversionOngoing>
 80023e8:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80023ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	f040 824a 	bne.w	800288a <HAL_ADC_ConfigChannel+0x586>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80023f6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	f040 8245 	bne.w	800288a <HAL_ADC_ConfigChannel+0x586>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6818      	ldr	r0, [r3, #0]
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	6819      	ldr	r1, [r3, #0]
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	461a      	mov	r2, r3
 800240e:	f7ff fa6e 	bl	80018ee <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a69      	ldr	r2, [pc, #420]	@ (80025bc <HAL_ADC_ConfigChannel+0x2b8>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d10d      	bne.n	8002438 <HAL_ADC_ConfigChannel+0x134>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	695a      	ldr	r2, [r3, #20]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	68db      	ldr	r3, [r3, #12]
 8002426:	08db      	lsrs	r3, r3, #3
 8002428:	f003 0303 	and.w	r3, r3, #3
 800242c:	005b      	lsls	r3, r3, #1
 800242e:	fa02 f303 	lsl.w	r3, r2, r3
 8002432:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002436:	e032      	b.n	800249e <HAL_ADC_ConfigChannel+0x19a>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002438:	4b61      	ldr	r3, [pc, #388]	@ (80025c0 <HAL_ADC_ConfigChannel+0x2bc>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8002440:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002444:	d10b      	bne.n	800245e <HAL_ADC_ConfigChannel+0x15a>
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	695a      	ldr	r2, [r3, #20]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	089b      	lsrs	r3, r3, #2
 8002452:	f003 0307 	and.w	r3, r3, #7
 8002456:	005b      	lsls	r3, r3, #1
 8002458:	fa02 f303 	lsl.w	r3, r2, r3
 800245c:	e01d      	b.n	800249a <HAL_ADC_ConfigChannel+0x196>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	f003 0310 	and.w	r3, r3, #16
 8002468:	2b00      	cmp	r3, #0
 800246a:	d10b      	bne.n	8002484 <HAL_ADC_ConfigChannel+0x180>
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	695a      	ldr	r2, [r3, #20]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	68db      	ldr	r3, [r3, #12]
 8002476:	089b      	lsrs	r3, r3, #2
 8002478:	f003 0307 	and.w	r3, r3, #7
 800247c:	005b      	lsls	r3, r3, #1
 800247e:	fa02 f303 	lsl.w	r3, r2, r3
 8002482:	e00a      	b.n	800249a <HAL_ADC_ConfigChannel+0x196>
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	695a      	ldr	r2, [r3, #20]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	68db      	ldr	r3, [r3, #12]
 800248e:	089b      	lsrs	r3, r3, #2
 8002490:	f003 0304 	and.w	r3, r3, #4
 8002494:	005b      	lsls	r3, r3, #1
 8002496:	fa02 f303 	lsl.w	r3, r2, r3
 800249a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      }

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	691b      	ldr	r3, [r3, #16]
 80024a2:	2b04      	cmp	r3, #4
 80024a4:	d048      	beq.n	8002538 <HAL_ADC_ConfigChannel+0x234>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6818      	ldr	r0, [r3, #0]
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	6919      	ldr	r1, [r3, #16]
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80024b6:	f7ff f8e9 	bl	800168c <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a3f      	ldr	r2, [pc, #252]	@ (80025bc <HAL_ADC_ConfigChannel+0x2b8>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d119      	bne.n	80024f8 <HAL_ADC_ConfigChannel+0x1f4>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6818      	ldr	r0, [r3, #0]
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	6919      	ldr	r1, [r3, #16]
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	69db      	ldr	r3, [r3, #28]
 80024d0:	461a      	mov	r2, r3
 80024d2:	f7ff f981 	bl	80017d8 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6818      	ldr	r0, [r3, #0]
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	6919      	ldr	r1, [r3, #16]
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d102      	bne.n	80024ee <HAL_ADC_ConfigChannel+0x1ea>
 80024e8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80024ec:	e000      	b.n	80024f0 <HAL_ADC_ConfigChannel+0x1ec>
 80024ee:	2300      	movs	r3, #0
 80024f0:	461a      	mov	r2, r3
 80024f2:	f7ff f94f 	bl	8001794 <LL_ADC_SetOffsetSaturation>
 80024f6:	e1c8      	b.n	800288a <HAL_ADC_ConfigChannel+0x586>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6818      	ldr	r0, [r3, #0]
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	6919      	ldr	r1, [r3, #16]
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002506:	2b01      	cmp	r3, #1
 8002508:	d102      	bne.n	8002510 <HAL_ADC_ConfigChannel+0x20c>
 800250a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800250e:	e000      	b.n	8002512 <HAL_ADC_ConfigChannel+0x20e>
 8002510:	2300      	movs	r3, #0
 8002512:	461a      	mov	r2, r3
 8002514:	f7ff f91c 	bl	8001750 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6818      	ldr	r0, [r3, #0]
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	6919      	ldr	r1, [r3, #16]
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	7e1b      	ldrb	r3, [r3, #24]
 8002524:	2b01      	cmp	r3, #1
 8002526:	d102      	bne.n	800252e <HAL_ADC_ConfigChannel+0x22a>
 8002528:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800252c:	e000      	b.n	8002530 <HAL_ADC_ConfigChannel+0x22c>
 800252e:	2300      	movs	r3, #0
 8002530:	461a      	mov	r2, r3
 8002532:	f7ff f8f3 	bl	800171c <LL_ADC_SetDataRightShift>
 8002536:	e1a8      	b.n	800288a <HAL_ADC_ConfigChannel+0x586>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a1f      	ldr	r2, [pc, #124]	@ (80025bc <HAL_ADC_ConfigChannel+0x2b8>)
 800253e:	4293      	cmp	r3, r2
 8002540:	f040 815b 	bne.w	80027fa <HAL_ADC_ConfigChannel+0x4f6>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	2100      	movs	r1, #0
 800254a:	4618      	mov	r0, r3
 800254c:	f7ff f8d0 	bl	80016f0 <LL_ADC_GetOffsetChannel>
 8002550:	4603      	mov	r3, r0
 8002552:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002556:	2b00      	cmp	r3, #0
 8002558:	d10a      	bne.n	8002570 <HAL_ADC_ConfigChannel+0x26c>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	2100      	movs	r1, #0
 8002560:	4618      	mov	r0, r3
 8002562:	f7ff f8c5 	bl	80016f0 <LL_ADC_GetOffsetChannel>
 8002566:	4603      	mov	r3, r0
 8002568:	0e9b      	lsrs	r3, r3, #26
 800256a:	f003 021f 	and.w	r2, r3, #31
 800256e:	e017      	b.n	80025a0 <HAL_ADC_ConfigChannel+0x29c>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	2100      	movs	r1, #0
 8002576:	4618      	mov	r0, r3
 8002578:	f7ff f8ba 	bl	80016f0 <LL_ADC_GetOffsetChannel>
 800257c:	4603      	mov	r3, r0
 800257e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002580:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002582:	fa93 f3a3 	rbit	r3, r3
 8002586:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8002588:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800258a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 800258c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800258e:	2b00      	cmp	r3, #0
 8002590:	d101      	bne.n	8002596 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8002592:	2320      	movs	r3, #32
 8002594:	e003      	b.n	800259e <HAL_ADC_ConfigChannel+0x29a>
  return __builtin_clz(value);
 8002596:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002598:	fab3 f383 	clz	r3, r3
 800259c:	b2db      	uxtb	r3, r3
 800259e:	461a      	mov	r2, r3
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d10b      	bne.n	80025c4 <HAL_ADC_ConfigChannel+0x2c0>
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	0e9b      	lsrs	r3, r3, #26
 80025b2:	f003 031f 	and.w	r3, r3, #31
 80025b6:	e017      	b.n	80025e8 <HAL_ADC_ConfigChannel+0x2e4>
 80025b8:	47ff0000 	.word	0x47ff0000
 80025bc:	58026000 	.word	0x58026000
 80025c0:	5c001000 	.word	0x5c001000
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80025cc:	fa93 f3a3 	rbit	r3, r3
 80025d0:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80025d2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80025d4:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80025d6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d101      	bne.n	80025e0 <HAL_ADC_ConfigChannel+0x2dc>
    return 32U;
 80025dc:	2320      	movs	r3, #32
 80025de:	e003      	b.n	80025e8 <HAL_ADC_ConfigChannel+0x2e4>
  return __builtin_clz(value);
 80025e0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80025e2:	fab3 f383 	clz	r3, r3
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	429a      	cmp	r2, r3
 80025ea:	d106      	bne.n	80025fa <HAL_ADC_ConfigChannel+0x2f6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	2200      	movs	r2, #0
 80025f2:	2100      	movs	r1, #0
 80025f4:	4618      	mov	r0, r3
 80025f6:	f7ff f911 	bl	800181c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	2101      	movs	r1, #1
 8002600:	4618      	mov	r0, r3
 8002602:	f7ff f875 	bl	80016f0 <LL_ADC_GetOffsetChannel>
 8002606:	4603      	mov	r3, r0
 8002608:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800260c:	2b00      	cmp	r3, #0
 800260e:	d10a      	bne.n	8002626 <HAL_ADC_ConfigChannel+0x322>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	2101      	movs	r1, #1
 8002616:	4618      	mov	r0, r3
 8002618:	f7ff f86a 	bl	80016f0 <LL_ADC_GetOffsetChannel>
 800261c:	4603      	mov	r3, r0
 800261e:	0e9b      	lsrs	r3, r3, #26
 8002620:	f003 021f 	and.w	r2, r3, #31
 8002624:	e017      	b.n	8002656 <HAL_ADC_ConfigChannel+0x352>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	2101      	movs	r1, #1
 800262c:	4618      	mov	r0, r3
 800262e:	f7ff f85f 	bl	80016f0 <LL_ADC_GetOffsetChannel>
 8002632:	4603      	mov	r3, r0
 8002634:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002636:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002638:	fa93 f3a3 	rbit	r3, r3
 800263c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800263e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002640:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8002642:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002644:	2b00      	cmp	r3, #0
 8002646:	d101      	bne.n	800264c <HAL_ADC_ConfigChannel+0x348>
    return 32U;
 8002648:	2320      	movs	r3, #32
 800264a:	e003      	b.n	8002654 <HAL_ADC_ConfigChannel+0x350>
  return __builtin_clz(value);
 800264c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800264e:	fab3 f383 	clz	r3, r3
 8002652:	b2db      	uxtb	r3, r3
 8002654:	461a      	mov	r2, r3
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800265e:	2b00      	cmp	r3, #0
 8002660:	d105      	bne.n	800266e <HAL_ADC_ConfigChannel+0x36a>
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	0e9b      	lsrs	r3, r3, #26
 8002668:	f003 031f 	and.w	r3, r3, #31
 800266c:	e011      	b.n	8002692 <HAL_ADC_ConfigChannel+0x38e>
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002674:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002676:	fa93 f3a3 	rbit	r3, r3
 800267a:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800267c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800267e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8002680:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002682:	2b00      	cmp	r3, #0
 8002684:	d101      	bne.n	800268a <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8002686:	2320      	movs	r3, #32
 8002688:	e003      	b.n	8002692 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 800268a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800268c:	fab3 f383 	clz	r3, r3
 8002690:	b2db      	uxtb	r3, r3
 8002692:	429a      	cmp	r2, r3
 8002694:	d106      	bne.n	80026a4 <HAL_ADC_ConfigChannel+0x3a0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	2200      	movs	r2, #0
 800269c:	2101      	movs	r1, #1
 800269e:	4618      	mov	r0, r3
 80026a0:	f7ff f8bc 	bl	800181c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	2102      	movs	r1, #2
 80026aa:	4618      	mov	r0, r3
 80026ac:	f7ff f820 	bl	80016f0 <LL_ADC_GetOffsetChannel>
 80026b0:	4603      	mov	r3, r0
 80026b2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d10a      	bne.n	80026d0 <HAL_ADC_ConfigChannel+0x3cc>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	2102      	movs	r1, #2
 80026c0:	4618      	mov	r0, r3
 80026c2:	f7ff f815 	bl	80016f0 <LL_ADC_GetOffsetChannel>
 80026c6:	4603      	mov	r3, r0
 80026c8:	0e9b      	lsrs	r3, r3, #26
 80026ca:	f003 021f 	and.w	r2, r3, #31
 80026ce:	e017      	b.n	8002700 <HAL_ADC_ConfigChannel+0x3fc>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	2102      	movs	r1, #2
 80026d6:	4618      	mov	r0, r3
 80026d8:	f7ff f80a 	bl	80016f0 <LL_ADC_GetOffsetChannel>
 80026dc:	4603      	mov	r3, r0
 80026de:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026e2:	fa93 f3a3 	rbit	r3, r3
 80026e6:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80026e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80026ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d101      	bne.n	80026f6 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 80026f2:	2320      	movs	r3, #32
 80026f4:	e003      	b.n	80026fe <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 80026f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80026f8:	fab3 f383 	clz	r3, r3
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	461a      	mov	r2, r3
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002708:	2b00      	cmp	r3, #0
 800270a:	d105      	bne.n	8002718 <HAL_ADC_ConfigChannel+0x414>
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	0e9b      	lsrs	r3, r3, #26
 8002712:	f003 031f 	and.w	r3, r3, #31
 8002716:	e011      	b.n	800273c <HAL_ADC_ConfigChannel+0x438>
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800271e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002720:	fa93 f3a3 	rbit	r3, r3
 8002724:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8002726:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002728:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800272a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800272c:	2b00      	cmp	r3, #0
 800272e:	d101      	bne.n	8002734 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8002730:	2320      	movs	r3, #32
 8002732:	e003      	b.n	800273c <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8002734:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002736:	fab3 f383 	clz	r3, r3
 800273a:	b2db      	uxtb	r3, r3
 800273c:	429a      	cmp	r2, r3
 800273e:	d106      	bne.n	800274e <HAL_ADC_ConfigChannel+0x44a>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	2200      	movs	r2, #0
 8002746:	2102      	movs	r1, #2
 8002748:	4618      	mov	r0, r3
 800274a:	f7ff f867 	bl	800181c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	2103      	movs	r1, #3
 8002754:	4618      	mov	r0, r3
 8002756:	f7fe ffcb 	bl	80016f0 <LL_ADC_GetOffsetChannel>
 800275a:	4603      	mov	r3, r0
 800275c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002760:	2b00      	cmp	r3, #0
 8002762:	d10a      	bne.n	800277a <HAL_ADC_ConfigChannel+0x476>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	2103      	movs	r1, #3
 800276a:	4618      	mov	r0, r3
 800276c:	f7fe ffc0 	bl	80016f0 <LL_ADC_GetOffsetChannel>
 8002770:	4603      	mov	r3, r0
 8002772:	0e9b      	lsrs	r3, r3, #26
 8002774:	f003 021f 	and.w	r2, r3, #31
 8002778:	e017      	b.n	80027aa <HAL_ADC_ConfigChannel+0x4a6>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	2103      	movs	r1, #3
 8002780:	4618      	mov	r0, r3
 8002782:	f7fe ffb5 	bl	80016f0 <LL_ADC_GetOffsetChannel>
 8002786:	4603      	mov	r3, r0
 8002788:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800278a:	6a3b      	ldr	r3, [r7, #32]
 800278c:	fa93 f3a3 	rbit	r3, r3
 8002790:	61fb      	str	r3, [r7, #28]
  return result;
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002798:	2b00      	cmp	r3, #0
 800279a:	d101      	bne.n	80027a0 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 800279c:	2320      	movs	r3, #32
 800279e:	e003      	b.n	80027a8 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80027a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027a2:	fab3 f383 	clz	r3, r3
 80027a6:	b2db      	uxtb	r3, r3
 80027a8:	461a      	mov	r2, r3
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d105      	bne.n	80027c2 <HAL_ADC_ConfigChannel+0x4be>
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	0e9b      	lsrs	r3, r3, #26
 80027bc:	f003 031f 	and.w	r3, r3, #31
 80027c0:	e011      	b.n	80027e6 <HAL_ADC_ConfigChannel+0x4e2>
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	fa93 f3a3 	rbit	r3, r3
 80027ce:	613b      	str	r3, [r7, #16]
  return result;
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80027d4:	69bb      	ldr	r3, [r7, #24]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d101      	bne.n	80027de <HAL_ADC_ConfigChannel+0x4da>
    return 32U;
 80027da:	2320      	movs	r3, #32
 80027dc:	e003      	b.n	80027e6 <HAL_ADC_ConfigChannel+0x4e2>
  return __builtin_clz(value);
 80027de:	69bb      	ldr	r3, [r7, #24]
 80027e0:	fab3 f383 	clz	r3, r3
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	429a      	cmp	r2, r3
 80027e8:	d14f      	bne.n	800288a <HAL_ADC_ConfigChannel+0x586>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	2200      	movs	r2, #0
 80027f0:	2103      	movs	r1, #3
 80027f2:	4618      	mov	r0, r3
 80027f4:	f7ff f812 	bl	800181c <LL_ADC_SetOffsetState>
 80027f8:	e047      	b.n	800288a <HAL_ADC_ConfigChannel+0x586>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002800:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	069b      	lsls	r3, r3, #26
 800280a:	429a      	cmp	r2, r3
 800280c:	d107      	bne.n	800281e <HAL_ADC_ConfigChannel+0x51a>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800281c:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002824:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	069b      	lsls	r3, r3, #26
 800282e:	429a      	cmp	r2, r3
 8002830:	d107      	bne.n	8002842 <HAL_ADC_ConfigChannel+0x53e>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002840:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002848:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	069b      	lsls	r3, r3, #26
 8002852:	429a      	cmp	r2, r3
 8002854:	d107      	bne.n	8002866 <HAL_ADC_ConfigChannel+0x562>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002864:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800286c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	069b      	lsls	r3, r3, #26
 8002876:	429a      	cmp	r2, r3
 8002878:	d107      	bne.n	800288a <HAL_ADC_ConfigChannel+0x586>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002888:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4618      	mov	r0, r3
 8002890:	f7ff f916 	bl	8001ac0 <LL_ADC_IsEnabled>
 8002894:	4603      	mov	r3, r0
 8002896:	2b00      	cmp	r3, #0
 8002898:	f040 81ea 	bne.w	8002c70 <HAL_ADC_ConfigChannel+0x96c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6818      	ldr	r0, [r3, #0]
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	6819      	ldr	r1, [r3, #0]
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	461a      	mov	r2, r3
 80028aa:	f7ff f84b 	bl	8001944 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	68db      	ldr	r3, [r3, #12]
 80028b2:	4a7a      	ldr	r2, [pc, #488]	@ (8002a9c <HAL_ADC_ConfigChannel+0x798>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	f040 80e0 	bne.w	8002a7a <HAL_ADC_ConfigChannel+0x776>
      {
        /* Set ADC channel preselection of corresponding negative channel */
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4977      	ldr	r1, [pc, #476]	@ (8002aa0 <HAL_ADC_ConfigChannel+0x79c>)
 80028c4:	428b      	cmp	r3, r1
 80028c6:	d147      	bne.n	8002958 <HAL_ADC_ConfigChannel+0x654>
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4975      	ldr	r1, [pc, #468]	@ (8002aa4 <HAL_ADC_ConfigChannel+0x7a0>)
 80028ce:	428b      	cmp	r3, r1
 80028d0:	d040      	beq.n	8002954 <HAL_ADC_ConfigChannel+0x650>
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4974      	ldr	r1, [pc, #464]	@ (8002aa8 <HAL_ADC_ConfigChannel+0x7a4>)
 80028d8:	428b      	cmp	r3, r1
 80028da:	d039      	beq.n	8002950 <HAL_ADC_ConfigChannel+0x64c>
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4972      	ldr	r1, [pc, #456]	@ (8002aac <HAL_ADC_ConfigChannel+0x7a8>)
 80028e2:	428b      	cmp	r3, r1
 80028e4:	d032      	beq.n	800294c <HAL_ADC_ConfigChannel+0x648>
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4971      	ldr	r1, [pc, #452]	@ (8002ab0 <HAL_ADC_ConfigChannel+0x7ac>)
 80028ec:	428b      	cmp	r3, r1
 80028ee:	d02b      	beq.n	8002948 <HAL_ADC_ConfigChannel+0x644>
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	496f      	ldr	r1, [pc, #444]	@ (8002ab4 <HAL_ADC_ConfigChannel+0x7b0>)
 80028f6:	428b      	cmp	r3, r1
 80028f8:	d024      	beq.n	8002944 <HAL_ADC_ConfigChannel+0x640>
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	496e      	ldr	r1, [pc, #440]	@ (8002ab8 <HAL_ADC_ConfigChannel+0x7b4>)
 8002900:	428b      	cmp	r3, r1
 8002902:	d01d      	beq.n	8002940 <HAL_ADC_ConfigChannel+0x63c>
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	496c      	ldr	r1, [pc, #432]	@ (8002abc <HAL_ADC_ConfigChannel+0x7b8>)
 800290a:	428b      	cmp	r3, r1
 800290c:	d016      	beq.n	800293c <HAL_ADC_ConfigChannel+0x638>
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	496b      	ldr	r1, [pc, #428]	@ (8002ac0 <HAL_ADC_ConfigChannel+0x7bc>)
 8002914:	428b      	cmp	r3, r1
 8002916:	d00f      	beq.n	8002938 <HAL_ADC_ConfigChannel+0x634>
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4969      	ldr	r1, [pc, #420]	@ (8002ac4 <HAL_ADC_ConfigChannel+0x7c0>)
 800291e:	428b      	cmp	r3, r1
 8002920:	d008      	beq.n	8002934 <HAL_ADC_ConfigChannel+0x630>
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4968      	ldr	r1, [pc, #416]	@ (8002ac8 <HAL_ADC_ConfigChannel+0x7c4>)
 8002928:	428b      	cmp	r3, r1
 800292a:	d101      	bne.n	8002930 <HAL_ADC_ConfigChannel+0x62c>
 800292c:	4b67      	ldr	r3, [pc, #412]	@ (8002acc <HAL_ADC_ConfigChannel+0x7c8>)
 800292e:	e0a0      	b.n	8002a72 <HAL_ADC_ConfigChannel+0x76e>
 8002930:	2300      	movs	r3, #0
 8002932:	e09e      	b.n	8002a72 <HAL_ADC_ConfigChannel+0x76e>
 8002934:	4b66      	ldr	r3, [pc, #408]	@ (8002ad0 <HAL_ADC_ConfigChannel+0x7cc>)
 8002936:	e09c      	b.n	8002a72 <HAL_ADC_ConfigChannel+0x76e>
 8002938:	4b66      	ldr	r3, [pc, #408]	@ (8002ad4 <HAL_ADC_ConfigChannel+0x7d0>)
 800293a:	e09a      	b.n	8002a72 <HAL_ADC_ConfigChannel+0x76e>
 800293c:	4b60      	ldr	r3, [pc, #384]	@ (8002ac0 <HAL_ADC_ConfigChannel+0x7bc>)
 800293e:	e098      	b.n	8002a72 <HAL_ADC_ConfigChannel+0x76e>
 8002940:	4b5e      	ldr	r3, [pc, #376]	@ (8002abc <HAL_ADC_ConfigChannel+0x7b8>)
 8002942:	e096      	b.n	8002a72 <HAL_ADC_ConfigChannel+0x76e>
 8002944:	4b64      	ldr	r3, [pc, #400]	@ (8002ad8 <HAL_ADC_ConfigChannel+0x7d4>)
 8002946:	e094      	b.n	8002a72 <HAL_ADC_ConfigChannel+0x76e>
 8002948:	4b64      	ldr	r3, [pc, #400]	@ (8002adc <HAL_ADC_ConfigChannel+0x7d8>)
 800294a:	e092      	b.n	8002a72 <HAL_ADC_ConfigChannel+0x76e>
 800294c:	4b64      	ldr	r3, [pc, #400]	@ (8002ae0 <HAL_ADC_ConfigChannel+0x7dc>)
 800294e:	e090      	b.n	8002a72 <HAL_ADC_ConfigChannel+0x76e>
 8002950:	4b64      	ldr	r3, [pc, #400]	@ (8002ae4 <HAL_ADC_ConfigChannel+0x7e0>)
 8002952:	e08e      	b.n	8002a72 <HAL_ADC_ConfigChannel+0x76e>
 8002954:	2301      	movs	r3, #1
 8002956:	e08c      	b.n	8002a72 <HAL_ADC_ConfigChannel+0x76e>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4962      	ldr	r1, [pc, #392]	@ (8002ae8 <HAL_ADC_ConfigChannel+0x7e4>)
 800295e:	428b      	cmp	r3, r1
 8002960:	d140      	bne.n	80029e4 <HAL_ADC_ConfigChannel+0x6e0>
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	494f      	ldr	r1, [pc, #316]	@ (8002aa4 <HAL_ADC_ConfigChannel+0x7a0>)
 8002968:	428b      	cmp	r3, r1
 800296a:	d039      	beq.n	80029e0 <HAL_ADC_ConfigChannel+0x6dc>
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	494d      	ldr	r1, [pc, #308]	@ (8002aa8 <HAL_ADC_ConfigChannel+0x7a4>)
 8002972:	428b      	cmp	r3, r1
 8002974:	d032      	beq.n	80029dc <HAL_ADC_ConfigChannel+0x6d8>
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	494c      	ldr	r1, [pc, #304]	@ (8002aac <HAL_ADC_ConfigChannel+0x7a8>)
 800297c:	428b      	cmp	r3, r1
 800297e:	d02b      	beq.n	80029d8 <HAL_ADC_ConfigChannel+0x6d4>
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	494a      	ldr	r1, [pc, #296]	@ (8002ab0 <HAL_ADC_ConfigChannel+0x7ac>)
 8002986:	428b      	cmp	r3, r1
 8002988:	d024      	beq.n	80029d4 <HAL_ADC_ConfigChannel+0x6d0>
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4949      	ldr	r1, [pc, #292]	@ (8002ab4 <HAL_ADC_ConfigChannel+0x7b0>)
 8002990:	428b      	cmp	r3, r1
 8002992:	d01d      	beq.n	80029d0 <HAL_ADC_ConfigChannel+0x6cc>
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4947      	ldr	r1, [pc, #284]	@ (8002ab8 <HAL_ADC_ConfigChannel+0x7b4>)
 800299a:	428b      	cmp	r3, r1
 800299c:	d016      	beq.n	80029cc <HAL_ADC_ConfigChannel+0x6c8>
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4946      	ldr	r1, [pc, #280]	@ (8002abc <HAL_ADC_ConfigChannel+0x7b8>)
 80029a4:	428b      	cmp	r3, r1
 80029a6:	d00f      	beq.n	80029c8 <HAL_ADC_ConfigChannel+0x6c4>
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4944      	ldr	r1, [pc, #272]	@ (8002ac0 <HAL_ADC_ConfigChannel+0x7bc>)
 80029ae:	428b      	cmp	r3, r1
 80029b0:	d008      	beq.n	80029c4 <HAL_ADC_ConfigChannel+0x6c0>
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4944      	ldr	r1, [pc, #272]	@ (8002ac8 <HAL_ADC_ConfigChannel+0x7c4>)
 80029b8:	428b      	cmp	r3, r1
 80029ba:	d101      	bne.n	80029c0 <HAL_ADC_ConfigChannel+0x6bc>
 80029bc:	4b43      	ldr	r3, [pc, #268]	@ (8002acc <HAL_ADC_ConfigChannel+0x7c8>)
 80029be:	e058      	b.n	8002a72 <HAL_ADC_ConfigChannel+0x76e>
 80029c0:	2300      	movs	r3, #0
 80029c2:	e056      	b.n	8002a72 <HAL_ADC_ConfigChannel+0x76e>
 80029c4:	4b43      	ldr	r3, [pc, #268]	@ (8002ad4 <HAL_ADC_ConfigChannel+0x7d0>)
 80029c6:	e054      	b.n	8002a72 <HAL_ADC_ConfigChannel+0x76e>
 80029c8:	4b3d      	ldr	r3, [pc, #244]	@ (8002ac0 <HAL_ADC_ConfigChannel+0x7bc>)
 80029ca:	e052      	b.n	8002a72 <HAL_ADC_ConfigChannel+0x76e>
 80029cc:	4b3b      	ldr	r3, [pc, #236]	@ (8002abc <HAL_ADC_ConfigChannel+0x7b8>)
 80029ce:	e050      	b.n	8002a72 <HAL_ADC_ConfigChannel+0x76e>
 80029d0:	4b41      	ldr	r3, [pc, #260]	@ (8002ad8 <HAL_ADC_ConfigChannel+0x7d4>)
 80029d2:	e04e      	b.n	8002a72 <HAL_ADC_ConfigChannel+0x76e>
 80029d4:	4b41      	ldr	r3, [pc, #260]	@ (8002adc <HAL_ADC_ConfigChannel+0x7d8>)
 80029d6:	e04c      	b.n	8002a72 <HAL_ADC_ConfigChannel+0x76e>
 80029d8:	4b41      	ldr	r3, [pc, #260]	@ (8002ae0 <HAL_ADC_ConfigChannel+0x7dc>)
 80029da:	e04a      	b.n	8002a72 <HAL_ADC_ConfigChannel+0x76e>
 80029dc:	4b41      	ldr	r3, [pc, #260]	@ (8002ae4 <HAL_ADC_ConfigChannel+0x7e0>)
 80029de:	e048      	b.n	8002a72 <HAL_ADC_ConfigChannel+0x76e>
 80029e0:	2301      	movs	r3, #1
 80029e2:	e046      	b.n	8002a72 <HAL_ADC_ConfigChannel+0x76e>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4940      	ldr	r1, [pc, #256]	@ (8002aec <HAL_ADC_ConfigChannel+0x7e8>)
 80029ea:	428b      	cmp	r3, r1
 80029ec:	d140      	bne.n	8002a70 <HAL_ADC_ConfigChannel+0x76c>
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	492c      	ldr	r1, [pc, #176]	@ (8002aa4 <HAL_ADC_ConfigChannel+0x7a0>)
 80029f4:	428b      	cmp	r3, r1
 80029f6:	d039      	beq.n	8002a6c <HAL_ADC_ConfigChannel+0x768>
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	492a      	ldr	r1, [pc, #168]	@ (8002aa8 <HAL_ADC_ConfigChannel+0x7a4>)
 80029fe:	428b      	cmp	r3, r1
 8002a00:	d032      	beq.n	8002a68 <HAL_ADC_ConfigChannel+0x764>
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4929      	ldr	r1, [pc, #164]	@ (8002aac <HAL_ADC_ConfigChannel+0x7a8>)
 8002a08:	428b      	cmp	r3, r1
 8002a0a:	d02b      	beq.n	8002a64 <HAL_ADC_ConfigChannel+0x760>
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4927      	ldr	r1, [pc, #156]	@ (8002ab0 <HAL_ADC_ConfigChannel+0x7ac>)
 8002a12:	428b      	cmp	r3, r1
 8002a14:	d024      	beq.n	8002a60 <HAL_ADC_ConfigChannel+0x75c>
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4926      	ldr	r1, [pc, #152]	@ (8002ab4 <HAL_ADC_ConfigChannel+0x7b0>)
 8002a1c:	428b      	cmp	r3, r1
 8002a1e:	d01d      	beq.n	8002a5c <HAL_ADC_ConfigChannel+0x758>
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4924      	ldr	r1, [pc, #144]	@ (8002ab8 <HAL_ADC_ConfigChannel+0x7b4>)
 8002a26:	428b      	cmp	r3, r1
 8002a28:	d016      	beq.n	8002a58 <HAL_ADC_ConfigChannel+0x754>
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4923      	ldr	r1, [pc, #140]	@ (8002abc <HAL_ADC_ConfigChannel+0x7b8>)
 8002a30:	428b      	cmp	r3, r1
 8002a32:	d00f      	beq.n	8002a54 <HAL_ADC_ConfigChannel+0x750>
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4926      	ldr	r1, [pc, #152]	@ (8002ad4 <HAL_ADC_ConfigChannel+0x7d0>)
 8002a3a:	428b      	cmp	r3, r1
 8002a3c:	d008      	beq.n	8002a50 <HAL_ADC_ConfigChannel+0x74c>
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	492b      	ldr	r1, [pc, #172]	@ (8002af0 <HAL_ADC_ConfigChannel+0x7ec>)
 8002a44:	428b      	cmp	r3, r1
 8002a46:	d101      	bne.n	8002a4c <HAL_ADC_ConfigChannel+0x748>
 8002a48:	4b2a      	ldr	r3, [pc, #168]	@ (8002af4 <HAL_ADC_ConfigChannel+0x7f0>)
 8002a4a:	e012      	b.n	8002a72 <HAL_ADC_ConfigChannel+0x76e>
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	e010      	b.n	8002a72 <HAL_ADC_ConfigChannel+0x76e>
 8002a50:	4b27      	ldr	r3, [pc, #156]	@ (8002af0 <HAL_ADC_ConfigChannel+0x7ec>)
 8002a52:	e00e      	b.n	8002a72 <HAL_ADC_ConfigChannel+0x76e>
 8002a54:	4b1a      	ldr	r3, [pc, #104]	@ (8002ac0 <HAL_ADC_ConfigChannel+0x7bc>)
 8002a56:	e00c      	b.n	8002a72 <HAL_ADC_ConfigChannel+0x76e>
 8002a58:	4b18      	ldr	r3, [pc, #96]	@ (8002abc <HAL_ADC_ConfigChannel+0x7b8>)
 8002a5a:	e00a      	b.n	8002a72 <HAL_ADC_ConfigChannel+0x76e>
 8002a5c:	4b1e      	ldr	r3, [pc, #120]	@ (8002ad8 <HAL_ADC_ConfigChannel+0x7d4>)
 8002a5e:	e008      	b.n	8002a72 <HAL_ADC_ConfigChannel+0x76e>
 8002a60:	4b1e      	ldr	r3, [pc, #120]	@ (8002adc <HAL_ADC_ConfigChannel+0x7d8>)
 8002a62:	e006      	b.n	8002a72 <HAL_ADC_ConfigChannel+0x76e>
 8002a64:	4b1e      	ldr	r3, [pc, #120]	@ (8002ae0 <HAL_ADC_ConfigChannel+0x7dc>)
 8002a66:	e004      	b.n	8002a72 <HAL_ADC_ConfigChannel+0x76e>
 8002a68:	4b1e      	ldr	r3, [pc, #120]	@ (8002ae4 <HAL_ADC_ConfigChannel+0x7e0>)
 8002a6a:	e002      	b.n	8002a72 <HAL_ADC_ConfigChannel+0x76e>
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	e000      	b.n	8002a72 <HAL_ADC_ConfigChannel+0x76e>
 8002a70:	2300      	movs	r3, #0
 8002a72:	4619      	mov	r1, r3
 8002a74:	4610      	mov	r0, r2
 8002a76:	f7fe fdcf 	bl	8001618 <LL_ADC_SetChannelPreselection>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	f280 80f6 	bge.w	8002c70 <HAL_ADC_ConfigChannel+0x96c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a05      	ldr	r2, [pc, #20]	@ (8002aa0 <HAL_ADC_ConfigChannel+0x79c>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d004      	beq.n	8002a98 <HAL_ADC_ConfigChannel+0x794>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a15      	ldr	r2, [pc, #84]	@ (8002ae8 <HAL_ADC_ConfigChannel+0x7e4>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d131      	bne.n	8002afc <HAL_ADC_ConfigChannel+0x7f8>
 8002a98:	4b17      	ldr	r3, [pc, #92]	@ (8002af8 <HAL_ADC_ConfigChannel+0x7f4>)
 8002a9a:	e030      	b.n	8002afe <HAL_ADC_ConfigChannel+0x7fa>
 8002a9c:	47ff0000 	.word	0x47ff0000
 8002aa0:	40022000 	.word	0x40022000
 8002aa4:	04300002 	.word	0x04300002
 8002aa8:	08600004 	.word	0x08600004
 8002aac:	0c900008 	.word	0x0c900008
 8002ab0:	10c00010 	.word	0x10c00010
 8002ab4:	14f00020 	.word	0x14f00020
 8002ab8:	2a000400 	.word	0x2a000400
 8002abc:	2e300800 	.word	0x2e300800
 8002ac0:	32601000 	.word	0x32601000
 8002ac4:	43210000 	.word	0x43210000
 8002ac8:	4b840000 	.word	0x4b840000
 8002acc:	4fb80000 	.word	0x4fb80000
 8002ad0:	47520000 	.word	0x47520000
 8002ad4:	36902000 	.word	0x36902000
 8002ad8:	25b00200 	.word	0x25b00200
 8002adc:	21800100 	.word	0x21800100
 8002ae0:	1d500080 	.word	0x1d500080
 8002ae4:	19200040 	.word	0x19200040
 8002ae8:	40022100 	.word	0x40022100
 8002aec:	58026000 	.word	0x58026000
 8002af0:	3ac04000 	.word	0x3ac04000
 8002af4:	3ef08000 	.word	0x3ef08000
 8002af8:	40022300 	.word	0x40022300
 8002afc:	4b61      	ldr	r3, [pc, #388]	@ (8002c84 <HAL_ADC_ConfigChannel+0x980>)
 8002afe:	4618      	mov	r0, r3
 8002b00:	f7fe fd7c 	bl	80015fc <LL_ADC_GetCommonPathInternalCh>
 8002b04:	67f8      	str	r0, [r7, #124]	@ 0x7c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a5f      	ldr	r2, [pc, #380]	@ (8002c88 <HAL_ADC_ConfigChannel+0x984>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d004      	beq.n	8002b1a <HAL_ADC_ConfigChannel+0x816>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a5d      	ldr	r2, [pc, #372]	@ (8002c8c <HAL_ADC_ConfigChannel+0x988>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d10e      	bne.n	8002b38 <HAL_ADC_ConfigChannel+0x834>
 8002b1a:	485b      	ldr	r0, [pc, #364]	@ (8002c88 <HAL_ADC_ConfigChannel+0x984>)
 8002b1c:	f7fe ffd0 	bl	8001ac0 <LL_ADC_IsEnabled>
 8002b20:	4604      	mov	r4, r0
 8002b22:	485a      	ldr	r0, [pc, #360]	@ (8002c8c <HAL_ADC_ConfigChannel+0x988>)
 8002b24:	f7fe ffcc 	bl	8001ac0 <LL_ADC_IsEnabled>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	4323      	orrs	r3, r4
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	bf0c      	ite	eq
 8002b30:	2301      	moveq	r3, #1
 8002b32:	2300      	movne	r3, #0
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	e008      	b.n	8002b4a <HAL_ADC_ConfigChannel+0x846>
 8002b38:	4855      	ldr	r0, [pc, #340]	@ (8002c90 <HAL_ADC_ConfigChannel+0x98c>)
 8002b3a:	f7fe ffc1 	bl	8001ac0 <LL_ADC_IsEnabled>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	bf0c      	ite	eq
 8002b44:	2301      	moveq	r3, #1
 8002b46:	2300      	movne	r3, #0
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d07d      	beq.n	8002c4a <HAL_ADC_ConfigChannel+0x946>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a50      	ldr	r2, [pc, #320]	@ (8002c94 <HAL_ADC_ConfigChannel+0x990>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d130      	bne.n	8002bba <HAL_ADC_ConfigChannel+0x8b6>
 8002b58:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002b5a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d12b      	bne.n	8002bba <HAL_ADC_ConfigChannel+0x8b6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a4a      	ldr	r2, [pc, #296]	@ (8002c90 <HAL_ADC_ConfigChannel+0x98c>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	f040 8081 	bne.w	8002c70 <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a45      	ldr	r2, [pc, #276]	@ (8002c88 <HAL_ADC_ConfigChannel+0x984>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d004      	beq.n	8002b82 <HAL_ADC_ConfigChannel+0x87e>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a43      	ldr	r2, [pc, #268]	@ (8002c8c <HAL_ADC_ConfigChannel+0x988>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d101      	bne.n	8002b86 <HAL_ADC_ConfigChannel+0x882>
 8002b82:	4a45      	ldr	r2, [pc, #276]	@ (8002c98 <HAL_ADC_ConfigChannel+0x994>)
 8002b84:	e000      	b.n	8002b88 <HAL_ADC_ConfigChannel+0x884>
 8002b86:	4a3f      	ldr	r2, [pc, #252]	@ (8002c84 <HAL_ADC_ConfigChannel+0x980>)
 8002b88:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002b8a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002b8e:	4619      	mov	r1, r3
 8002b90:	4610      	mov	r0, r2
 8002b92:	f7fe fd20 	bl	80015d6 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002b96:	4b41      	ldr	r3, [pc, #260]	@ (8002c9c <HAL_ADC_ConfigChannel+0x998>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	099b      	lsrs	r3, r3, #6
 8002b9c:	4a40      	ldr	r2, [pc, #256]	@ (8002ca0 <HAL_ADC_ConfigChannel+0x99c>)
 8002b9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002ba2:	099b      	lsrs	r3, r3, #6
 8002ba4:	3301      	adds	r3, #1
 8002ba6:	005b      	lsls	r3, r3, #1
 8002ba8:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 8002baa:	e002      	b.n	8002bb2 <HAL_ADC_ConfigChannel+0x8ae>
              {
                wait_loop_index--;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	3b01      	subs	r3, #1
 8002bb0:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d1f9      	bne.n	8002bac <HAL_ADC_ConfigChannel+0x8a8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002bb8:	e05a      	b.n	8002c70 <HAL_ADC_ConfigChannel+0x96c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a39      	ldr	r2, [pc, #228]	@ (8002ca4 <HAL_ADC_ConfigChannel+0x9a0>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d11e      	bne.n	8002c02 <HAL_ADC_ConfigChannel+0x8fe>
 8002bc4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002bc6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d119      	bne.n	8002c02 <HAL_ADC_ConfigChannel+0x8fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a2f      	ldr	r2, [pc, #188]	@ (8002c90 <HAL_ADC_ConfigChannel+0x98c>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d14b      	bne.n	8002c70 <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a2a      	ldr	r2, [pc, #168]	@ (8002c88 <HAL_ADC_ConfigChannel+0x984>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d004      	beq.n	8002bec <HAL_ADC_ConfigChannel+0x8e8>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a29      	ldr	r2, [pc, #164]	@ (8002c8c <HAL_ADC_ConfigChannel+0x988>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d101      	bne.n	8002bf0 <HAL_ADC_ConfigChannel+0x8ec>
 8002bec:	4a2a      	ldr	r2, [pc, #168]	@ (8002c98 <HAL_ADC_ConfigChannel+0x994>)
 8002bee:	e000      	b.n	8002bf2 <HAL_ADC_ConfigChannel+0x8ee>
 8002bf0:	4a24      	ldr	r2, [pc, #144]	@ (8002c84 <HAL_ADC_ConfigChannel+0x980>)
 8002bf2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002bf4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002bf8:	4619      	mov	r1, r3
 8002bfa:	4610      	mov	r0, r2
 8002bfc:	f7fe fceb 	bl	80015d6 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002c00:	e036      	b.n	8002c70 <HAL_ADC_ConfigChannel+0x96c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a28      	ldr	r2, [pc, #160]	@ (8002ca8 <HAL_ADC_ConfigChannel+0x9a4>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d131      	bne.n	8002c70 <HAL_ADC_ConfigChannel+0x96c>
 8002c0c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002c0e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d12c      	bne.n	8002c70 <HAL_ADC_ConfigChannel+0x96c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a1d      	ldr	r2, [pc, #116]	@ (8002c90 <HAL_ADC_ConfigChannel+0x98c>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d127      	bne.n	8002c70 <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a18      	ldr	r2, [pc, #96]	@ (8002c88 <HAL_ADC_ConfigChannel+0x984>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d004      	beq.n	8002c34 <HAL_ADC_ConfigChannel+0x930>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a17      	ldr	r2, [pc, #92]	@ (8002c8c <HAL_ADC_ConfigChannel+0x988>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d101      	bne.n	8002c38 <HAL_ADC_ConfigChannel+0x934>
 8002c34:	4a18      	ldr	r2, [pc, #96]	@ (8002c98 <HAL_ADC_ConfigChannel+0x994>)
 8002c36:	e000      	b.n	8002c3a <HAL_ADC_ConfigChannel+0x936>
 8002c38:	4a12      	ldr	r2, [pc, #72]	@ (8002c84 <HAL_ADC_ConfigChannel+0x980>)
 8002c3a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002c3c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002c40:	4619      	mov	r1, r3
 8002c42:	4610      	mov	r0, r2
 8002c44:	f7fe fcc7 	bl	80015d6 <LL_ADC_SetCommonPathInternalCh>
 8002c48:	e012      	b.n	8002c70 <HAL_ADC_ConfigChannel+0x96c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c4e:	f043 0220 	orr.w	r2, r3, #32
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 8002c5c:	e008      	b.n	8002c70 <HAL_ADC_ConfigChannel+0x96c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c62:	f043 0220 	orr.w	r2, r3, #32
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2200      	movs	r2, #0
 8002c74:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8002c78:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	3794      	adds	r7, #148	@ 0x94
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd90      	pop	{r4, r7, pc}
 8002c84:	58026300 	.word	0x58026300
 8002c88:	40022000 	.word	0x40022000
 8002c8c:	40022100 	.word	0x40022100
 8002c90:	58026000 	.word	0x58026000
 8002c94:	c7520000 	.word	0xc7520000
 8002c98:	40022300 	.word	0x40022300
 8002c9c:	24000000 	.word	0x24000000
 8002ca0:	053e2d63 	.word	0x053e2d63
 8002ca4:	c3210000 	.word	0xc3210000
 8002ca8:	cb840000 	.word	0xcb840000

08002cac <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b084      	sub	sp, #16
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f7fe ff01 	bl	8001ac0 <LL_ADC_IsEnabled>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d16e      	bne.n	8002da2 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	689a      	ldr	r2, [r3, #8]
 8002cca:	4b38      	ldr	r3, [pc, #224]	@ (8002dac <ADC_Enable+0x100>)
 8002ccc:	4013      	ands	r3, r2
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d00d      	beq.n	8002cee <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cd6:	f043 0210 	orr.w	r2, r3, #16
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002ce2:	f043 0201 	orr.w	r2, r3, #1
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	665a      	str	r2, [r3, #100]	@ 0x64

      return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e05a      	b.n	8002da4 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f7fe fed0 	bl	8001a98 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002cf8:	f7fe fc2a 	bl	8001550 <HAL_GetTick>
 8002cfc:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a2b      	ldr	r2, [pc, #172]	@ (8002db0 <ADC_Enable+0x104>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d004      	beq.n	8002d12 <ADC_Enable+0x66>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a29      	ldr	r2, [pc, #164]	@ (8002db4 <ADC_Enable+0x108>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d101      	bne.n	8002d16 <ADC_Enable+0x6a>
 8002d12:	4b29      	ldr	r3, [pc, #164]	@ (8002db8 <ADC_Enable+0x10c>)
 8002d14:	e000      	b.n	8002d18 <ADC_Enable+0x6c>
 8002d16:	4b29      	ldr	r3, [pc, #164]	@ (8002dbc <ADC_Enable+0x110>)
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f7fe fe53 	bl	80019c4 <LL_ADC_GetMultimode>
 8002d1e:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a23      	ldr	r2, [pc, #140]	@ (8002db4 <ADC_Enable+0x108>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d002      	beq.n	8002d30 <ADC_Enable+0x84>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	e000      	b.n	8002d32 <ADC_Enable+0x86>
 8002d30:	4b1f      	ldr	r3, [pc, #124]	@ (8002db0 <ADC_Enable+0x104>)
 8002d32:	687a      	ldr	r2, [r7, #4]
 8002d34:	6812      	ldr	r2, [r2, #0]
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d02c      	beq.n	8002d94 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d130      	bne.n	8002da2 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002d40:	e028      	b.n	8002d94 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4618      	mov	r0, r3
 8002d48:	f7fe feba 	bl	8001ac0 <LL_ADC_IsEnabled>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d104      	bne.n	8002d5c <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4618      	mov	r0, r3
 8002d58:	f7fe fe9e 	bl	8001a98 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002d5c:	f7fe fbf8 	bl	8001550 <HAL_GetTick>
 8002d60:	4602      	mov	r2, r0
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	1ad3      	subs	r3, r2, r3
 8002d66:	2b02      	cmp	r3, #2
 8002d68:	d914      	bls.n	8002d94 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 0301 	and.w	r3, r3, #1
 8002d74:	2b01      	cmp	r3, #1
 8002d76:	d00d      	beq.n	8002d94 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d7c:	f043 0210 	orr.w	r2, r3, #16
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002d88:	f043 0201 	orr.w	r2, r3, #1
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	665a      	str	r2, [r3, #100]	@ 0x64

            return HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	e007      	b.n	8002da4 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 0301 	and.w	r3, r3, #1
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d1cf      	bne.n	8002d42 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002da2:	2300      	movs	r3, #0
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	3710      	adds	r7, #16
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}
 8002dac:	8000003f 	.word	0x8000003f
 8002db0:	40022000 	.word	0x40022000
 8002db4:	40022100 	.word	0x40022100
 8002db8:	40022300 	.word	0x40022300
 8002dbc:	58026300 	.word	0x58026300

08002dc0 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b084      	sub	sp, #16
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a6c      	ldr	r2, [pc, #432]	@ (8002f80 <ADC_ConfigureBoostMode+0x1c0>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d004      	beq.n	8002ddc <ADC_ConfigureBoostMode+0x1c>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a6b      	ldr	r2, [pc, #428]	@ (8002f84 <ADC_ConfigureBoostMode+0x1c4>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d109      	bne.n	8002df0 <ADC_ConfigureBoostMode+0x30>
 8002ddc:	4b6a      	ldr	r3, [pc, #424]	@ (8002f88 <ADC_ConfigureBoostMode+0x1c8>)
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	bf14      	ite	ne
 8002de8:	2301      	movne	r3, #1
 8002dea:	2300      	moveq	r3, #0
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	e008      	b.n	8002e02 <ADC_ConfigureBoostMode+0x42>
 8002df0:	4b66      	ldr	r3, [pc, #408]	@ (8002f8c <ADC_ConfigureBoostMode+0x1cc>)
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	bf14      	ite	ne
 8002dfc:	2301      	movne	r3, #1
 8002dfe:	2300      	moveq	r3, #0
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d01c      	beq.n	8002e40 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002e06:	f001 fcc3 	bl	8004790 <HAL_RCC_GetHCLKFreq>
 8002e0a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002e14:	d010      	beq.n	8002e38 <ADC_ConfigureBoostMode+0x78>
 8002e16:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002e1a:	d873      	bhi.n	8002f04 <ADC_ConfigureBoostMode+0x144>
 8002e1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e20:	d002      	beq.n	8002e28 <ADC_ConfigureBoostMode+0x68>
 8002e22:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002e26:	d16d      	bne.n	8002f04 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	0c1b      	lsrs	r3, r3, #16
 8002e2e:	68fa      	ldr	r2, [r7, #12]
 8002e30:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e34:	60fb      	str	r3, [r7, #12]
        break;
 8002e36:	e068      	b.n	8002f0a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	089b      	lsrs	r3, r3, #2
 8002e3c:	60fb      	str	r3, [r7, #12]
        break;
 8002e3e:	e064      	b.n	8002f0a <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002e40:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002e44:	f04f 0100 	mov.w	r1, #0
 8002e48:	f002 fe9e 	bl	8005b88 <HAL_RCCEx_GetPeriphCLKFreq>
 8002e4c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002e56:	d051      	beq.n	8002efc <ADC_ConfigureBoostMode+0x13c>
 8002e58:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002e5c:	d854      	bhi.n	8002f08 <ADC_ConfigureBoostMode+0x148>
 8002e5e:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002e62:	d047      	beq.n	8002ef4 <ADC_ConfigureBoostMode+0x134>
 8002e64:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002e68:	d84e      	bhi.n	8002f08 <ADC_ConfigureBoostMode+0x148>
 8002e6a:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002e6e:	d03d      	beq.n	8002eec <ADC_ConfigureBoostMode+0x12c>
 8002e70:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002e74:	d848      	bhi.n	8002f08 <ADC_ConfigureBoostMode+0x148>
 8002e76:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002e7a:	d033      	beq.n	8002ee4 <ADC_ConfigureBoostMode+0x124>
 8002e7c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002e80:	d842      	bhi.n	8002f08 <ADC_ConfigureBoostMode+0x148>
 8002e82:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8002e86:	d029      	beq.n	8002edc <ADC_ConfigureBoostMode+0x11c>
 8002e88:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8002e8c:	d83c      	bhi.n	8002f08 <ADC_ConfigureBoostMode+0x148>
 8002e8e:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002e92:	d01a      	beq.n	8002eca <ADC_ConfigureBoostMode+0x10a>
 8002e94:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002e98:	d836      	bhi.n	8002f08 <ADC_ConfigureBoostMode+0x148>
 8002e9a:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002e9e:	d014      	beq.n	8002eca <ADC_ConfigureBoostMode+0x10a>
 8002ea0:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002ea4:	d830      	bhi.n	8002f08 <ADC_ConfigureBoostMode+0x148>
 8002ea6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002eaa:	d00e      	beq.n	8002eca <ADC_ConfigureBoostMode+0x10a>
 8002eac:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002eb0:	d82a      	bhi.n	8002f08 <ADC_ConfigureBoostMode+0x148>
 8002eb2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002eb6:	d008      	beq.n	8002eca <ADC_ConfigureBoostMode+0x10a>
 8002eb8:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002ebc:	d824      	bhi.n	8002f08 <ADC_ConfigureBoostMode+0x148>
 8002ebe:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002ec2:	d002      	beq.n	8002eca <ADC_ConfigureBoostMode+0x10a>
 8002ec4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002ec8:	d11e      	bne.n	8002f08 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	0c9b      	lsrs	r3, r3, #18
 8002ed0:	005b      	lsls	r3, r3, #1
 8002ed2:	68fa      	ldr	r2, [r7, #12]
 8002ed4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ed8:	60fb      	str	r3, [r7, #12]
        break;
 8002eda:	e016      	b.n	8002f0a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	091b      	lsrs	r3, r3, #4
 8002ee0:	60fb      	str	r3, [r7, #12]
        break;
 8002ee2:	e012      	b.n	8002f0a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	095b      	lsrs	r3, r3, #5
 8002ee8:	60fb      	str	r3, [r7, #12]
        break;
 8002eea:	e00e      	b.n	8002f0a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	099b      	lsrs	r3, r3, #6
 8002ef0:	60fb      	str	r3, [r7, #12]
        break;
 8002ef2:	e00a      	b.n	8002f0a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	09db      	lsrs	r3, r3, #7
 8002ef8:	60fb      	str	r3, [r7, #12]
        break;
 8002efa:	e006      	b.n	8002f0a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	0a1b      	lsrs	r3, r3, #8
 8002f00:	60fb      	str	r3, [r7, #12]
        break;
 8002f02:	e002      	b.n	8002f0a <ADC_ConfigureBoostMode+0x14a>
        break;
 8002f04:	bf00      	nop
 8002f06:	e000      	b.n	8002f0a <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8002f08:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	085b      	lsrs	r3, r3, #1
 8002f0e:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	4a1f      	ldr	r2, [pc, #124]	@ (8002f90 <ADC_ConfigureBoostMode+0x1d0>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d808      	bhi.n	8002f2a <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	689a      	ldr	r2, [r3, #8]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8002f26:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002f28:	e025      	b.n	8002f76 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	4a19      	ldr	r2, [pc, #100]	@ (8002f94 <ADC_ConfigureBoostMode+0x1d4>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d80a      	bhi.n	8002f48 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002f44:	609a      	str	r2, [r3, #8]
}
 8002f46:	e016      	b.n	8002f76 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	4a13      	ldr	r2, [pc, #76]	@ (8002f98 <ADC_ConfigureBoostMode+0x1d8>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d80a      	bhi.n	8002f66 <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f62:	609a      	str	r2, [r3, #8]
}
 8002f64:	e007      	b.n	8002f76 <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	689a      	ldr	r2, [r3, #8]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8002f74:	609a      	str	r2, [r3, #8]
}
 8002f76:	bf00      	nop
 8002f78:	3710      	adds	r7, #16
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	bf00      	nop
 8002f80:	40022000 	.word	0x40022000
 8002f84:	40022100 	.word	0x40022100
 8002f88:	40022300 	.word	0x40022300
 8002f8c:	58026300 	.word	0x58026300
 8002f90:	005f5e10 	.word	0x005f5e10
 8002f94:	00bebc20 	.word	0x00bebc20
 8002f98:	017d7840 	.word	0x017d7840

08002f9c <LL_ADC_IsEnabled>:
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b083      	sub	sp, #12
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	f003 0301 	and.w	r3, r3, #1
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d101      	bne.n	8002fb4 <LL_ADC_IsEnabled+0x18>
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e000      	b.n	8002fb6 <LL_ADC_IsEnabled+0x1a>
 8002fb4:	2300      	movs	r3, #0
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	370c      	adds	r7, #12
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr

08002fc2 <LL_ADC_REG_IsConversionOngoing>:
{
 8002fc2:	b480      	push	{r7}
 8002fc4:	b083      	sub	sp, #12
 8002fc6:	af00      	add	r7, sp, #0
 8002fc8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	f003 0304 	and.w	r3, r3, #4
 8002fd2:	2b04      	cmp	r3, #4
 8002fd4:	d101      	bne.n	8002fda <LL_ADC_REG_IsConversionOngoing+0x18>
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e000      	b.n	8002fdc <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002fda:	2300      	movs	r3, #0
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	370c      	adds	r7, #12
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe6:	4770      	bx	lr

08002fe8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002fe8:	b590      	push	{r4, r7, lr}
 8002fea:	b0a3      	sub	sp, #140	@ 0x8c
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
 8002ff0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	d101      	bne.n	8003006 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003002:	2302      	movs	r3, #2
 8003004:	e0c1      	b.n	800318a <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2201      	movs	r2, #1
 800300a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800300e:	2300      	movs	r3, #0
 8003010:	66fb      	str	r3, [r7, #108]	@ 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8003012:	2300      	movs	r3, #0
 8003014:	673b      	str	r3, [r7, #112]	@ 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a5e      	ldr	r2, [pc, #376]	@ (8003194 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d102      	bne.n	8003026 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003020:	4b5d      	ldr	r3, [pc, #372]	@ (8003198 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003022:	60fb      	str	r3, [r7, #12]
 8003024:	e001      	b.n	800302a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003026:	2300      	movs	r3, #0
 8003028:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d10b      	bne.n	8003048 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003034:	f043 0220 	orr.w	r2, r3, #32
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2200      	movs	r2, #0
 8003040:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	e0a0      	b.n	800318a <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	4618      	mov	r0, r3
 800304c:	f7ff ffb9 	bl	8002fc2 <LL_ADC_REG_IsConversionOngoing>
 8003050:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4618      	mov	r0, r3
 800305a:	f7ff ffb2 	bl	8002fc2 <LL_ADC_REG_IsConversionOngoing>
 800305e:	4603      	mov	r3, r0
 8003060:	2b00      	cmp	r3, #0
 8003062:	f040 8081 	bne.w	8003168 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003066:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800306a:	2b00      	cmp	r3, #0
 800306c:	d17c      	bne.n	8003168 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a48      	ldr	r2, [pc, #288]	@ (8003194 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d004      	beq.n	8003082 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a46      	ldr	r2, [pc, #280]	@ (8003198 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d101      	bne.n	8003086 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8003082:	4b46      	ldr	r3, [pc, #280]	@ (800319c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003084:	e000      	b.n	8003088 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8003086:	4b46      	ldr	r3, [pc, #280]	@ (80031a0 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003088:	67fb      	str	r3, [r7, #124]	@ 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d039      	beq.n	8003106 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003092:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	431a      	orrs	r2, r3
 80030a0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80030a2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a3a      	ldr	r2, [pc, #232]	@ (8003194 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d004      	beq.n	80030b8 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a39      	ldr	r2, [pc, #228]	@ (8003198 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d10e      	bne.n	80030d6 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 80030b8:	4836      	ldr	r0, [pc, #216]	@ (8003194 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80030ba:	f7ff ff6f 	bl	8002f9c <LL_ADC_IsEnabled>
 80030be:	4604      	mov	r4, r0
 80030c0:	4835      	ldr	r0, [pc, #212]	@ (8003198 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80030c2:	f7ff ff6b 	bl	8002f9c <LL_ADC_IsEnabled>
 80030c6:	4603      	mov	r3, r0
 80030c8:	4323      	orrs	r3, r4
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	bf0c      	ite	eq
 80030ce:	2301      	moveq	r3, #1
 80030d0:	2300      	movne	r3, #0
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	e008      	b.n	80030e8 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 80030d6:	4833      	ldr	r0, [pc, #204]	@ (80031a4 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 80030d8:	f7ff ff60 	bl	8002f9c <LL_ADC_IsEnabled>
 80030dc:	4603      	mov	r3, r0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	bf0c      	ite	eq
 80030e2:	2301      	moveq	r3, #1
 80030e4:	2300      	movne	r3, #0
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d047      	beq.n	800317c <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80030ec:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80030ee:	689a      	ldr	r2, [r3, #8]
 80030f0:	4b2d      	ldr	r3, [pc, #180]	@ (80031a8 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80030f2:	4013      	ands	r3, r2
 80030f4:	683a      	ldr	r2, [r7, #0]
 80030f6:	6811      	ldr	r1, [r2, #0]
 80030f8:	683a      	ldr	r2, [r7, #0]
 80030fa:	6892      	ldr	r2, [r2, #8]
 80030fc:	430a      	orrs	r2, r1
 80030fe:	431a      	orrs	r2, r3
 8003100:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003102:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003104:	e03a      	b.n	800317c <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8003106:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800310e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003110:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a1f      	ldr	r2, [pc, #124]	@ (8003194 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d004      	beq.n	8003126 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a1d      	ldr	r2, [pc, #116]	@ (8003198 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d10e      	bne.n	8003144 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8003126:	481b      	ldr	r0, [pc, #108]	@ (8003194 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003128:	f7ff ff38 	bl	8002f9c <LL_ADC_IsEnabled>
 800312c:	4604      	mov	r4, r0
 800312e:	481a      	ldr	r0, [pc, #104]	@ (8003198 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003130:	f7ff ff34 	bl	8002f9c <LL_ADC_IsEnabled>
 8003134:	4603      	mov	r3, r0
 8003136:	4323      	orrs	r3, r4
 8003138:	2b00      	cmp	r3, #0
 800313a:	bf0c      	ite	eq
 800313c:	2301      	moveq	r3, #1
 800313e:	2300      	movne	r3, #0
 8003140:	b2db      	uxtb	r3, r3
 8003142:	e008      	b.n	8003156 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8003144:	4817      	ldr	r0, [pc, #92]	@ (80031a4 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8003146:	f7ff ff29 	bl	8002f9c <LL_ADC_IsEnabled>
 800314a:	4603      	mov	r3, r0
 800314c:	2b00      	cmp	r3, #0
 800314e:	bf0c      	ite	eq
 8003150:	2301      	moveq	r3, #1
 8003152:	2300      	movne	r3, #0
 8003154:	b2db      	uxtb	r3, r3
 8003156:	2b00      	cmp	r3, #0
 8003158:	d010      	beq.n	800317c <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800315a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800315c:	689a      	ldr	r2, [r3, #8]
 800315e:	4b12      	ldr	r3, [pc, #72]	@ (80031a8 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8003160:	4013      	ands	r3, r2
 8003162:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8003164:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003166:	e009      	b.n	800317c <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800316c:	f043 0220 	orr.w	r2, r3, #32
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 800317a:	e000      	b.n	800317e <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800317c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2200      	movs	r2, #0
 8003182:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8003186:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 800318a:	4618      	mov	r0, r3
 800318c:	378c      	adds	r7, #140	@ 0x8c
 800318e:	46bd      	mov	sp, r7
 8003190:	bd90      	pop	{r4, r7, pc}
 8003192:	bf00      	nop
 8003194:	40022000 	.word	0x40022000
 8003198:	40022100 	.word	0x40022100
 800319c:	40022300 	.word	0x40022300
 80031a0:	58026300 	.word	0x58026300
 80031a4:	58026000 	.word	0x58026000
 80031a8:	fffff0e0 	.word	0xfffff0e0

080031ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b085      	sub	sp, #20
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	f003 0307 	and.w	r3, r3, #7
 80031ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031bc:	4b0b      	ldr	r3, [pc, #44]	@ (80031ec <__NVIC_SetPriorityGrouping+0x40>)
 80031be:	68db      	ldr	r3, [r3, #12]
 80031c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031c2:	68ba      	ldr	r2, [r7, #8]
 80031c4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80031c8:	4013      	ands	r3, r2
 80031ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80031d4:	4b06      	ldr	r3, [pc, #24]	@ (80031f0 <__NVIC_SetPriorityGrouping+0x44>)
 80031d6:	4313      	orrs	r3, r2
 80031d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031da:	4a04      	ldr	r2, [pc, #16]	@ (80031ec <__NVIC_SetPriorityGrouping+0x40>)
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	60d3      	str	r3, [r2, #12]
}
 80031e0:	bf00      	nop
 80031e2:	3714      	adds	r7, #20
 80031e4:	46bd      	mov	sp, r7
 80031e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ea:	4770      	bx	lr
 80031ec:	e000ed00 	.word	0xe000ed00
 80031f0:	05fa0000 	.word	0x05fa0000

080031f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80031f4:	b480      	push	{r7}
 80031f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031f8:	4b04      	ldr	r3, [pc, #16]	@ (800320c <__NVIC_GetPriorityGrouping+0x18>)
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	0a1b      	lsrs	r3, r3, #8
 80031fe:	f003 0307 	and.w	r3, r3, #7
}
 8003202:	4618      	mov	r0, r3
 8003204:	46bd      	mov	sp, r7
 8003206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320a:	4770      	bx	lr
 800320c:	e000ed00 	.word	0xe000ed00

08003210 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003210:	b480      	push	{r7}
 8003212:	b083      	sub	sp, #12
 8003214:	af00      	add	r7, sp, #0
 8003216:	4603      	mov	r3, r0
 8003218:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800321a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800321e:	2b00      	cmp	r3, #0
 8003220:	db0b      	blt.n	800323a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003222:	88fb      	ldrh	r3, [r7, #6]
 8003224:	f003 021f 	and.w	r2, r3, #31
 8003228:	4907      	ldr	r1, [pc, #28]	@ (8003248 <__NVIC_EnableIRQ+0x38>)
 800322a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800322e:	095b      	lsrs	r3, r3, #5
 8003230:	2001      	movs	r0, #1
 8003232:	fa00 f202 	lsl.w	r2, r0, r2
 8003236:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800323a:	bf00      	nop
 800323c:	370c      	adds	r7, #12
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr
 8003246:	bf00      	nop
 8003248:	e000e100 	.word	0xe000e100

0800324c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800324c:	b480      	push	{r7}
 800324e:	b083      	sub	sp, #12
 8003250:	af00      	add	r7, sp, #0
 8003252:	4603      	mov	r3, r0
 8003254:	6039      	str	r1, [r7, #0]
 8003256:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003258:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800325c:	2b00      	cmp	r3, #0
 800325e:	db0a      	blt.n	8003276 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	b2da      	uxtb	r2, r3
 8003264:	490c      	ldr	r1, [pc, #48]	@ (8003298 <__NVIC_SetPriority+0x4c>)
 8003266:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800326a:	0112      	lsls	r2, r2, #4
 800326c:	b2d2      	uxtb	r2, r2
 800326e:	440b      	add	r3, r1
 8003270:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003274:	e00a      	b.n	800328c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	b2da      	uxtb	r2, r3
 800327a:	4908      	ldr	r1, [pc, #32]	@ (800329c <__NVIC_SetPriority+0x50>)
 800327c:	88fb      	ldrh	r3, [r7, #6]
 800327e:	f003 030f 	and.w	r3, r3, #15
 8003282:	3b04      	subs	r3, #4
 8003284:	0112      	lsls	r2, r2, #4
 8003286:	b2d2      	uxtb	r2, r2
 8003288:	440b      	add	r3, r1
 800328a:	761a      	strb	r2, [r3, #24]
}
 800328c:	bf00      	nop
 800328e:	370c      	adds	r7, #12
 8003290:	46bd      	mov	sp, r7
 8003292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003296:	4770      	bx	lr
 8003298:	e000e100 	.word	0xe000e100
 800329c:	e000ed00 	.word	0xe000ed00

080032a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b089      	sub	sp, #36	@ 0x24
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	60f8      	str	r0, [r7, #12]
 80032a8:	60b9      	str	r1, [r7, #8]
 80032aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	f003 0307 	and.w	r3, r3, #7
 80032b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032b4:	69fb      	ldr	r3, [r7, #28]
 80032b6:	f1c3 0307 	rsb	r3, r3, #7
 80032ba:	2b04      	cmp	r3, #4
 80032bc:	bf28      	it	cs
 80032be:	2304      	movcs	r3, #4
 80032c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032c2:	69fb      	ldr	r3, [r7, #28]
 80032c4:	3304      	adds	r3, #4
 80032c6:	2b06      	cmp	r3, #6
 80032c8:	d902      	bls.n	80032d0 <NVIC_EncodePriority+0x30>
 80032ca:	69fb      	ldr	r3, [r7, #28]
 80032cc:	3b03      	subs	r3, #3
 80032ce:	e000      	b.n	80032d2 <NVIC_EncodePriority+0x32>
 80032d0:	2300      	movs	r3, #0
 80032d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032d4:	f04f 32ff 	mov.w	r2, #4294967295
 80032d8:	69bb      	ldr	r3, [r7, #24]
 80032da:	fa02 f303 	lsl.w	r3, r2, r3
 80032de:	43da      	mvns	r2, r3
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	401a      	ands	r2, r3
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032e8:	f04f 31ff 	mov.w	r1, #4294967295
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	fa01 f303 	lsl.w	r3, r1, r3
 80032f2:	43d9      	mvns	r1, r3
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032f8:	4313      	orrs	r3, r2
         );
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3724      	adds	r7, #36	@ 0x24
 80032fe:	46bd      	mov	sp, r7
 8003300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003304:	4770      	bx	lr
	...

08003308 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b082      	sub	sp, #8
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	3b01      	subs	r3, #1
 8003314:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003318:	d301      	bcc.n	800331e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800331a:	2301      	movs	r3, #1
 800331c:	e00f      	b.n	800333e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800331e:	4a0a      	ldr	r2, [pc, #40]	@ (8003348 <SysTick_Config+0x40>)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	3b01      	subs	r3, #1
 8003324:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003326:	210f      	movs	r1, #15
 8003328:	f04f 30ff 	mov.w	r0, #4294967295
 800332c:	f7ff ff8e 	bl	800324c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003330:	4b05      	ldr	r3, [pc, #20]	@ (8003348 <SysTick_Config+0x40>)
 8003332:	2200      	movs	r2, #0
 8003334:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003336:	4b04      	ldr	r3, [pc, #16]	@ (8003348 <SysTick_Config+0x40>)
 8003338:	2207      	movs	r2, #7
 800333a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800333c:	2300      	movs	r3, #0
}
 800333e:	4618      	mov	r0, r3
 8003340:	3708      	adds	r7, #8
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
 8003346:	bf00      	nop
 8003348:	e000e010 	.word	0xe000e010

0800334c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b082      	sub	sp, #8
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003354:	6878      	ldr	r0, [r7, #4]
 8003356:	f7ff ff29 	bl	80031ac <__NVIC_SetPriorityGrouping>
}
 800335a:	bf00      	nop
 800335c:	3708      	adds	r7, #8
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}

08003362 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003362:	b580      	push	{r7, lr}
 8003364:	b086      	sub	sp, #24
 8003366:	af00      	add	r7, sp, #0
 8003368:	4603      	mov	r3, r0
 800336a:	60b9      	str	r1, [r7, #8]
 800336c:	607a      	str	r2, [r7, #4]
 800336e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003370:	f7ff ff40 	bl	80031f4 <__NVIC_GetPriorityGrouping>
 8003374:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003376:	687a      	ldr	r2, [r7, #4]
 8003378:	68b9      	ldr	r1, [r7, #8]
 800337a:	6978      	ldr	r0, [r7, #20]
 800337c:	f7ff ff90 	bl	80032a0 <NVIC_EncodePriority>
 8003380:	4602      	mov	r2, r0
 8003382:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003386:	4611      	mov	r1, r2
 8003388:	4618      	mov	r0, r3
 800338a:	f7ff ff5f 	bl	800324c <__NVIC_SetPriority>
}
 800338e:	bf00      	nop
 8003390:	3718      	adds	r7, #24
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}

08003396 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003396:	b580      	push	{r7, lr}
 8003398:	b082      	sub	sp, #8
 800339a:	af00      	add	r7, sp, #0
 800339c:	4603      	mov	r3, r0
 800339e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80033a4:	4618      	mov	r0, r3
 80033a6:	f7ff ff33 	bl	8003210 <__NVIC_EnableIRQ>
}
 80033aa:	bf00      	nop
 80033ac:	3708      	adds	r7, #8
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}

080033b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80033b2:	b580      	push	{r7, lr}
 80033b4:	b082      	sub	sp, #8
 80033b6:	af00      	add	r7, sp, #0
 80033b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f7ff ffa4 	bl	8003308 <SysTick_Config>
 80033c0:	4603      	mov	r3, r0
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	3708      	adds	r7, #8
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}
	...

080033cc <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80033cc:	b480      	push	{r7}
 80033ce:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 80033d0:	f3bf 8f5f 	dmb	sy
}
 80033d4:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80033d6:	4b07      	ldr	r3, [pc, #28]	@ (80033f4 <HAL_MPU_Disable+0x28>)
 80033d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033da:	4a06      	ldr	r2, [pc, #24]	@ (80033f4 <HAL_MPU_Disable+0x28>)
 80033dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033e0:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80033e2:	4b05      	ldr	r3, [pc, #20]	@ (80033f8 <HAL_MPU_Disable+0x2c>)
 80033e4:	2200      	movs	r2, #0
 80033e6:	605a      	str	r2, [r3, #4]
}
 80033e8:	bf00      	nop
 80033ea:	46bd      	mov	sp, r7
 80033ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f0:	4770      	bx	lr
 80033f2:	bf00      	nop
 80033f4:	e000ed00 	.word	0xe000ed00
 80033f8:	e000ed90 	.word	0xe000ed90

080033fc <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b083      	sub	sp, #12
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8003404:	4a0b      	ldr	r2, [pc, #44]	@ (8003434 <HAL_MPU_Enable+0x38>)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	f043 0301 	orr.w	r3, r3, #1
 800340c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800340e:	4b0a      	ldr	r3, [pc, #40]	@ (8003438 <HAL_MPU_Enable+0x3c>)
 8003410:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003412:	4a09      	ldr	r2, [pc, #36]	@ (8003438 <HAL_MPU_Enable+0x3c>)
 8003414:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003418:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800341a:	f3bf 8f4f 	dsb	sy
}
 800341e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003420:	f3bf 8f6f 	isb	sy
}
 8003424:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8003426:	bf00      	nop
 8003428:	370c      	adds	r7, #12
 800342a:	46bd      	mov	sp, r7
 800342c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003430:	4770      	bx	lr
 8003432:	bf00      	nop
 8003434:	e000ed90 	.word	0xe000ed90
 8003438:	e000ed00 	.word	0xe000ed00

0800343c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 800343c:	b480      	push	{r7}
 800343e:	b083      	sub	sp, #12
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	785a      	ldrb	r2, [r3, #1]
 8003448:	4b1b      	ldr	r3, [pc, #108]	@ (80034b8 <HAL_MPU_ConfigRegion+0x7c>)
 800344a:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 800344c:	4b1a      	ldr	r3, [pc, #104]	@ (80034b8 <HAL_MPU_ConfigRegion+0x7c>)
 800344e:	691b      	ldr	r3, [r3, #16]
 8003450:	4a19      	ldr	r2, [pc, #100]	@ (80034b8 <HAL_MPU_ConfigRegion+0x7c>)
 8003452:	f023 0301 	bic.w	r3, r3, #1
 8003456:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8003458:	4a17      	ldr	r2, [pc, #92]	@ (80034b8 <HAL_MPU_ConfigRegion+0x7c>)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	7b1b      	ldrb	r3, [r3, #12]
 8003464:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	7adb      	ldrb	r3, [r3, #11]
 800346a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800346c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	7a9b      	ldrb	r3, [r3, #10]
 8003472:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003474:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	7b5b      	ldrb	r3, [r3, #13]
 800347a:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800347c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	7b9b      	ldrb	r3, [r3, #14]
 8003482:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003484:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	7bdb      	ldrb	r3, [r3, #15]
 800348a:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800348c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	7a5b      	ldrb	r3, [r3, #9]
 8003492:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003494:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	7a1b      	ldrb	r3, [r3, #8]
 800349a:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800349c:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800349e:	687a      	ldr	r2, [r7, #4]
 80034a0:	7812      	ldrb	r2, [r2, #0]
 80034a2:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80034a4:	4a04      	ldr	r2, [pc, #16]	@ (80034b8 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80034a6:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80034a8:	6113      	str	r3, [r2, #16]
}
 80034aa:	bf00      	nop
 80034ac:	370c      	adds	r7, #12
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr
 80034b6:	bf00      	nop
 80034b8:	e000ed90 	.word	0xe000ed90

080034bc <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 80034bc:	b480      	push	{r7}
 80034be:	b087      	sub	sp, #28
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	60f8      	str	r0, [r7, #12]
 80034c4:	460b      	mov	r3, r1
 80034c6:	607a      	str	r2, [r7, #4]
 80034c8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80034ca:	2300      	movs	r3, #0
 80034cc:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d101      	bne.n	80034d8 <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	e00a      	b.n	80034ee <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 80034d8:	7afb      	ldrb	r3, [r7, #11]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d103      	bne.n	80034e6 <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	687a      	ldr	r2, [r7, #4]
 80034e2:	605a      	str	r2, [r3, #4]
      break;
 80034e4:	e002      	b.n	80034ec <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	75fb      	strb	r3, [r7, #23]
      break;
 80034ea:	bf00      	nop
  }

  return status;
 80034ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	371c      	adds	r7, #28
 80034f2:	46bd      	mov	sp, r7
 80034f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f8:	4770      	bx	lr

080034fa <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 80034fa:	b480      	push	{r7}
 80034fc:	b083      	sub	sp, #12
 80034fe:	af00      	add	r7, sp, #0
 8003500:	6078      	str	r0, [r7, #4]
 8003502:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d101      	bne.n	800350e <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	e003      	b.n	8003516 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	683a      	ldr	r2, [r7, #0]
 8003512:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8003514:	2300      	movs	r3, #0
  }
}
 8003516:	4618      	mov	r0, r3
 8003518:	370c      	adds	r7, #12
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr
	...

08003524 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b086      	sub	sp, #24
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	0c1b      	lsrs	r3, r3, #16
 8003532:	f003 0303 	and.w	r3, r3, #3
 8003536:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 031f 	and.w	r3, r3, #31
 8003540:	2201      	movs	r2, #1
 8003542:	fa02 f303 	lsl.w	r3, r2, r3
 8003546:	613b      	str	r3, [r7, #16]
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
  }
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	011a      	lsls	r2, r3, #4
 800354c:	4b0c      	ldr	r3, [pc, #48]	@ (8003580 <HAL_EXTI_IRQHandler+0x5c>)
 800354e:	4413      	add	r3, r2
 8003550:	60fb      	str	r3, [r7, #12]
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	693a      	ldr	r2, [r7, #16]
 8003558:	4013      	ands	r3, r2
 800355a:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d009      	beq.n	8003576 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	693a      	ldr	r2, [r7, #16]
 8003566:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d002      	beq.n	8003576 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	4798      	blx	r3
    }
  }
}
 8003576:	bf00      	nop
 8003578:	3718      	adds	r7, #24
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}
 800357e:	bf00      	nop
 8003580:	58000088 	.word	0x58000088

08003584 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8003584:	b480      	push	{r7}
 8003586:	b089      	sub	sp, #36	@ 0x24
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
 800358c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800358e:	2300      	movs	r3, #0
 8003590:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003592:	4b86      	ldr	r3, [pc, #536]	@ (80037ac <HAL_GPIO_Init+0x228>)
 8003594:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003596:	e18c      	b.n	80038b2 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	2101      	movs	r1, #1
 800359e:	69fb      	ldr	r3, [r7, #28]
 80035a0:	fa01 f303 	lsl.w	r3, r1, r3
 80035a4:	4013      	ands	r3, r2
 80035a6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	f000 817e 	beq.w	80038ac <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	f003 0303 	and.w	r3, r3, #3
 80035b8:	2b01      	cmp	r3, #1
 80035ba:	d005      	beq.n	80035c8 <HAL_GPIO_Init+0x44>
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	f003 0303 	and.w	r3, r3, #3
 80035c4:	2b02      	cmp	r3, #2
 80035c6:	d130      	bne.n	800362a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80035ce:	69fb      	ldr	r3, [r7, #28]
 80035d0:	005b      	lsls	r3, r3, #1
 80035d2:	2203      	movs	r2, #3
 80035d4:	fa02 f303 	lsl.w	r3, r2, r3
 80035d8:	43db      	mvns	r3, r3
 80035da:	69ba      	ldr	r2, [r7, #24]
 80035dc:	4013      	ands	r3, r2
 80035de:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	68da      	ldr	r2, [r3, #12]
 80035e4:	69fb      	ldr	r3, [r7, #28]
 80035e6:	005b      	lsls	r3, r3, #1
 80035e8:	fa02 f303 	lsl.w	r3, r2, r3
 80035ec:	69ba      	ldr	r2, [r7, #24]
 80035ee:	4313      	orrs	r3, r2
 80035f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	69ba      	ldr	r2, [r7, #24]
 80035f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80035fe:	2201      	movs	r2, #1
 8003600:	69fb      	ldr	r3, [r7, #28]
 8003602:	fa02 f303 	lsl.w	r3, r2, r3
 8003606:	43db      	mvns	r3, r3
 8003608:	69ba      	ldr	r2, [r7, #24]
 800360a:	4013      	ands	r3, r2
 800360c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	091b      	lsrs	r3, r3, #4
 8003614:	f003 0201 	and.w	r2, r3, #1
 8003618:	69fb      	ldr	r3, [r7, #28]
 800361a:	fa02 f303 	lsl.w	r3, r2, r3
 800361e:	69ba      	ldr	r2, [r7, #24]
 8003620:	4313      	orrs	r3, r2
 8003622:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	69ba      	ldr	r2, [r7, #24]
 8003628:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	f003 0303 	and.w	r3, r3, #3
 8003632:	2b03      	cmp	r3, #3
 8003634:	d017      	beq.n	8003666 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	68db      	ldr	r3, [r3, #12]
 800363a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800363c:	69fb      	ldr	r3, [r7, #28]
 800363e:	005b      	lsls	r3, r3, #1
 8003640:	2203      	movs	r2, #3
 8003642:	fa02 f303 	lsl.w	r3, r2, r3
 8003646:	43db      	mvns	r3, r3
 8003648:	69ba      	ldr	r2, [r7, #24]
 800364a:	4013      	ands	r3, r2
 800364c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	689a      	ldr	r2, [r3, #8]
 8003652:	69fb      	ldr	r3, [r7, #28]
 8003654:	005b      	lsls	r3, r3, #1
 8003656:	fa02 f303 	lsl.w	r3, r2, r3
 800365a:	69ba      	ldr	r2, [r7, #24]
 800365c:	4313      	orrs	r3, r2
 800365e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	69ba      	ldr	r2, [r7, #24]
 8003664:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	f003 0303 	and.w	r3, r3, #3
 800366e:	2b02      	cmp	r3, #2
 8003670:	d123      	bne.n	80036ba <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003672:	69fb      	ldr	r3, [r7, #28]
 8003674:	08da      	lsrs	r2, r3, #3
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	3208      	adds	r2, #8
 800367a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800367e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003680:	69fb      	ldr	r3, [r7, #28]
 8003682:	f003 0307 	and.w	r3, r3, #7
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	220f      	movs	r2, #15
 800368a:	fa02 f303 	lsl.w	r3, r2, r3
 800368e:	43db      	mvns	r3, r3
 8003690:	69ba      	ldr	r2, [r7, #24]
 8003692:	4013      	ands	r3, r2
 8003694:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	691a      	ldr	r2, [r3, #16]
 800369a:	69fb      	ldr	r3, [r7, #28]
 800369c:	f003 0307 	and.w	r3, r3, #7
 80036a0:	009b      	lsls	r3, r3, #2
 80036a2:	fa02 f303 	lsl.w	r3, r2, r3
 80036a6:	69ba      	ldr	r2, [r7, #24]
 80036a8:	4313      	orrs	r3, r2
 80036aa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80036ac:	69fb      	ldr	r3, [r7, #28]
 80036ae:	08da      	lsrs	r2, r3, #3
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	3208      	adds	r2, #8
 80036b4:	69b9      	ldr	r1, [r7, #24]
 80036b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80036c0:	69fb      	ldr	r3, [r7, #28]
 80036c2:	005b      	lsls	r3, r3, #1
 80036c4:	2203      	movs	r2, #3
 80036c6:	fa02 f303 	lsl.w	r3, r2, r3
 80036ca:	43db      	mvns	r3, r3
 80036cc:	69ba      	ldr	r2, [r7, #24]
 80036ce:	4013      	ands	r3, r2
 80036d0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	f003 0203 	and.w	r2, r3, #3
 80036da:	69fb      	ldr	r3, [r7, #28]
 80036dc:	005b      	lsls	r3, r3, #1
 80036de:	fa02 f303 	lsl.w	r3, r2, r3
 80036e2:	69ba      	ldr	r2, [r7, #24]
 80036e4:	4313      	orrs	r3, r2
 80036e6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	69ba      	ldr	r2, [r7, #24]
 80036ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	f000 80d8 	beq.w	80038ac <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036fc:	4b2c      	ldr	r3, [pc, #176]	@ (80037b0 <HAL_GPIO_Init+0x22c>)
 80036fe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003702:	4a2b      	ldr	r2, [pc, #172]	@ (80037b0 <HAL_GPIO_Init+0x22c>)
 8003704:	f043 0302 	orr.w	r3, r3, #2
 8003708:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800370c:	4b28      	ldr	r3, [pc, #160]	@ (80037b0 <HAL_GPIO_Init+0x22c>)
 800370e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003712:	f003 0302 	and.w	r3, r3, #2
 8003716:	60fb      	str	r3, [r7, #12]
 8003718:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800371a:	4a26      	ldr	r2, [pc, #152]	@ (80037b4 <HAL_GPIO_Init+0x230>)
 800371c:	69fb      	ldr	r3, [r7, #28]
 800371e:	089b      	lsrs	r3, r3, #2
 8003720:	3302      	adds	r3, #2
 8003722:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003726:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003728:	69fb      	ldr	r3, [r7, #28]
 800372a:	f003 0303 	and.w	r3, r3, #3
 800372e:	009b      	lsls	r3, r3, #2
 8003730:	220f      	movs	r2, #15
 8003732:	fa02 f303 	lsl.w	r3, r2, r3
 8003736:	43db      	mvns	r3, r3
 8003738:	69ba      	ldr	r2, [r7, #24]
 800373a:	4013      	ands	r3, r2
 800373c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	4a1d      	ldr	r2, [pc, #116]	@ (80037b8 <HAL_GPIO_Init+0x234>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d04a      	beq.n	80037dc <HAL_GPIO_Init+0x258>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	4a1c      	ldr	r2, [pc, #112]	@ (80037bc <HAL_GPIO_Init+0x238>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d02b      	beq.n	80037a6 <HAL_GPIO_Init+0x222>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	4a1b      	ldr	r2, [pc, #108]	@ (80037c0 <HAL_GPIO_Init+0x23c>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d025      	beq.n	80037a2 <HAL_GPIO_Init+0x21e>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	4a1a      	ldr	r2, [pc, #104]	@ (80037c4 <HAL_GPIO_Init+0x240>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d01f      	beq.n	800379e <HAL_GPIO_Init+0x21a>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	4a19      	ldr	r2, [pc, #100]	@ (80037c8 <HAL_GPIO_Init+0x244>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d019      	beq.n	800379a <HAL_GPIO_Init+0x216>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	4a18      	ldr	r2, [pc, #96]	@ (80037cc <HAL_GPIO_Init+0x248>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d013      	beq.n	8003796 <HAL_GPIO_Init+0x212>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	4a17      	ldr	r2, [pc, #92]	@ (80037d0 <HAL_GPIO_Init+0x24c>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d00d      	beq.n	8003792 <HAL_GPIO_Init+0x20e>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	4a16      	ldr	r2, [pc, #88]	@ (80037d4 <HAL_GPIO_Init+0x250>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d007      	beq.n	800378e <HAL_GPIO_Init+0x20a>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	4a15      	ldr	r2, [pc, #84]	@ (80037d8 <HAL_GPIO_Init+0x254>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d101      	bne.n	800378a <HAL_GPIO_Init+0x206>
 8003786:	2309      	movs	r3, #9
 8003788:	e029      	b.n	80037de <HAL_GPIO_Init+0x25a>
 800378a:	230a      	movs	r3, #10
 800378c:	e027      	b.n	80037de <HAL_GPIO_Init+0x25a>
 800378e:	2307      	movs	r3, #7
 8003790:	e025      	b.n	80037de <HAL_GPIO_Init+0x25a>
 8003792:	2306      	movs	r3, #6
 8003794:	e023      	b.n	80037de <HAL_GPIO_Init+0x25a>
 8003796:	2305      	movs	r3, #5
 8003798:	e021      	b.n	80037de <HAL_GPIO_Init+0x25a>
 800379a:	2304      	movs	r3, #4
 800379c:	e01f      	b.n	80037de <HAL_GPIO_Init+0x25a>
 800379e:	2303      	movs	r3, #3
 80037a0:	e01d      	b.n	80037de <HAL_GPIO_Init+0x25a>
 80037a2:	2302      	movs	r3, #2
 80037a4:	e01b      	b.n	80037de <HAL_GPIO_Init+0x25a>
 80037a6:	2301      	movs	r3, #1
 80037a8:	e019      	b.n	80037de <HAL_GPIO_Init+0x25a>
 80037aa:	bf00      	nop
 80037ac:	58000080 	.word	0x58000080
 80037b0:	58024400 	.word	0x58024400
 80037b4:	58000400 	.word	0x58000400
 80037b8:	58020000 	.word	0x58020000
 80037bc:	58020400 	.word	0x58020400
 80037c0:	58020800 	.word	0x58020800
 80037c4:	58020c00 	.word	0x58020c00
 80037c8:	58021000 	.word	0x58021000
 80037cc:	58021400 	.word	0x58021400
 80037d0:	58021800 	.word	0x58021800
 80037d4:	58021c00 	.word	0x58021c00
 80037d8:	58022400 	.word	0x58022400
 80037dc:	2300      	movs	r3, #0
 80037de:	69fa      	ldr	r2, [r7, #28]
 80037e0:	f002 0203 	and.w	r2, r2, #3
 80037e4:	0092      	lsls	r2, r2, #2
 80037e6:	4093      	lsls	r3, r2
 80037e8:	69ba      	ldr	r2, [r7, #24]
 80037ea:	4313      	orrs	r3, r2
 80037ec:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80037ee:	4938      	ldr	r1, [pc, #224]	@ (80038d0 <HAL_GPIO_Init+0x34c>)
 80037f0:	69fb      	ldr	r3, [r7, #28]
 80037f2:	089b      	lsrs	r3, r3, #2
 80037f4:	3302      	adds	r3, #2
 80037f6:	69ba      	ldr	r2, [r7, #24]
 80037f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80037fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	43db      	mvns	r3, r3
 8003808:	69ba      	ldr	r2, [r7, #24]
 800380a:	4013      	ands	r3, r2
 800380c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003816:	2b00      	cmp	r3, #0
 8003818:	d003      	beq.n	8003822 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800381a:	69ba      	ldr	r2, [r7, #24]
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	4313      	orrs	r3, r2
 8003820:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003822:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003826:	69bb      	ldr	r3, [r7, #24]
 8003828:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800382a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	43db      	mvns	r3, r3
 8003836:	69ba      	ldr	r2, [r7, #24]
 8003838:	4013      	ands	r3, r2
 800383a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003844:	2b00      	cmp	r3, #0
 8003846:	d003      	beq.n	8003850 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8003848:	69ba      	ldr	r2, [r7, #24]
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	4313      	orrs	r3, r2
 800384e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003850:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003854:	69bb      	ldr	r3, [r7, #24]
 8003856:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	43db      	mvns	r3, r3
 8003862:	69ba      	ldr	r2, [r7, #24]
 8003864:	4013      	ands	r3, r2
 8003866:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003870:	2b00      	cmp	r3, #0
 8003872:	d003      	beq.n	800387c <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8003874:	69ba      	ldr	r2, [r7, #24]
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	4313      	orrs	r3, r2
 800387a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	69ba      	ldr	r2, [r7, #24]
 8003880:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	43db      	mvns	r3, r3
 800388c:	69ba      	ldr	r2, [r7, #24]
 800388e:	4013      	ands	r3, r2
 8003890:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800389a:	2b00      	cmp	r3, #0
 800389c:	d003      	beq.n	80038a6 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800389e:	69ba      	ldr	r2, [r7, #24]
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	4313      	orrs	r3, r2
 80038a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	69ba      	ldr	r2, [r7, #24]
 80038aa:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80038ac:	69fb      	ldr	r3, [r7, #28]
 80038ae:	3301      	adds	r3, #1
 80038b0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	69fb      	ldr	r3, [r7, #28]
 80038b8:	fa22 f303 	lsr.w	r3, r2, r3
 80038bc:	2b00      	cmp	r3, #0
 80038be:	f47f ae6b 	bne.w	8003598 <HAL_GPIO_Init+0x14>
  }
}
 80038c2:	bf00      	nop
 80038c4:	bf00      	nop
 80038c6:	3724      	adds	r7, #36	@ 0x24
 80038c8:	46bd      	mov	sp, r7
 80038ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ce:	4770      	bx	lr
 80038d0:	58000400 	.word	0x58000400

080038d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b083      	sub	sp, #12
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
 80038dc:	460b      	mov	r3, r1
 80038de:	807b      	strh	r3, [r7, #2]
 80038e0:	4613      	mov	r3, r2
 80038e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80038e4:	787b      	ldrb	r3, [r7, #1]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d003      	beq.n	80038f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80038ea:	887a      	ldrh	r2, [r7, #2]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80038f0:	e003      	b.n	80038fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80038f2:	887b      	ldrh	r3, [r7, #2]
 80038f4:	041a      	lsls	r2, r3, #16
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	619a      	str	r2, [r3, #24]
}
 80038fa:	bf00      	nop
 80038fc:	370c      	adds	r7, #12
 80038fe:	46bd      	mov	sp, r7
 8003900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003904:	4770      	bx	lr
	...

08003908 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b084      	sub	sp, #16
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003910:	4b19      	ldr	r3, [pc, #100]	@ (8003978 <HAL_PWREx_ConfigSupply+0x70>)
 8003912:	68db      	ldr	r3, [r3, #12]
 8003914:	f003 0304 	and.w	r3, r3, #4
 8003918:	2b04      	cmp	r3, #4
 800391a:	d00a      	beq.n	8003932 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800391c:	4b16      	ldr	r3, [pc, #88]	@ (8003978 <HAL_PWREx_ConfigSupply+0x70>)
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	f003 0307 	and.w	r3, r3, #7
 8003924:	687a      	ldr	r2, [r7, #4]
 8003926:	429a      	cmp	r2, r3
 8003928:	d001      	beq.n	800392e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e01f      	b.n	800396e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800392e:	2300      	movs	r3, #0
 8003930:	e01d      	b.n	800396e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003932:	4b11      	ldr	r3, [pc, #68]	@ (8003978 <HAL_PWREx_ConfigSupply+0x70>)
 8003934:	68db      	ldr	r3, [r3, #12]
 8003936:	f023 0207 	bic.w	r2, r3, #7
 800393a:	490f      	ldr	r1, [pc, #60]	@ (8003978 <HAL_PWREx_ConfigSupply+0x70>)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	4313      	orrs	r3, r2
 8003940:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003942:	f7fd fe05 	bl	8001550 <HAL_GetTick>
 8003946:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003948:	e009      	b.n	800395e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800394a:	f7fd fe01 	bl	8001550 <HAL_GetTick>
 800394e:	4602      	mov	r2, r0
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	1ad3      	subs	r3, r2, r3
 8003954:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003958:	d901      	bls.n	800395e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e007      	b.n	800396e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800395e:	4b06      	ldr	r3, [pc, #24]	@ (8003978 <HAL_PWREx_ConfigSupply+0x70>)
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003966:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800396a:	d1ee      	bne.n	800394a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800396c:	2300      	movs	r3, #0
}
 800396e:	4618      	mov	r0, r3
 8003970:	3710      	adds	r7, #16
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}
 8003976:	bf00      	nop
 8003978:	58024800 	.word	0x58024800

0800397c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b08c      	sub	sp, #48	@ 0x30
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d101      	bne.n	800398e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e3c8      	b.n	8004120 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f003 0301 	and.w	r3, r3, #1
 8003996:	2b00      	cmp	r3, #0
 8003998:	f000 8087 	beq.w	8003aaa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800399c:	4b88      	ldr	r3, [pc, #544]	@ (8003bc0 <HAL_RCC_OscConfig+0x244>)
 800399e:	691b      	ldr	r3, [r3, #16]
 80039a0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80039a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80039a6:	4b86      	ldr	r3, [pc, #536]	@ (8003bc0 <HAL_RCC_OscConfig+0x244>)
 80039a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039aa:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80039ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039ae:	2b10      	cmp	r3, #16
 80039b0:	d007      	beq.n	80039c2 <HAL_RCC_OscConfig+0x46>
 80039b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039b4:	2b18      	cmp	r3, #24
 80039b6:	d110      	bne.n	80039da <HAL_RCC_OscConfig+0x5e>
 80039b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039ba:	f003 0303 	and.w	r3, r3, #3
 80039be:	2b02      	cmp	r3, #2
 80039c0:	d10b      	bne.n	80039da <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039c2:	4b7f      	ldr	r3, [pc, #508]	@ (8003bc0 <HAL_RCC_OscConfig+0x244>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d06c      	beq.n	8003aa8 <HAL_RCC_OscConfig+0x12c>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d168      	bne.n	8003aa8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	e3a2      	b.n	8004120 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039e2:	d106      	bne.n	80039f2 <HAL_RCC_OscConfig+0x76>
 80039e4:	4b76      	ldr	r3, [pc, #472]	@ (8003bc0 <HAL_RCC_OscConfig+0x244>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a75      	ldr	r2, [pc, #468]	@ (8003bc0 <HAL_RCC_OscConfig+0x244>)
 80039ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039ee:	6013      	str	r3, [r2, #0]
 80039f0:	e02e      	b.n	8003a50 <HAL_RCC_OscConfig+0xd4>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d10c      	bne.n	8003a14 <HAL_RCC_OscConfig+0x98>
 80039fa:	4b71      	ldr	r3, [pc, #452]	@ (8003bc0 <HAL_RCC_OscConfig+0x244>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a70      	ldr	r2, [pc, #448]	@ (8003bc0 <HAL_RCC_OscConfig+0x244>)
 8003a00:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a04:	6013      	str	r3, [r2, #0]
 8003a06:	4b6e      	ldr	r3, [pc, #440]	@ (8003bc0 <HAL_RCC_OscConfig+0x244>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a6d      	ldr	r2, [pc, #436]	@ (8003bc0 <HAL_RCC_OscConfig+0x244>)
 8003a0c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a10:	6013      	str	r3, [r2, #0]
 8003a12:	e01d      	b.n	8003a50 <HAL_RCC_OscConfig+0xd4>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003a1c:	d10c      	bne.n	8003a38 <HAL_RCC_OscConfig+0xbc>
 8003a1e:	4b68      	ldr	r3, [pc, #416]	@ (8003bc0 <HAL_RCC_OscConfig+0x244>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a67      	ldr	r2, [pc, #412]	@ (8003bc0 <HAL_RCC_OscConfig+0x244>)
 8003a24:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003a28:	6013      	str	r3, [r2, #0]
 8003a2a:	4b65      	ldr	r3, [pc, #404]	@ (8003bc0 <HAL_RCC_OscConfig+0x244>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a64      	ldr	r2, [pc, #400]	@ (8003bc0 <HAL_RCC_OscConfig+0x244>)
 8003a30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a34:	6013      	str	r3, [r2, #0]
 8003a36:	e00b      	b.n	8003a50 <HAL_RCC_OscConfig+0xd4>
 8003a38:	4b61      	ldr	r3, [pc, #388]	@ (8003bc0 <HAL_RCC_OscConfig+0x244>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a60      	ldr	r2, [pc, #384]	@ (8003bc0 <HAL_RCC_OscConfig+0x244>)
 8003a3e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a42:	6013      	str	r3, [r2, #0]
 8003a44:	4b5e      	ldr	r3, [pc, #376]	@ (8003bc0 <HAL_RCC_OscConfig+0x244>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a5d      	ldr	r2, [pc, #372]	@ (8003bc0 <HAL_RCC_OscConfig+0x244>)
 8003a4a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d013      	beq.n	8003a80 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a58:	f7fd fd7a 	bl	8001550 <HAL_GetTick>
 8003a5c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003a5e:	e008      	b.n	8003a72 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a60:	f7fd fd76 	bl	8001550 <HAL_GetTick>
 8003a64:	4602      	mov	r2, r0
 8003a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a68:	1ad3      	subs	r3, r2, r3
 8003a6a:	2b64      	cmp	r3, #100	@ 0x64
 8003a6c:	d901      	bls.n	8003a72 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003a6e:	2303      	movs	r3, #3
 8003a70:	e356      	b.n	8004120 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003a72:	4b53      	ldr	r3, [pc, #332]	@ (8003bc0 <HAL_RCC_OscConfig+0x244>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d0f0      	beq.n	8003a60 <HAL_RCC_OscConfig+0xe4>
 8003a7e:	e014      	b.n	8003aaa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a80:	f7fd fd66 	bl	8001550 <HAL_GetTick>
 8003a84:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003a86:	e008      	b.n	8003a9a <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a88:	f7fd fd62 	bl	8001550 <HAL_GetTick>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a90:	1ad3      	subs	r3, r2, r3
 8003a92:	2b64      	cmp	r3, #100	@ 0x64
 8003a94:	d901      	bls.n	8003a9a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003a96:	2303      	movs	r3, #3
 8003a98:	e342      	b.n	8004120 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003a9a:	4b49      	ldr	r3, [pc, #292]	@ (8003bc0 <HAL_RCC_OscConfig+0x244>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d1f0      	bne.n	8003a88 <HAL_RCC_OscConfig+0x10c>
 8003aa6:	e000      	b.n	8003aaa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003aa8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 0302 	and.w	r3, r3, #2
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	f000 808c 	beq.w	8003bd0 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ab8:	4b41      	ldr	r3, [pc, #260]	@ (8003bc0 <HAL_RCC_OscConfig+0x244>)
 8003aba:	691b      	ldr	r3, [r3, #16]
 8003abc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003ac0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003ac2:	4b3f      	ldr	r3, [pc, #252]	@ (8003bc0 <HAL_RCC_OscConfig+0x244>)
 8003ac4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ac6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003ac8:	6a3b      	ldr	r3, [r7, #32]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d007      	beq.n	8003ade <HAL_RCC_OscConfig+0x162>
 8003ace:	6a3b      	ldr	r3, [r7, #32]
 8003ad0:	2b18      	cmp	r3, #24
 8003ad2:	d137      	bne.n	8003b44 <HAL_RCC_OscConfig+0x1c8>
 8003ad4:	69fb      	ldr	r3, [r7, #28]
 8003ad6:	f003 0303 	and.w	r3, r3, #3
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d132      	bne.n	8003b44 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ade:	4b38      	ldr	r3, [pc, #224]	@ (8003bc0 <HAL_RCC_OscConfig+0x244>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 0304 	and.w	r3, r3, #4
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d005      	beq.n	8003af6 <HAL_RCC_OscConfig+0x17a>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	68db      	ldr	r3, [r3, #12]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d101      	bne.n	8003af6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	e314      	b.n	8004120 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003af6:	4b32      	ldr	r3, [pc, #200]	@ (8003bc0 <HAL_RCC_OscConfig+0x244>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f023 0219 	bic.w	r2, r3, #25
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	68db      	ldr	r3, [r3, #12]
 8003b02:	492f      	ldr	r1, [pc, #188]	@ (8003bc0 <HAL_RCC_OscConfig+0x244>)
 8003b04:	4313      	orrs	r3, r2
 8003b06:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b08:	f7fd fd22 	bl	8001550 <HAL_GetTick>
 8003b0c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b0e:	e008      	b.n	8003b22 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b10:	f7fd fd1e 	bl	8001550 <HAL_GetTick>
 8003b14:	4602      	mov	r2, r0
 8003b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b18:	1ad3      	subs	r3, r2, r3
 8003b1a:	2b02      	cmp	r3, #2
 8003b1c:	d901      	bls.n	8003b22 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8003b1e:	2303      	movs	r3, #3
 8003b20:	e2fe      	b.n	8004120 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b22:	4b27      	ldr	r3, [pc, #156]	@ (8003bc0 <HAL_RCC_OscConfig+0x244>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 0304 	and.w	r3, r3, #4
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d0f0      	beq.n	8003b10 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b2e:	4b24      	ldr	r3, [pc, #144]	@ (8003bc0 <HAL_RCC_OscConfig+0x244>)
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	691b      	ldr	r3, [r3, #16]
 8003b3a:	061b      	lsls	r3, r3, #24
 8003b3c:	4920      	ldr	r1, [pc, #128]	@ (8003bc0 <HAL_RCC_OscConfig+0x244>)
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b42:	e045      	b.n	8003bd0 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	68db      	ldr	r3, [r3, #12]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d026      	beq.n	8003b9a <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003b4c:	4b1c      	ldr	r3, [pc, #112]	@ (8003bc0 <HAL_RCC_OscConfig+0x244>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f023 0219 	bic.w	r2, r3, #25
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	68db      	ldr	r3, [r3, #12]
 8003b58:	4919      	ldr	r1, [pc, #100]	@ (8003bc0 <HAL_RCC_OscConfig+0x244>)
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b5e:	f7fd fcf7 	bl	8001550 <HAL_GetTick>
 8003b62:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b64:	e008      	b.n	8003b78 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b66:	f7fd fcf3 	bl	8001550 <HAL_GetTick>
 8003b6a:	4602      	mov	r2, r0
 8003b6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b6e:	1ad3      	subs	r3, r2, r3
 8003b70:	2b02      	cmp	r3, #2
 8003b72:	d901      	bls.n	8003b78 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003b74:	2303      	movs	r3, #3
 8003b76:	e2d3      	b.n	8004120 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b78:	4b11      	ldr	r3, [pc, #68]	@ (8003bc0 <HAL_RCC_OscConfig+0x244>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f003 0304 	and.w	r3, r3, #4
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d0f0      	beq.n	8003b66 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b84:	4b0e      	ldr	r3, [pc, #56]	@ (8003bc0 <HAL_RCC_OscConfig+0x244>)
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	691b      	ldr	r3, [r3, #16]
 8003b90:	061b      	lsls	r3, r3, #24
 8003b92:	490b      	ldr	r1, [pc, #44]	@ (8003bc0 <HAL_RCC_OscConfig+0x244>)
 8003b94:	4313      	orrs	r3, r2
 8003b96:	604b      	str	r3, [r1, #4]
 8003b98:	e01a      	b.n	8003bd0 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b9a:	4b09      	ldr	r3, [pc, #36]	@ (8003bc0 <HAL_RCC_OscConfig+0x244>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a08      	ldr	r2, [pc, #32]	@ (8003bc0 <HAL_RCC_OscConfig+0x244>)
 8003ba0:	f023 0301 	bic.w	r3, r3, #1
 8003ba4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ba6:	f7fd fcd3 	bl	8001550 <HAL_GetTick>
 8003baa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003bac:	e00a      	b.n	8003bc4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bae:	f7fd fccf 	bl	8001550 <HAL_GetTick>
 8003bb2:	4602      	mov	r2, r0
 8003bb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bb6:	1ad3      	subs	r3, r2, r3
 8003bb8:	2b02      	cmp	r3, #2
 8003bba:	d903      	bls.n	8003bc4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003bbc:	2303      	movs	r3, #3
 8003bbe:	e2af      	b.n	8004120 <HAL_RCC_OscConfig+0x7a4>
 8003bc0:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003bc4:	4b96      	ldr	r3, [pc, #600]	@ (8003e20 <HAL_RCC_OscConfig+0x4a4>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 0304 	and.w	r3, r3, #4
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d1ee      	bne.n	8003bae <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f003 0310 	and.w	r3, r3, #16
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d06a      	beq.n	8003cb2 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003bdc:	4b90      	ldr	r3, [pc, #576]	@ (8003e20 <HAL_RCC_OscConfig+0x4a4>)
 8003bde:	691b      	ldr	r3, [r3, #16]
 8003be0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003be4:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003be6:	4b8e      	ldr	r3, [pc, #568]	@ (8003e20 <HAL_RCC_OscConfig+0x4a4>)
 8003be8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bea:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003bec:	69bb      	ldr	r3, [r7, #24]
 8003bee:	2b08      	cmp	r3, #8
 8003bf0:	d007      	beq.n	8003c02 <HAL_RCC_OscConfig+0x286>
 8003bf2:	69bb      	ldr	r3, [r7, #24]
 8003bf4:	2b18      	cmp	r3, #24
 8003bf6:	d11b      	bne.n	8003c30 <HAL_RCC_OscConfig+0x2b4>
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	f003 0303 	and.w	r3, r3, #3
 8003bfe:	2b01      	cmp	r3, #1
 8003c00:	d116      	bne.n	8003c30 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003c02:	4b87      	ldr	r3, [pc, #540]	@ (8003e20 <HAL_RCC_OscConfig+0x4a4>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d005      	beq.n	8003c1a <HAL_RCC_OscConfig+0x29e>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	69db      	ldr	r3, [r3, #28]
 8003c12:	2b80      	cmp	r3, #128	@ 0x80
 8003c14:	d001      	beq.n	8003c1a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e282      	b.n	8004120 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003c1a:	4b81      	ldr	r3, [pc, #516]	@ (8003e20 <HAL_RCC_OscConfig+0x4a4>)
 8003c1c:	68db      	ldr	r3, [r3, #12]
 8003c1e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6a1b      	ldr	r3, [r3, #32]
 8003c26:	061b      	lsls	r3, r3, #24
 8003c28:	497d      	ldr	r1, [pc, #500]	@ (8003e20 <HAL_RCC_OscConfig+0x4a4>)
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003c2e:	e040      	b.n	8003cb2 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	69db      	ldr	r3, [r3, #28]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d023      	beq.n	8003c80 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003c38:	4b79      	ldr	r3, [pc, #484]	@ (8003e20 <HAL_RCC_OscConfig+0x4a4>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a78      	ldr	r2, [pc, #480]	@ (8003e20 <HAL_RCC_OscConfig+0x4a4>)
 8003c3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c44:	f7fd fc84 	bl	8001550 <HAL_GetTick>
 8003c48:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003c4a:	e008      	b.n	8003c5e <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003c4c:	f7fd fc80 	bl	8001550 <HAL_GetTick>
 8003c50:	4602      	mov	r2, r0
 8003c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c54:	1ad3      	subs	r3, r2, r3
 8003c56:	2b02      	cmp	r3, #2
 8003c58:	d901      	bls.n	8003c5e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003c5a:	2303      	movs	r3, #3
 8003c5c:	e260      	b.n	8004120 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003c5e:	4b70      	ldr	r3, [pc, #448]	@ (8003e20 <HAL_RCC_OscConfig+0x4a4>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d0f0      	beq.n	8003c4c <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003c6a:	4b6d      	ldr	r3, [pc, #436]	@ (8003e20 <HAL_RCC_OscConfig+0x4a4>)
 8003c6c:	68db      	ldr	r3, [r3, #12]
 8003c6e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6a1b      	ldr	r3, [r3, #32]
 8003c76:	061b      	lsls	r3, r3, #24
 8003c78:	4969      	ldr	r1, [pc, #420]	@ (8003e20 <HAL_RCC_OscConfig+0x4a4>)
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	60cb      	str	r3, [r1, #12]
 8003c7e:	e018      	b.n	8003cb2 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003c80:	4b67      	ldr	r3, [pc, #412]	@ (8003e20 <HAL_RCC_OscConfig+0x4a4>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a66      	ldr	r2, [pc, #408]	@ (8003e20 <HAL_RCC_OscConfig+0x4a4>)
 8003c86:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003c8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c8c:	f7fd fc60 	bl	8001550 <HAL_GetTick>
 8003c90:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003c92:	e008      	b.n	8003ca6 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003c94:	f7fd fc5c 	bl	8001550 <HAL_GetTick>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c9c:	1ad3      	subs	r3, r2, r3
 8003c9e:	2b02      	cmp	r3, #2
 8003ca0:	d901      	bls.n	8003ca6 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8003ca2:	2303      	movs	r3, #3
 8003ca4:	e23c      	b.n	8004120 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003ca6:	4b5e      	ldr	r3, [pc, #376]	@ (8003e20 <HAL_RCC_OscConfig+0x4a4>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d1f0      	bne.n	8003c94 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 0308 	and.w	r3, r3, #8
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d036      	beq.n	8003d2c <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	695b      	ldr	r3, [r3, #20]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d019      	beq.n	8003cfa <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cc6:	4b56      	ldr	r3, [pc, #344]	@ (8003e20 <HAL_RCC_OscConfig+0x4a4>)
 8003cc8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003cca:	4a55      	ldr	r2, [pc, #340]	@ (8003e20 <HAL_RCC_OscConfig+0x4a4>)
 8003ccc:	f043 0301 	orr.w	r3, r3, #1
 8003cd0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cd2:	f7fd fc3d 	bl	8001550 <HAL_GetTick>
 8003cd6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003cd8:	e008      	b.n	8003cec <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cda:	f7fd fc39 	bl	8001550 <HAL_GetTick>
 8003cde:	4602      	mov	r2, r0
 8003ce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ce2:	1ad3      	subs	r3, r2, r3
 8003ce4:	2b02      	cmp	r3, #2
 8003ce6:	d901      	bls.n	8003cec <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8003ce8:	2303      	movs	r3, #3
 8003cea:	e219      	b.n	8004120 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003cec:	4b4c      	ldr	r3, [pc, #304]	@ (8003e20 <HAL_RCC_OscConfig+0x4a4>)
 8003cee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003cf0:	f003 0302 	and.w	r3, r3, #2
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d0f0      	beq.n	8003cda <HAL_RCC_OscConfig+0x35e>
 8003cf8:	e018      	b.n	8003d2c <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003cfa:	4b49      	ldr	r3, [pc, #292]	@ (8003e20 <HAL_RCC_OscConfig+0x4a4>)
 8003cfc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003cfe:	4a48      	ldr	r2, [pc, #288]	@ (8003e20 <HAL_RCC_OscConfig+0x4a4>)
 8003d00:	f023 0301 	bic.w	r3, r3, #1
 8003d04:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d06:	f7fd fc23 	bl	8001550 <HAL_GetTick>
 8003d0a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003d0c:	e008      	b.n	8003d20 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d0e:	f7fd fc1f 	bl	8001550 <HAL_GetTick>
 8003d12:	4602      	mov	r2, r0
 8003d14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d16:	1ad3      	subs	r3, r2, r3
 8003d18:	2b02      	cmp	r3, #2
 8003d1a:	d901      	bls.n	8003d20 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8003d1c:	2303      	movs	r3, #3
 8003d1e:	e1ff      	b.n	8004120 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003d20:	4b3f      	ldr	r3, [pc, #252]	@ (8003e20 <HAL_RCC_OscConfig+0x4a4>)
 8003d22:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d24:	f003 0302 	and.w	r3, r3, #2
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d1f0      	bne.n	8003d0e <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f003 0320 	and.w	r3, r3, #32
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d036      	beq.n	8003da6 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	699b      	ldr	r3, [r3, #24]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d019      	beq.n	8003d74 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003d40:	4b37      	ldr	r3, [pc, #220]	@ (8003e20 <HAL_RCC_OscConfig+0x4a4>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a36      	ldr	r2, [pc, #216]	@ (8003e20 <HAL_RCC_OscConfig+0x4a4>)
 8003d46:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003d4a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003d4c:	f7fd fc00 	bl	8001550 <HAL_GetTick>
 8003d50:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003d52:	e008      	b.n	8003d66 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d54:	f7fd fbfc 	bl	8001550 <HAL_GetTick>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d5c:	1ad3      	subs	r3, r2, r3
 8003d5e:	2b02      	cmp	r3, #2
 8003d60:	d901      	bls.n	8003d66 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8003d62:	2303      	movs	r3, #3
 8003d64:	e1dc      	b.n	8004120 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003d66:	4b2e      	ldr	r3, [pc, #184]	@ (8003e20 <HAL_RCC_OscConfig+0x4a4>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d0f0      	beq.n	8003d54 <HAL_RCC_OscConfig+0x3d8>
 8003d72:	e018      	b.n	8003da6 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003d74:	4b2a      	ldr	r3, [pc, #168]	@ (8003e20 <HAL_RCC_OscConfig+0x4a4>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a29      	ldr	r2, [pc, #164]	@ (8003e20 <HAL_RCC_OscConfig+0x4a4>)
 8003d7a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003d7e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003d80:	f7fd fbe6 	bl	8001550 <HAL_GetTick>
 8003d84:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003d86:	e008      	b.n	8003d9a <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d88:	f7fd fbe2 	bl	8001550 <HAL_GetTick>
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d90:	1ad3      	subs	r3, r2, r3
 8003d92:	2b02      	cmp	r3, #2
 8003d94:	d901      	bls.n	8003d9a <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8003d96:	2303      	movs	r3, #3
 8003d98:	e1c2      	b.n	8004120 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003d9a:	4b21      	ldr	r3, [pc, #132]	@ (8003e20 <HAL_RCC_OscConfig+0x4a4>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d1f0      	bne.n	8003d88 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f003 0304 	and.w	r3, r3, #4
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	f000 8086 	beq.w	8003ec0 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003db4:	4b1b      	ldr	r3, [pc, #108]	@ (8003e24 <HAL_RCC_OscConfig+0x4a8>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a1a      	ldr	r2, [pc, #104]	@ (8003e24 <HAL_RCC_OscConfig+0x4a8>)
 8003dba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003dbe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003dc0:	f7fd fbc6 	bl	8001550 <HAL_GetTick>
 8003dc4:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003dc6:	e008      	b.n	8003dda <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dc8:	f7fd fbc2 	bl	8001550 <HAL_GetTick>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dd0:	1ad3      	subs	r3, r2, r3
 8003dd2:	2b64      	cmp	r3, #100	@ 0x64
 8003dd4:	d901      	bls.n	8003dda <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8003dd6:	2303      	movs	r3, #3
 8003dd8:	e1a2      	b.n	8004120 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003dda:	4b12      	ldr	r3, [pc, #72]	@ (8003e24 <HAL_RCC_OscConfig+0x4a8>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d0f0      	beq.n	8003dc8 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	d106      	bne.n	8003dfc <HAL_RCC_OscConfig+0x480>
 8003dee:	4b0c      	ldr	r3, [pc, #48]	@ (8003e20 <HAL_RCC_OscConfig+0x4a4>)
 8003df0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003df2:	4a0b      	ldr	r2, [pc, #44]	@ (8003e20 <HAL_RCC_OscConfig+0x4a4>)
 8003df4:	f043 0301 	orr.w	r3, r3, #1
 8003df8:	6713      	str	r3, [r2, #112]	@ 0x70
 8003dfa:	e032      	b.n	8003e62 <HAL_RCC_OscConfig+0x4e6>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d111      	bne.n	8003e28 <HAL_RCC_OscConfig+0x4ac>
 8003e04:	4b06      	ldr	r3, [pc, #24]	@ (8003e20 <HAL_RCC_OscConfig+0x4a4>)
 8003e06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e08:	4a05      	ldr	r2, [pc, #20]	@ (8003e20 <HAL_RCC_OscConfig+0x4a4>)
 8003e0a:	f023 0301 	bic.w	r3, r3, #1
 8003e0e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e10:	4b03      	ldr	r3, [pc, #12]	@ (8003e20 <HAL_RCC_OscConfig+0x4a4>)
 8003e12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e14:	4a02      	ldr	r2, [pc, #8]	@ (8003e20 <HAL_RCC_OscConfig+0x4a4>)
 8003e16:	f023 0304 	bic.w	r3, r3, #4
 8003e1a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e1c:	e021      	b.n	8003e62 <HAL_RCC_OscConfig+0x4e6>
 8003e1e:	bf00      	nop
 8003e20:	58024400 	.word	0x58024400
 8003e24:	58024800 	.word	0x58024800
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	2b05      	cmp	r3, #5
 8003e2e:	d10c      	bne.n	8003e4a <HAL_RCC_OscConfig+0x4ce>
 8003e30:	4b83      	ldr	r3, [pc, #524]	@ (8004040 <HAL_RCC_OscConfig+0x6c4>)
 8003e32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e34:	4a82      	ldr	r2, [pc, #520]	@ (8004040 <HAL_RCC_OscConfig+0x6c4>)
 8003e36:	f043 0304 	orr.w	r3, r3, #4
 8003e3a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e3c:	4b80      	ldr	r3, [pc, #512]	@ (8004040 <HAL_RCC_OscConfig+0x6c4>)
 8003e3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e40:	4a7f      	ldr	r2, [pc, #508]	@ (8004040 <HAL_RCC_OscConfig+0x6c4>)
 8003e42:	f043 0301 	orr.w	r3, r3, #1
 8003e46:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e48:	e00b      	b.n	8003e62 <HAL_RCC_OscConfig+0x4e6>
 8003e4a:	4b7d      	ldr	r3, [pc, #500]	@ (8004040 <HAL_RCC_OscConfig+0x6c4>)
 8003e4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e4e:	4a7c      	ldr	r2, [pc, #496]	@ (8004040 <HAL_RCC_OscConfig+0x6c4>)
 8003e50:	f023 0301 	bic.w	r3, r3, #1
 8003e54:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e56:	4b7a      	ldr	r3, [pc, #488]	@ (8004040 <HAL_RCC_OscConfig+0x6c4>)
 8003e58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e5a:	4a79      	ldr	r2, [pc, #484]	@ (8004040 <HAL_RCC_OscConfig+0x6c4>)
 8003e5c:	f023 0304 	bic.w	r3, r3, #4
 8003e60:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d015      	beq.n	8003e96 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e6a:	f7fd fb71 	bl	8001550 <HAL_GetTick>
 8003e6e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e70:	e00a      	b.n	8003e88 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e72:	f7fd fb6d 	bl	8001550 <HAL_GetTick>
 8003e76:	4602      	mov	r2, r0
 8003e78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e7a:	1ad3      	subs	r3, r2, r3
 8003e7c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d901      	bls.n	8003e88 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8003e84:	2303      	movs	r3, #3
 8003e86:	e14b      	b.n	8004120 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e88:	4b6d      	ldr	r3, [pc, #436]	@ (8004040 <HAL_RCC_OscConfig+0x6c4>)
 8003e8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e8c:	f003 0302 	and.w	r3, r3, #2
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d0ee      	beq.n	8003e72 <HAL_RCC_OscConfig+0x4f6>
 8003e94:	e014      	b.n	8003ec0 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e96:	f7fd fb5b 	bl	8001550 <HAL_GetTick>
 8003e9a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003e9c:	e00a      	b.n	8003eb4 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e9e:	f7fd fb57 	bl	8001550 <HAL_GetTick>
 8003ea2:	4602      	mov	r2, r0
 8003ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ea6:	1ad3      	subs	r3, r2, r3
 8003ea8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d901      	bls.n	8003eb4 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8003eb0:	2303      	movs	r3, #3
 8003eb2:	e135      	b.n	8004120 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003eb4:	4b62      	ldr	r3, [pc, #392]	@ (8004040 <HAL_RCC_OscConfig+0x6c4>)
 8003eb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003eb8:	f003 0302 	and.w	r3, r3, #2
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d1ee      	bne.n	8003e9e <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	f000 812a 	beq.w	800411e <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003eca:	4b5d      	ldr	r3, [pc, #372]	@ (8004040 <HAL_RCC_OscConfig+0x6c4>)
 8003ecc:	691b      	ldr	r3, [r3, #16]
 8003ece:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003ed2:	2b18      	cmp	r3, #24
 8003ed4:	f000 80ba 	beq.w	800404c <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003edc:	2b02      	cmp	r3, #2
 8003ede:	f040 8095 	bne.w	800400c <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ee2:	4b57      	ldr	r3, [pc, #348]	@ (8004040 <HAL_RCC_OscConfig+0x6c4>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a56      	ldr	r2, [pc, #344]	@ (8004040 <HAL_RCC_OscConfig+0x6c4>)
 8003ee8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003eec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eee:	f7fd fb2f 	bl	8001550 <HAL_GetTick>
 8003ef2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003ef4:	e008      	b.n	8003f08 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ef6:	f7fd fb2b 	bl	8001550 <HAL_GetTick>
 8003efa:	4602      	mov	r2, r0
 8003efc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003efe:	1ad3      	subs	r3, r2, r3
 8003f00:	2b02      	cmp	r3, #2
 8003f02:	d901      	bls.n	8003f08 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8003f04:	2303      	movs	r3, #3
 8003f06:	e10b      	b.n	8004120 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003f08:	4b4d      	ldr	r3, [pc, #308]	@ (8004040 <HAL_RCC_OscConfig+0x6c4>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d1f0      	bne.n	8003ef6 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f14:	4b4a      	ldr	r3, [pc, #296]	@ (8004040 <HAL_RCC_OscConfig+0x6c4>)
 8003f16:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003f18:	4b4a      	ldr	r3, [pc, #296]	@ (8004044 <HAL_RCC_OscConfig+0x6c8>)
 8003f1a:	4013      	ands	r3, r2
 8003f1c:	687a      	ldr	r2, [r7, #4]
 8003f1e:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8003f20:	687a      	ldr	r2, [r7, #4]
 8003f22:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003f24:	0112      	lsls	r2, r2, #4
 8003f26:	430a      	orrs	r2, r1
 8003f28:	4945      	ldr	r1, [pc, #276]	@ (8004040 <HAL_RCC_OscConfig+0x6c4>)
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	628b      	str	r3, [r1, #40]	@ 0x28
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f32:	3b01      	subs	r3, #1
 8003f34:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f3c:	3b01      	subs	r3, #1
 8003f3e:	025b      	lsls	r3, r3, #9
 8003f40:	b29b      	uxth	r3, r3
 8003f42:	431a      	orrs	r2, r3
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f48:	3b01      	subs	r3, #1
 8003f4a:	041b      	lsls	r3, r3, #16
 8003f4c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003f50:	431a      	orrs	r2, r3
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f56:	3b01      	subs	r3, #1
 8003f58:	061b      	lsls	r3, r3, #24
 8003f5a:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003f5e:	4938      	ldr	r1, [pc, #224]	@ (8004040 <HAL_RCC_OscConfig+0x6c4>)
 8003f60:	4313      	orrs	r3, r2
 8003f62:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003f64:	4b36      	ldr	r3, [pc, #216]	@ (8004040 <HAL_RCC_OscConfig+0x6c4>)
 8003f66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f68:	4a35      	ldr	r2, [pc, #212]	@ (8004040 <HAL_RCC_OscConfig+0x6c4>)
 8003f6a:	f023 0301 	bic.w	r3, r3, #1
 8003f6e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003f70:	4b33      	ldr	r3, [pc, #204]	@ (8004040 <HAL_RCC_OscConfig+0x6c4>)
 8003f72:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003f74:	4b34      	ldr	r3, [pc, #208]	@ (8004048 <HAL_RCC_OscConfig+0x6cc>)
 8003f76:	4013      	ands	r3, r2
 8003f78:	687a      	ldr	r2, [r7, #4]
 8003f7a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003f7c:	00d2      	lsls	r2, r2, #3
 8003f7e:	4930      	ldr	r1, [pc, #192]	@ (8004040 <HAL_RCC_OscConfig+0x6c4>)
 8003f80:	4313      	orrs	r3, r2
 8003f82:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003f84:	4b2e      	ldr	r3, [pc, #184]	@ (8004040 <HAL_RCC_OscConfig+0x6c4>)
 8003f86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f88:	f023 020c 	bic.w	r2, r3, #12
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f90:	492b      	ldr	r1, [pc, #172]	@ (8004040 <HAL_RCC_OscConfig+0x6c4>)
 8003f92:	4313      	orrs	r3, r2
 8003f94:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003f96:	4b2a      	ldr	r3, [pc, #168]	@ (8004040 <HAL_RCC_OscConfig+0x6c4>)
 8003f98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f9a:	f023 0202 	bic.w	r2, r3, #2
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fa2:	4927      	ldr	r1, [pc, #156]	@ (8004040 <HAL_RCC_OscConfig+0x6c4>)
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003fa8:	4b25      	ldr	r3, [pc, #148]	@ (8004040 <HAL_RCC_OscConfig+0x6c4>)
 8003faa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fac:	4a24      	ldr	r2, [pc, #144]	@ (8004040 <HAL_RCC_OscConfig+0x6c4>)
 8003fae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003fb2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003fb4:	4b22      	ldr	r3, [pc, #136]	@ (8004040 <HAL_RCC_OscConfig+0x6c4>)
 8003fb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fb8:	4a21      	ldr	r2, [pc, #132]	@ (8004040 <HAL_RCC_OscConfig+0x6c4>)
 8003fba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003fbe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003fc0:	4b1f      	ldr	r3, [pc, #124]	@ (8004040 <HAL_RCC_OscConfig+0x6c4>)
 8003fc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fc4:	4a1e      	ldr	r2, [pc, #120]	@ (8004040 <HAL_RCC_OscConfig+0x6c4>)
 8003fc6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003fca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003fcc:	4b1c      	ldr	r3, [pc, #112]	@ (8004040 <HAL_RCC_OscConfig+0x6c4>)
 8003fce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fd0:	4a1b      	ldr	r2, [pc, #108]	@ (8004040 <HAL_RCC_OscConfig+0x6c4>)
 8003fd2:	f043 0301 	orr.w	r3, r3, #1
 8003fd6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fd8:	4b19      	ldr	r3, [pc, #100]	@ (8004040 <HAL_RCC_OscConfig+0x6c4>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a18      	ldr	r2, [pc, #96]	@ (8004040 <HAL_RCC_OscConfig+0x6c4>)
 8003fde:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003fe2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fe4:	f7fd fab4 	bl	8001550 <HAL_GetTick>
 8003fe8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003fea:	e008      	b.n	8003ffe <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fec:	f7fd fab0 	bl	8001550 <HAL_GetTick>
 8003ff0:	4602      	mov	r2, r0
 8003ff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ff4:	1ad3      	subs	r3, r2, r3
 8003ff6:	2b02      	cmp	r3, #2
 8003ff8:	d901      	bls.n	8003ffe <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8003ffa:	2303      	movs	r3, #3
 8003ffc:	e090      	b.n	8004120 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003ffe:	4b10      	ldr	r3, [pc, #64]	@ (8004040 <HAL_RCC_OscConfig+0x6c4>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004006:	2b00      	cmp	r3, #0
 8004008:	d0f0      	beq.n	8003fec <HAL_RCC_OscConfig+0x670>
 800400a:	e088      	b.n	800411e <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800400c:	4b0c      	ldr	r3, [pc, #48]	@ (8004040 <HAL_RCC_OscConfig+0x6c4>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a0b      	ldr	r2, [pc, #44]	@ (8004040 <HAL_RCC_OscConfig+0x6c4>)
 8004012:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004016:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004018:	f7fd fa9a 	bl	8001550 <HAL_GetTick>
 800401c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800401e:	e008      	b.n	8004032 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004020:	f7fd fa96 	bl	8001550 <HAL_GetTick>
 8004024:	4602      	mov	r2, r0
 8004026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004028:	1ad3      	subs	r3, r2, r3
 800402a:	2b02      	cmp	r3, #2
 800402c:	d901      	bls.n	8004032 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800402e:	2303      	movs	r3, #3
 8004030:	e076      	b.n	8004120 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004032:	4b03      	ldr	r3, [pc, #12]	@ (8004040 <HAL_RCC_OscConfig+0x6c4>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800403a:	2b00      	cmp	r3, #0
 800403c:	d1f0      	bne.n	8004020 <HAL_RCC_OscConfig+0x6a4>
 800403e:	e06e      	b.n	800411e <HAL_RCC_OscConfig+0x7a2>
 8004040:	58024400 	.word	0x58024400
 8004044:	fffffc0c 	.word	0xfffffc0c
 8004048:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800404c:	4b36      	ldr	r3, [pc, #216]	@ (8004128 <HAL_RCC_OscConfig+0x7ac>)
 800404e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004050:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004052:	4b35      	ldr	r3, [pc, #212]	@ (8004128 <HAL_RCC_OscConfig+0x7ac>)
 8004054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004056:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800405c:	2b01      	cmp	r3, #1
 800405e:	d031      	beq.n	80040c4 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	f003 0203 	and.w	r2, r3, #3
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800406a:	429a      	cmp	r2, r3
 800406c:	d12a      	bne.n	80040c4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	091b      	lsrs	r3, r3, #4
 8004072:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800407a:	429a      	cmp	r2, r3
 800407c:	d122      	bne.n	80040c4 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004088:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800408a:	429a      	cmp	r2, r3
 800408c:	d11a      	bne.n	80040c4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	0a5b      	lsrs	r3, r3, #9
 8004092:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800409a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800409c:	429a      	cmp	r2, r3
 800409e:	d111      	bne.n	80040c4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	0c1b      	lsrs	r3, r3, #16
 80040a4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040ac:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80040ae:	429a      	cmp	r2, r3
 80040b0:	d108      	bne.n	80040c4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	0e1b      	lsrs	r3, r3, #24
 80040b6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040be:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80040c0:	429a      	cmp	r2, r3
 80040c2:	d001      	beq.n	80040c8 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	e02b      	b.n	8004120 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80040c8:	4b17      	ldr	r3, [pc, #92]	@ (8004128 <HAL_RCC_OscConfig+0x7ac>)
 80040ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040cc:	08db      	lsrs	r3, r3, #3
 80040ce:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80040d2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040d8:	693a      	ldr	r2, [r7, #16]
 80040da:	429a      	cmp	r2, r3
 80040dc:	d01f      	beq.n	800411e <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80040de:	4b12      	ldr	r3, [pc, #72]	@ (8004128 <HAL_RCC_OscConfig+0x7ac>)
 80040e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040e2:	4a11      	ldr	r2, [pc, #68]	@ (8004128 <HAL_RCC_OscConfig+0x7ac>)
 80040e4:	f023 0301 	bic.w	r3, r3, #1
 80040e8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80040ea:	f7fd fa31 	bl	8001550 <HAL_GetTick>
 80040ee:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80040f0:	bf00      	nop
 80040f2:	f7fd fa2d 	bl	8001550 <HAL_GetTick>
 80040f6:	4602      	mov	r2, r0
 80040f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d0f9      	beq.n	80040f2 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80040fe:	4b0a      	ldr	r3, [pc, #40]	@ (8004128 <HAL_RCC_OscConfig+0x7ac>)
 8004100:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004102:	4b0a      	ldr	r3, [pc, #40]	@ (800412c <HAL_RCC_OscConfig+0x7b0>)
 8004104:	4013      	ands	r3, r2
 8004106:	687a      	ldr	r2, [r7, #4]
 8004108:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800410a:	00d2      	lsls	r2, r2, #3
 800410c:	4906      	ldr	r1, [pc, #24]	@ (8004128 <HAL_RCC_OscConfig+0x7ac>)
 800410e:	4313      	orrs	r3, r2
 8004110:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004112:	4b05      	ldr	r3, [pc, #20]	@ (8004128 <HAL_RCC_OscConfig+0x7ac>)
 8004114:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004116:	4a04      	ldr	r2, [pc, #16]	@ (8004128 <HAL_RCC_OscConfig+0x7ac>)
 8004118:	f043 0301 	orr.w	r3, r3, #1
 800411c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800411e:	2300      	movs	r3, #0
}
 8004120:	4618      	mov	r0, r3
 8004122:	3730      	adds	r7, #48	@ 0x30
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}
 8004128:	58024400 	.word	0x58024400
 800412c:	ffff0007 	.word	0xffff0007

08004130 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b086      	sub	sp, #24
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
 8004138:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d101      	bne.n	8004144 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004140:	2301      	movs	r3, #1
 8004142:	e19c      	b.n	800447e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004144:	4b8a      	ldr	r3, [pc, #552]	@ (8004370 <HAL_RCC_ClockConfig+0x240>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f003 030f 	and.w	r3, r3, #15
 800414c:	683a      	ldr	r2, [r7, #0]
 800414e:	429a      	cmp	r2, r3
 8004150:	d910      	bls.n	8004174 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004152:	4b87      	ldr	r3, [pc, #540]	@ (8004370 <HAL_RCC_ClockConfig+0x240>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f023 020f 	bic.w	r2, r3, #15
 800415a:	4985      	ldr	r1, [pc, #532]	@ (8004370 <HAL_RCC_ClockConfig+0x240>)
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	4313      	orrs	r3, r2
 8004160:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004162:	4b83      	ldr	r3, [pc, #524]	@ (8004370 <HAL_RCC_ClockConfig+0x240>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f003 030f 	and.w	r3, r3, #15
 800416a:	683a      	ldr	r2, [r7, #0]
 800416c:	429a      	cmp	r2, r3
 800416e:	d001      	beq.n	8004174 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004170:	2301      	movs	r3, #1
 8004172:	e184      	b.n	800447e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f003 0304 	and.w	r3, r3, #4
 800417c:	2b00      	cmp	r3, #0
 800417e:	d010      	beq.n	80041a2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	691a      	ldr	r2, [r3, #16]
 8004184:	4b7b      	ldr	r3, [pc, #492]	@ (8004374 <HAL_RCC_ClockConfig+0x244>)
 8004186:	699b      	ldr	r3, [r3, #24]
 8004188:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800418c:	429a      	cmp	r2, r3
 800418e:	d908      	bls.n	80041a2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004190:	4b78      	ldr	r3, [pc, #480]	@ (8004374 <HAL_RCC_ClockConfig+0x244>)
 8004192:	699b      	ldr	r3, [r3, #24]
 8004194:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	691b      	ldr	r3, [r3, #16]
 800419c:	4975      	ldr	r1, [pc, #468]	@ (8004374 <HAL_RCC_ClockConfig+0x244>)
 800419e:	4313      	orrs	r3, r2
 80041a0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 0308 	and.w	r3, r3, #8
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d010      	beq.n	80041d0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	695a      	ldr	r2, [r3, #20]
 80041b2:	4b70      	ldr	r3, [pc, #448]	@ (8004374 <HAL_RCC_ClockConfig+0x244>)
 80041b4:	69db      	ldr	r3, [r3, #28]
 80041b6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80041ba:	429a      	cmp	r2, r3
 80041bc:	d908      	bls.n	80041d0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80041be:	4b6d      	ldr	r3, [pc, #436]	@ (8004374 <HAL_RCC_ClockConfig+0x244>)
 80041c0:	69db      	ldr	r3, [r3, #28]
 80041c2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	695b      	ldr	r3, [r3, #20]
 80041ca:	496a      	ldr	r1, [pc, #424]	@ (8004374 <HAL_RCC_ClockConfig+0x244>)
 80041cc:	4313      	orrs	r3, r2
 80041ce:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f003 0310 	and.w	r3, r3, #16
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d010      	beq.n	80041fe <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	699a      	ldr	r2, [r3, #24]
 80041e0:	4b64      	ldr	r3, [pc, #400]	@ (8004374 <HAL_RCC_ClockConfig+0x244>)
 80041e2:	69db      	ldr	r3, [r3, #28]
 80041e4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80041e8:	429a      	cmp	r2, r3
 80041ea:	d908      	bls.n	80041fe <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80041ec:	4b61      	ldr	r3, [pc, #388]	@ (8004374 <HAL_RCC_ClockConfig+0x244>)
 80041ee:	69db      	ldr	r3, [r3, #28]
 80041f0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	699b      	ldr	r3, [r3, #24]
 80041f8:	495e      	ldr	r1, [pc, #376]	@ (8004374 <HAL_RCC_ClockConfig+0x244>)
 80041fa:	4313      	orrs	r3, r2
 80041fc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f003 0320 	and.w	r3, r3, #32
 8004206:	2b00      	cmp	r3, #0
 8004208:	d010      	beq.n	800422c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	69da      	ldr	r2, [r3, #28]
 800420e:	4b59      	ldr	r3, [pc, #356]	@ (8004374 <HAL_RCC_ClockConfig+0x244>)
 8004210:	6a1b      	ldr	r3, [r3, #32]
 8004212:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004216:	429a      	cmp	r2, r3
 8004218:	d908      	bls.n	800422c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800421a:	4b56      	ldr	r3, [pc, #344]	@ (8004374 <HAL_RCC_ClockConfig+0x244>)
 800421c:	6a1b      	ldr	r3, [r3, #32]
 800421e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	69db      	ldr	r3, [r3, #28]
 8004226:	4953      	ldr	r1, [pc, #332]	@ (8004374 <HAL_RCC_ClockConfig+0x244>)
 8004228:	4313      	orrs	r3, r2
 800422a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f003 0302 	and.w	r3, r3, #2
 8004234:	2b00      	cmp	r3, #0
 8004236:	d010      	beq.n	800425a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	68da      	ldr	r2, [r3, #12]
 800423c:	4b4d      	ldr	r3, [pc, #308]	@ (8004374 <HAL_RCC_ClockConfig+0x244>)
 800423e:	699b      	ldr	r3, [r3, #24]
 8004240:	f003 030f 	and.w	r3, r3, #15
 8004244:	429a      	cmp	r2, r3
 8004246:	d908      	bls.n	800425a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004248:	4b4a      	ldr	r3, [pc, #296]	@ (8004374 <HAL_RCC_ClockConfig+0x244>)
 800424a:	699b      	ldr	r3, [r3, #24]
 800424c:	f023 020f 	bic.w	r2, r3, #15
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	68db      	ldr	r3, [r3, #12]
 8004254:	4947      	ldr	r1, [pc, #284]	@ (8004374 <HAL_RCC_ClockConfig+0x244>)
 8004256:	4313      	orrs	r3, r2
 8004258:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f003 0301 	and.w	r3, r3, #1
 8004262:	2b00      	cmp	r3, #0
 8004264:	d055      	beq.n	8004312 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004266:	4b43      	ldr	r3, [pc, #268]	@ (8004374 <HAL_RCC_ClockConfig+0x244>)
 8004268:	699b      	ldr	r3, [r3, #24]
 800426a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	4940      	ldr	r1, [pc, #256]	@ (8004374 <HAL_RCC_ClockConfig+0x244>)
 8004274:	4313      	orrs	r3, r2
 8004276:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	2b02      	cmp	r3, #2
 800427e:	d107      	bne.n	8004290 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004280:	4b3c      	ldr	r3, [pc, #240]	@ (8004374 <HAL_RCC_ClockConfig+0x244>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004288:	2b00      	cmp	r3, #0
 800428a:	d121      	bne.n	80042d0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800428c:	2301      	movs	r3, #1
 800428e:	e0f6      	b.n	800447e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	2b03      	cmp	r3, #3
 8004296:	d107      	bne.n	80042a8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004298:	4b36      	ldr	r3, [pc, #216]	@ (8004374 <HAL_RCC_ClockConfig+0x244>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d115      	bne.n	80042d0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80042a4:	2301      	movs	r3, #1
 80042a6:	e0ea      	b.n	800447e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	d107      	bne.n	80042c0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80042b0:	4b30      	ldr	r3, [pc, #192]	@ (8004374 <HAL_RCC_ClockConfig+0x244>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d109      	bne.n	80042d0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80042bc:	2301      	movs	r3, #1
 80042be:	e0de      	b.n	800447e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80042c0:	4b2c      	ldr	r3, [pc, #176]	@ (8004374 <HAL_RCC_ClockConfig+0x244>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f003 0304 	and.w	r3, r3, #4
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d101      	bne.n	80042d0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80042cc:	2301      	movs	r3, #1
 80042ce:	e0d6      	b.n	800447e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80042d0:	4b28      	ldr	r3, [pc, #160]	@ (8004374 <HAL_RCC_ClockConfig+0x244>)
 80042d2:	691b      	ldr	r3, [r3, #16]
 80042d4:	f023 0207 	bic.w	r2, r3, #7
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	4925      	ldr	r1, [pc, #148]	@ (8004374 <HAL_RCC_ClockConfig+0x244>)
 80042de:	4313      	orrs	r3, r2
 80042e0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042e2:	f7fd f935 	bl	8001550 <HAL_GetTick>
 80042e6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042e8:	e00a      	b.n	8004300 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042ea:	f7fd f931 	bl	8001550 <HAL_GetTick>
 80042ee:	4602      	mov	r2, r0
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	1ad3      	subs	r3, r2, r3
 80042f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d901      	bls.n	8004300 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80042fc:	2303      	movs	r3, #3
 80042fe:	e0be      	b.n	800447e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004300:	4b1c      	ldr	r3, [pc, #112]	@ (8004374 <HAL_RCC_ClockConfig+0x244>)
 8004302:	691b      	ldr	r3, [r3, #16]
 8004304:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	00db      	lsls	r3, r3, #3
 800430e:	429a      	cmp	r2, r3
 8004310:	d1eb      	bne.n	80042ea <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f003 0302 	and.w	r3, r3, #2
 800431a:	2b00      	cmp	r3, #0
 800431c:	d010      	beq.n	8004340 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	68da      	ldr	r2, [r3, #12]
 8004322:	4b14      	ldr	r3, [pc, #80]	@ (8004374 <HAL_RCC_ClockConfig+0x244>)
 8004324:	699b      	ldr	r3, [r3, #24]
 8004326:	f003 030f 	and.w	r3, r3, #15
 800432a:	429a      	cmp	r2, r3
 800432c:	d208      	bcs.n	8004340 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800432e:	4b11      	ldr	r3, [pc, #68]	@ (8004374 <HAL_RCC_ClockConfig+0x244>)
 8004330:	699b      	ldr	r3, [r3, #24]
 8004332:	f023 020f 	bic.w	r2, r3, #15
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	68db      	ldr	r3, [r3, #12]
 800433a:	490e      	ldr	r1, [pc, #56]	@ (8004374 <HAL_RCC_ClockConfig+0x244>)
 800433c:	4313      	orrs	r3, r2
 800433e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004340:	4b0b      	ldr	r3, [pc, #44]	@ (8004370 <HAL_RCC_ClockConfig+0x240>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f003 030f 	and.w	r3, r3, #15
 8004348:	683a      	ldr	r2, [r7, #0]
 800434a:	429a      	cmp	r2, r3
 800434c:	d214      	bcs.n	8004378 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800434e:	4b08      	ldr	r3, [pc, #32]	@ (8004370 <HAL_RCC_ClockConfig+0x240>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f023 020f 	bic.w	r2, r3, #15
 8004356:	4906      	ldr	r1, [pc, #24]	@ (8004370 <HAL_RCC_ClockConfig+0x240>)
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	4313      	orrs	r3, r2
 800435c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800435e:	4b04      	ldr	r3, [pc, #16]	@ (8004370 <HAL_RCC_ClockConfig+0x240>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 030f 	and.w	r3, r3, #15
 8004366:	683a      	ldr	r2, [r7, #0]
 8004368:	429a      	cmp	r2, r3
 800436a:	d005      	beq.n	8004378 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800436c:	2301      	movs	r3, #1
 800436e:	e086      	b.n	800447e <HAL_RCC_ClockConfig+0x34e>
 8004370:	52002000 	.word	0x52002000
 8004374:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f003 0304 	and.w	r3, r3, #4
 8004380:	2b00      	cmp	r3, #0
 8004382:	d010      	beq.n	80043a6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	691a      	ldr	r2, [r3, #16]
 8004388:	4b3f      	ldr	r3, [pc, #252]	@ (8004488 <HAL_RCC_ClockConfig+0x358>)
 800438a:	699b      	ldr	r3, [r3, #24]
 800438c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004390:	429a      	cmp	r2, r3
 8004392:	d208      	bcs.n	80043a6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004394:	4b3c      	ldr	r3, [pc, #240]	@ (8004488 <HAL_RCC_ClockConfig+0x358>)
 8004396:	699b      	ldr	r3, [r3, #24]
 8004398:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	691b      	ldr	r3, [r3, #16]
 80043a0:	4939      	ldr	r1, [pc, #228]	@ (8004488 <HAL_RCC_ClockConfig+0x358>)
 80043a2:	4313      	orrs	r3, r2
 80043a4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f003 0308 	and.w	r3, r3, #8
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d010      	beq.n	80043d4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	695a      	ldr	r2, [r3, #20]
 80043b6:	4b34      	ldr	r3, [pc, #208]	@ (8004488 <HAL_RCC_ClockConfig+0x358>)
 80043b8:	69db      	ldr	r3, [r3, #28]
 80043ba:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80043be:	429a      	cmp	r2, r3
 80043c0:	d208      	bcs.n	80043d4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80043c2:	4b31      	ldr	r3, [pc, #196]	@ (8004488 <HAL_RCC_ClockConfig+0x358>)
 80043c4:	69db      	ldr	r3, [r3, #28]
 80043c6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	695b      	ldr	r3, [r3, #20]
 80043ce:	492e      	ldr	r1, [pc, #184]	@ (8004488 <HAL_RCC_ClockConfig+0x358>)
 80043d0:	4313      	orrs	r3, r2
 80043d2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f003 0310 	and.w	r3, r3, #16
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d010      	beq.n	8004402 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	699a      	ldr	r2, [r3, #24]
 80043e4:	4b28      	ldr	r3, [pc, #160]	@ (8004488 <HAL_RCC_ClockConfig+0x358>)
 80043e6:	69db      	ldr	r3, [r3, #28]
 80043e8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80043ec:	429a      	cmp	r2, r3
 80043ee:	d208      	bcs.n	8004402 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80043f0:	4b25      	ldr	r3, [pc, #148]	@ (8004488 <HAL_RCC_ClockConfig+0x358>)
 80043f2:	69db      	ldr	r3, [r3, #28]
 80043f4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	699b      	ldr	r3, [r3, #24]
 80043fc:	4922      	ldr	r1, [pc, #136]	@ (8004488 <HAL_RCC_ClockConfig+0x358>)
 80043fe:	4313      	orrs	r3, r2
 8004400:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f003 0320 	and.w	r3, r3, #32
 800440a:	2b00      	cmp	r3, #0
 800440c:	d010      	beq.n	8004430 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	69da      	ldr	r2, [r3, #28]
 8004412:	4b1d      	ldr	r3, [pc, #116]	@ (8004488 <HAL_RCC_ClockConfig+0x358>)
 8004414:	6a1b      	ldr	r3, [r3, #32]
 8004416:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800441a:	429a      	cmp	r2, r3
 800441c:	d208      	bcs.n	8004430 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800441e:	4b1a      	ldr	r3, [pc, #104]	@ (8004488 <HAL_RCC_ClockConfig+0x358>)
 8004420:	6a1b      	ldr	r3, [r3, #32]
 8004422:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	69db      	ldr	r3, [r3, #28]
 800442a:	4917      	ldr	r1, [pc, #92]	@ (8004488 <HAL_RCC_ClockConfig+0x358>)
 800442c:	4313      	orrs	r3, r2
 800442e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004430:	f000 f834 	bl	800449c <HAL_RCC_GetSysClockFreq>
 8004434:	4602      	mov	r2, r0
 8004436:	4b14      	ldr	r3, [pc, #80]	@ (8004488 <HAL_RCC_ClockConfig+0x358>)
 8004438:	699b      	ldr	r3, [r3, #24]
 800443a:	0a1b      	lsrs	r3, r3, #8
 800443c:	f003 030f 	and.w	r3, r3, #15
 8004440:	4912      	ldr	r1, [pc, #72]	@ (800448c <HAL_RCC_ClockConfig+0x35c>)
 8004442:	5ccb      	ldrb	r3, [r1, r3]
 8004444:	f003 031f 	and.w	r3, r3, #31
 8004448:	fa22 f303 	lsr.w	r3, r2, r3
 800444c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800444e:	4b0e      	ldr	r3, [pc, #56]	@ (8004488 <HAL_RCC_ClockConfig+0x358>)
 8004450:	699b      	ldr	r3, [r3, #24]
 8004452:	f003 030f 	and.w	r3, r3, #15
 8004456:	4a0d      	ldr	r2, [pc, #52]	@ (800448c <HAL_RCC_ClockConfig+0x35c>)
 8004458:	5cd3      	ldrb	r3, [r2, r3]
 800445a:	f003 031f 	and.w	r3, r3, #31
 800445e:	693a      	ldr	r2, [r7, #16]
 8004460:	fa22 f303 	lsr.w	r3, r2, r3
 8004464:	4a0a      	ldr	r2, [pc, #40]	@ (8004490 <HAL_RCC_ClockConfig+0x360>)
 8004466:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004468:	4a0a      	ldr	r2, [pc, #40]	@ (8004494 <HAL_RCC_ClockConfig+0x364>)
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800446e:	4b0a      	ldr	r3, [pc, #40]	@ (8004498 <HAL_RCC_ClockConfig+0x368>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4618      	mov	r0, r3
 8004474:	f7fd f822 	bl	80014bc <HAL_InitTick>
 8004478:	4603      	mov	r3, r0
 800447a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800447c:	7bfb      	ldrb	r3, [r7, #15]
}
 800447e:	4618      	mov	r0, r3
 8004480:	3718      	adds	r7, #24
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}
 8004486:	bf00      	nop
 8004488:	58024400 	.word	0x58024400
 800448c:	08009398 	.word	0x08009398
 8004490:	24000004 	.word	0x24000004
 8004494:	24000000 	.word	0x24000000
 8004498:	24000024 	.word	0x24000024

0800449c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800449c:	b480      	push	{r7}
 800449e:	b089      	sub	sp, #36	@ 0x24
 80044a0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80044a2:	4bb3      	ldr	r3, [pc, #716]	@ (8004770 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044a4:	691b      	ldr	r3, [r3, #16]
 80044a6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80044aa:	2b18      	cmp	r3, #24
 80044ac:	f200 8155 	bhi.w	800475a <HAL_RCC_GetSysClockFreq+0x2be>
 80044b0:	a201      	add	r2, pc, #4	@ (adr r2, 80044b8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80044b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044b6:	bf00      	nop
 80044b8:	0800451d 	.word	0x0800451d
 80044bc:	0800475b 	.word	0x0800475b
 80044c0:	0800475b 	.word	0x0800475b
 80044c4:	0800475b 	.word	0x0800475b
 80044c8:	0800475b 	.word	0x0800475b
 80044cc:	0800475b 	.word	0x0800475b
 80044d0:	0800475b 	.word	0x0800475b
 80044d4:	0800475b 	.word	0x0800475b
 80044d8:	08004543 	.word	0x08004543
 80044dc:	0800475b 	.word	0x0800475b
 80044e0:	0800475b 	.word	0x0800475b
 80044e4:	0800475b 	.word	0x0800475b
 80044e8:	0800475b 	.word	0x0800475b
 80044ec:	0800475b 	.word	0x0800475b
 80044f0:	0800475b 	.word	0x0800475b
 80044f4:	0800475b 	.word	0x0800475b
 80044f8:	08004549 	.word	0x08004549
 80044fc:	0800475b 	.word	0x0800475b
 8004500:	0800475b 	.word	0x0800475b
 8004504:	0800475b 	.word	0x0800475b
 8004508:	0800475b 	.word	0x0800475b
 800450c:	0800475b 	.word	0x0800475b
 8004510:	0800475b 	.word	0x0800475b
 8004514:	0800475b 	.word	0x0800475b
 8004518:	0800454f 	.word	0x0800454f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800451c:	4b94      	ldr	r3, [pc, #592]	@ (8004770 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f003 0320 	and.w	r3, r3, #32
 8004524:	2b00      	cmp	r3, #0
 8004526:	d009      	beq.n	800453c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004528:	4b91      	ldr	r3, [pc, #580]	@ (8004770 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	08db      	lsrs	r3, r3, #3
 800452e:	f003 0303 	and.w	r3, r3, #3
 8004532:	4a90      	ldr	r2, [pc, #576]	@ (8004774 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004534:	fa22 f303 	lsr.w	r3, r2, r3
 8004538:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800453a:	e111      	b.n	8004760 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800453c:	4b8d      	ldr	r3, [pc, #564]	@ (8004774 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800453e:	61bb      	str	r3, [r7, #24]
      break;
 8004540:	e10e      	b.n	8004760 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004542:	4b8d      	ldr	r3, [pc, #564]	@ (8004778 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004544:	61bb      	str	r3, [r7, #24]
      break;
 8004546:	e10b      	b.n	8004760 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004548:	4b8c      	ldr	r3, [pc, #560]	@ (800477c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800454a:	61bb      	str	r3, [r7, #24]
      break;
 800454c:	e108      	b.n	8004760 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800454e:	4b88      	ldr	r3, [pc, #544]	@ (8004770 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004550:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004552:	f003 0303 	and.w	r3, r3, #3
 8004556:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004558:	4b85      	ldr	r3, [pc, #532]	@ (8004770 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800455a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800455c:	091b      	lsrs	r3, r3, #4
 800455e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004562:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004564:	4b82      	ldr	r3, [pc, #520]	@ (8004770 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004566:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004568:	f003 0301 	and.w	r3, r3, #1
 800456c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800456e:	4b80      	ldr	r3, [pc, #512]	@ (8004770 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004570:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004572:	08db      	lsrs	r3, r3, #3
 8004574:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004578:	68fa      	ldr	r2, [r7, #12]
 800457a:	fb02 f303 	mul.w	r3, r2, r3
 800457e:	ee07 3a90 	vmov	s15, r3
 8004582:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004586:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	2b00      	cmp	r3, #0
 800458e:	f000 80e1 	beq.w	8004754 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	2b02      	cmp	r3, #2
 8004596:	f000 8083 	beq.w	80046a0 <HAL_RCC_GetSysClockFreq+0x204>
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	2b02      	cmp	r3, #2
 800459e:	f200 80a1 	bhi.w	80046e4 <HAL_RCC_GetSysClockFreq+0x248>
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d003      	beq.n	80045b0 <HAL_RCC_GetSysClockFreq+0x114>
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	2b01      	cmp	r3, #1
 80045ac:	d056      	beq.n	800465c <HAL_RCC_GetSysClockFreq+0x1c0>
 80045ae:	e099      	b.n	80046e4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80045b0:	4b6f      	ldr	r3, [pc, #444]	@ (8004770 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f003 0320 	and.w	r3, r3, #32
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d02d      	beq.n	8004618 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80045bc:	4b6c      	ldr	r3, [pc, #432]	@ (8004770 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	08db      	lsrs	r3, r3, #3
 80045c2:	f003 0303 	and.w	r3, r3, #3
 80045c6:	4a6b      	ldr	r2, [pc, #428]	@ (8004774 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80045c8:	fa22 f303 	lsr.w	r3, r2, r3
 80045cc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	ee07 3a90 	vmov	s15, r3
 80045d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	ee07 3a90 	vmov	s15, r3
 80045de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045e6:	4b62      	ldr	r3, [pc, #392]	@ (8004770 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045ee:	ee07 3a90 	vmov	s15, r3
 80045f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80045fa:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8004780 <HAL_RCC_GetSysClockFreq+0x2e4>
 80045fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004602:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004606:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800460a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800460e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004612:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8004616:	e087      	b.n	8004728 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	ee07 3a90 	vmov	s15, r3
 800461e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004622:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8004784 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004626:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800462a:	4b51      	ldr	r3, [pc, #324]	@ (8004770 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800462c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800462e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004632:	ee07 3a90 	vmov	s15, r3
 8004636:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800463a:	ed97 6a02 	vldr	s12, [r7, #8]
 800463e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8004780 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004642:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004646:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800464a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800464e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004652:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004656:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800465a:	e065      	b.n	8004728 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	ee07 3a90 	vmov	s15, r3
 8004662:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004666:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8004788 <HAL_RCC_GetSysClockFreq+0x2ec>
 800466a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800466e:	4b40      	ldr	r3, [pc, #256]	@ (8004770 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004672:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004676:	ee07 3a90 	vmov	s15, r3
 800467a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800467e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004682:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8004780 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004686:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800468a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800468e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004692:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004696:	ee67 7a27 	vmul.f32	s15, s14, s15
 800469a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800469e:	e043      	b.n	8004728 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80046a0:	693b      	ldr	r3, [r7, #16]
 80046a2:	ee07 3a90 	vmov	s15, r3
 80046a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046aa:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800478c <HAL_RCC_GetSysClockFreq+0x2f0>
 80046ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046b2:	4b2f      	ldr	r3, [pc, #188]	@ (8004770 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046ba:	ee07 3a90 	vmov	s15, r3
 80046be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80046c6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8004780 <HAL_RCC_GetSysClockFreq+0x2e4>
 80046ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80046d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046de:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80046e2:	e021      	b.n	8004728 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	ee07 3a90 	vmov	s15, r3
 80046ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046ee:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004788 <HAL_RCC_GetSysClockFreq+0x2ec>
 80046f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046f6:	4b1e      	ldr	r3, [pc, #120]	@ (8004770 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046fe:	ee07 3a90 	vmov	s15, r3
 8004702:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004706:	ed97 6a02 	vldr	s12, [r7, #8]
 800470a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8004780 <HAL_RCC_GetSysClockFreq+0x2e4>
 800470e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004712:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004716:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800471a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800471e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004722:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004726:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004728:	4b11      	ldr	r3, [pc, #68]	@ (8004770 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800472a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800472c:	0a5b      	lsrs	r3, r3, #9
 800472e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004732:	3301      	adds	r3, #1
 8004734:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	ee07 3a90 	vmov	s15, r3
 800473c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004740:	edd7 6a07 	vldr	s13, [r7, #28]
 8004744:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004748:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800474c:	ee17 3a90 	vmov	r3, s15
 8004750:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8004752:	e005      	b.n	8004760 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004754:	2300      	movs	r3, #0
 8004756:	61bb      	str	r3, [r7, #24]
      break;
 8004758:	e002      	b.n	8004760 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800475a:	4b07      	ldr	r3, [pc, #28]	@ (8004778 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800475c:	61bb      	str	r3, [r7, #24]
      break;
 800475e:	bf00      	nop
  }

  return sysclockfreq;
 8004760:	69bb      	ldr	r3, [r7, #24]
}
 8004762:	4618      	mov	r0, r3
 8004764:	3724      	adds	r7, #36	@ 0x24
 8004766:	46bd      	mov	sp, r7
 8004768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476c:	4770      	bx	lr
 800476e:	bf00      	nop
 8004770:	58024400 	.word	0x58024400
 8004774:	03d09000 	.word	0x03d09000
 8004778:	003d0900 	.word	0x003d0900
 800477c:	007a1200 	.word	0x007a1200
 8004780:	46000000 	.word	0x46000000
 8004784:	4c742400 	.word	0x4c742400
 8004788:	4a742400 	.word	0x4a742400
 800478c:	4af42400 	.word	0x4af42400

08004790 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b082      	sub	sp, #8
 8004794:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004796:	f7ff fe81 	bl	800449c <HAL_RCC_GetSysClockFreq>
 800479a:	4602      	mov	r2, r0
 800479c:	4b10      	ldr	r3, [pc, #64]	@ (80047e0 <HAL_RCC_GetHCLKFreq+0x50>)
 800479e:	699b      	ldr	r3, [r3, #24]
 80047a0:	0a1b      	lsrs	r3, r3, #8
 80047a2:	f003 030f 	and.w	r3, r3, #15
 80047a6:	490f      	ldr	r1, [pc, #60]	@ (80047e4 <HAL_RCC_GetHCLKFreq+0x54>)
 80047a8:	5ccb      	ldrb	r3, [r1, r3]
 80047aa:	f003 031f 	and.w	r3, r3, #31
 80047ae:	fa22 f303 	lsr.w	r3, r2, r3
 80047b2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80047b4:	4b0a      	ldr	r3, [pc, #40]	@ (80047e0 <HAL_RCC_GetHCLKFreq+0x50>)
 80047b6:	699b      	ldr	r3, [r3, #24]
 80047b8:	f003 030f 	and.w	r3, r3, #15
 80047bc:	4a09      	ldr	r2, [pc, #36]	@ (80047e4 <HAL_RCC_GetHCLKFreq+0x54>)
 80047be:	5cd3      	ldrb	r3, [r2, r3]
 80047c0:	f003 031f 	and.w	r3, r3, #31
 80047c4:	687a      	ldr	r2, [r7, #4]
 80047c6:	fa22 f303 	lsr.w	r3, r2, r3
 80047ca:	4a07      	ldr	r2, [pc, #28]	@ (80047e8 <HAL_RCC_GetHCLKFreq+0x58>)
 80047cc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80047ce:	4a07      	ldr	r2, [pc, #28]	@ (80047ec <HAL_RCC_GetHCLKFreq+0x5c>)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80047d4:	4b04      	ldr	r3, [pc, #16]	@ (80047e8 <HAL_RCC_GetHCLKFreq+0x58>)
 80047d6:	681b      	ldr	r3, [r3, #0]
}
 80047d8:	4618      	mov	r0, r3
 80047da:	3708      	adds	r7, #8
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}
 80047e0:	58024400 	.word	0x58024400
 80047e4:	08009398 	.word	0x08009398
 80047e8:	24000004 	.word	0x24000004
 80047ec:	24000000 	.word	0x24000000

080047f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80047f4:	f7ff ffcc 	bl	8004790 <HAL_RCC_GetHCLKFreq>
 80047f8:	4602      	mov	r2, r0
 80047fa:	4b06      	ldr	r3, [pc, #24]	@ (8004814 <HAL_RCC_GetPCLK1Freq+0x24>)
 80047fc:	69db      	ldr	r3, [r3, #28]
 80047fe:	091b      	lsrs	r3, r3, #4
 8004800:	f003 0307 	and.w	r3, r3, #7
 8004804:	4904      	ldr	r1, [pc, #16]	@ (8004818 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004806:	5ccb      	ldrb	r3, [r1, r3]
 8004808:	f003 031f 	and.w	r3, r3, #31
 800480c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004810:	4618      	mov	r0, r3
 8004812:	bd80      	pop	{r7, pc}
 8004814:	58024400 	.word	0x58024400
 8004818:	08009398 	.word	0x08009398

0800481c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004820:	f7ff ffb6 	bl	8004790 <HAL_RCC_GetHCLKFreq>
 8004824:	4602      	mov	r2, r0
 8004826:	4b06      	ldr	r3, [pc, #24]	@ (8004840 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004828:	69db      	ldr	r3, [r3, #28]
 800482a:	0a1b      	lsrs	r3, r3, #8
 800482c:	f003 0307 	and.w	r3, r3, #7
 8004830:	4904      	ldr	r1, [pc, #16]	@ (8004844 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004832:	5ccb      	ldrb	r3, [r1, r3]
 8004834:	f003 031f 	and.w	r3, r3, #31
 8004838:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800483c:	4618      	mov	r0, r3
 800483e:	bd80      	pop	{r7, pc}
 8004840:	58024400 	.word	0x58024400
 8004844:	08009398 	.word	0x08009398

08004848 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004848:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800484c:	b0c6      	sub	sp, #280	@ 0x118
 800484e:	af00      	add	r7, sp, #0
 8004850:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004854:	2300      	movs	r3, #0
 8004856:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800485a:	2300      	movs	r3, #0
 800485c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004860:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004868:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800486c:	2500      	movs	r5, #0
 800486e:	ea54 0305 	orrs.w	r3, r4, r5
 8004872:	d049      	beq.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004874:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004878:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800487a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800487e:	d02f      	beq.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004880:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004884:	d828      	bhi.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004886:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800488a:	d01a      	beq.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800488c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004890:	d822      	bhi.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004892:	2b00      	cmp	r3, #0
 8004894:	d003      	beq.n	800489e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004896:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800489a:	d007      	beq.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x64>
 800489c:	e01c      	b.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800489e:	4bab      	ldr	r3, [pc, #684]	@ (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80048a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048a2:	4aaa      	ldr	r2, [pc, #680]	@ (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80048a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80048a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80048aa:	e01a      	b.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80048ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80048b0:	3308      	adds	r3, #8
 80048b2:	2102      	movs	r1, #2
 80048b4:	4618      	mov	r0, r3
 80048b6:	f002 fa49 	bl	8006d4c <RCCEx_PLL2_Config>
 80048ba:	4603      	mov	r3, r0
 80048bc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80048c0:	e00f      	b.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80048c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80048c6:	3328      	adds	r3, #40	@ 0x28
 80048c8:	2102      	movs	r1, #2
 80048ca:	4618      	mov	r0, r3
 80048cc:	f002 faf0 	bl	8006eb0 <RCCEx_PLL3_Config>
 80048d0:	4603      	mov	r3, r0
 80048d2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80048d6:	e004      	b.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80048d8:	2301      	movs	r3, #1
 80048da:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80048de:	e000      	b.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80048e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048e2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d10a      	bne.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80048ea:	4b98      	ldr	r3, [pc, #608]	@ (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80048ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048ee:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80048f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80048f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80048f8:	4a94      	ldr	r2, [pc, #592]	@ (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80048fa:	430b      	orrs	r3, r1
 80048fc:	6513      	str	r3, [r2, #80]	@ 0x50
 80048fe:	e003      	b.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004900:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004904:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004908:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800490c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004910:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8004914:	f04f 0900 	mov.w	r9, #0
 8004918:	ea58 0309 	orrs.w	r3, r8, r9
 800491c:	d047      	beq.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800491e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004922:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004924:	2b04      	cmp	r3, #4
 8004926:	d82a      	bhi.n	800497e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004928:	a201      	add	r2, pc, #4	@ (adr r2, 8004930 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800492a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800492e:	bf00      	nop
 8004930:	08004945 	.word	0x08004945
 8004934:	08004953 	.word	0x08004953
 8004938:	08004969 	.word	0x08004969
 800493c:	08004987 	.word	0x08004987
 8004940:	08004987 	.word	0x08004987
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004944:	4b81      	ldr	r3, [pc, #516]	@ (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004946:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004948:	4a80      	ldr	r2, [pc, #512]	@ (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800494a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800494e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004950:	e01a      	b.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004952:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004956:	3308      	adds	r3, #8
 8004958:	2100      	movs	r1, #0
 800495a:	4618      	mov	r0, r3
 800495c:	f002 f9f6 	bl	8006d4c <RCCEx_PLL2_Config>
 8004960:	4603      	mov	r3, r0
 8004962:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004966:	e00f      	b.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004968:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800496c:	3328      	adds	r3, #40	@ 0x28
 800496e:	2100      	movs	r1, #0
 8004970:	4618      	mov	r0, r3
 8004972:	f002 fa9d 	bl	8006eb0 <RCCEx_PLL3_Config>
 8004976:	4603      	mov	r3, r0
 8004978:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800497c:	e004      	b.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004984:	e000      	b.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8004986:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004988:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800498c:	2b00      	cmp	r3, #0
 800498e:	d10a      	bne.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004990:	4b6e      	ldr	r3, [pc, #440]	@ (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004992:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004994:	f023 0107 	bic.w	r1, r3, #7
 8004998:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800499c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800499e:	4a6b      	ldr	r2, [pc, #428]	@ (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80049a0:	430b      	orrs	r3, r1
 80049a2:	6513      	str	r3, [r2, #80]	@ 0x50
 80049a4:	e003      	b.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049a6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80049aa:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80049ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80049b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049b6:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 80049ba:	f04f 0b00 	mov.w	fp, #0
 80049be:	ea5a 030b 	orrs.w	r3, sl, fp
 80049c2:	d05b      	beq.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80049c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80049c8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80049cc:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80049d0:	d03b      	beq.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x202>
 80049d2:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80049d6:	d834      	bhi.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80049d8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80049dc:	d037      	beq.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x206>
 80049de:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80049e2:	d82e      	bhi.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80049e4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80049e8:	d033      	beq.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80049ea:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80049ee:	d828      	bhi.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80049f0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80049f4:	d01a      	beq.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 80049f6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80049fa:	d822      	bhi.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d003      	beq.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8004a00:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004a04:	d007      	beq.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8004a06:	e01c      	b.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a08:	4b50      	ldr	r3, [pc, #320]	@ (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004a0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a0c:	4a4f      	ldr	r2, [pc, #316]	@ (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004a0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a12:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004a14:	e01e      	b.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004a16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a1a:	3308      	adds	r3, #8
 8004a1c:	2100      	movs	r1, #0
 8004a1e:	4618      	mov	r0, r3
 8004a20:	f002 f994 	bl	8006d4c <RCCEx_PLL2_Config>
 8004a24:	4603      	mov	r3, r0
 8004a26:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004a2a:	e013      	b.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004a2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a30:	3328      	adds	r3, #40	@ 0x28
 8004a32:	2100      	movs	r1, #0
 8004a34:	4618      	mov	r0, r3
 8004a36:	f002 fa3b 	bl	8006eb0 <RCCEx_PLL3_Config>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004a40:	e008      	b.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004a42:	2301      	movs	r3, #1
 8004a44:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004a48:	e004      	b.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8004a4a:	bf00      	nop
 8004a4c:	e002      	b.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8004a4e:	bf00      	nop
 8004a50:	e000      	b.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8004a52:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a54:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d10b      	bne.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004a5c:	4b3b      	ldr	r3, [pc, #236]	@ (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004a5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a60:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8004a64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a68:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004a6c:	4a37      	ldr	r2, [pc, #220]	@ (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004a6e:	430b      	orrs	r3, r1
 8004a70:	6593      	str	r3, [r2, #88]	@ 0x58
 8004a72:	e003      	b.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a74:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004a78:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004a7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a84:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8004a88:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004a92:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8004a96:	460b      	mov	r3, r1
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	d05d      	beq.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8004a9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004aa0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004aa4:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8004aa8:	d03b      	beq.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8004aaa:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8004aae:	d834      	bhi.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004ab0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004ab4:	d037      	beq.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8004ab6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004aba:	d82e      	bhi.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004abc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004ac0:	d033      	beq.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8004ac2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004ac6:	d828      	bhi.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004ac8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004acc:	d01a      	beq.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8004ace:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004ad2:	d822      	bhi.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d003      	beq.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8004ad8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004adc:	d007      	beq.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8004ade:	e01c      	b.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ae0:	4b1a      	ldr	r3, [pc, #104]	@ (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004ae2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ae4:	4a19      	ldr	r2, [pc, #100]	@ (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004ae6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004aea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004aec:	e01e      	b.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004aee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004af2:	3308      	adds	r3, #8
 8004af4:	2100      	movs	r1, #0
 8004af6:	4618      	mov	r0, r3
 8004af8:	f002 f928 	bl	8006d4c <RCCEx_PLL2_Config>
 8004afc:	4603      	mov	r3, r0
 8004afe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004b02:	e013      	b.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004b04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b08:	3328      	adds	r3, #40	@ 0x28
 8004b0a:	2100      	movs	r1, #0
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	f002 f9cf 	bl	8006eb0 <RCCEx_PLL3_Config>
 8004b12:	4603      	mov	r3, r0
 8004b14:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004b18:	e008      	b.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004b20:	e004      	b.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8004b22:	bf00      	nop
 8004b24:	e002      	b.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8004b26:	bf00      	nop
 8004b28:	e000      	b.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8004b2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b2c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d10d      	bne.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004b34:	4b05      	ldr	r3, [pc, #20]	@ (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004b36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b38:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8004b3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b40:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004b44:	4a01      	ldr	r2, [pc, #4]	@ (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004b46:	430b      	orrs	r3, r1
 8004b48:	6593      	str	r3, [r2, #88]	@ 0x58
 8004b4a:	e005      	b.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8004b4c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b50:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004b54:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004b58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b60:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8004b64:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004b68:	2300      	movs	r3, #0
 8004b6a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004b6e:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8004b72:	460b      	mov	r3, r1
 8004b74:	4313      	orrs	r3, r2
 8004b76:	d03a      	beq.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8004b78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b7e:	2b30      	cmp	r3, #48	@ 0x30
 8004b80:	d01f      	beq.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8004b82:	2b30      	cmp	r3, #48	@ 0x30
 8004b84:	d819      	bhi.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0x372>
 8004b86:	2b20      	cmp	r3, #32
 8004b88:	d00c      	beq.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8004b8a:	2b20      	cmp	r3, #32
 8004b8c:	d815      	bhi.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0x372>
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d019      	beq.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8004b92:	2b10      	cmp	r3, #16
 8004b94:	d111      	bne.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b96:	4baa      	ldr	r3, [pc, #680]	@ (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004b98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b9a:	4aa9      	ldr	r2, [pc, #676]	@ (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004b9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ba0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8004ba2:	e011      	b.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004ba4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ba8:	3308      	adds	r3, #8
 8004baa:	2102      	movs	r1, #2
 8004bac:	4618      	mov	r0, r3
 8004bae:	f002 f8cd 	bl	8006d4c <RCCEx_PLL2_Config>
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8004bb8:	e006      	b.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004bc0:	e002      	b.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8004bc2:	bf00      	nop
 8004bc4:	e000      	b.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8004bc6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004bc8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d10a      	bne.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004bd0:	4b9b      	ldr	r3, [pc, #620]	@ (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004bd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bd4:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004bd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004bdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bde:	4a98      	ldr	r2, [pc, #608]	@ (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004be0:	430b      	orrs	r3, r1
 8004be2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004be4:	e003      	b.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004be6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004bea:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004bee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bf6:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8004bfa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004bfe:	2300      	movs	r3, #0
 8004c00:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004c04:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8004c08:	460b      	mov	r3, r1
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	d051      	beq.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8004c0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c14:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004c18:	d035      	beq.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8004c1a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004c1e:	d82e      	bhi.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0x436>
 8004c20:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004c24:	d031      	beq.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x442>
 8004c26:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004c2a:	d828      	bhi.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0x436>
 8004c2c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c30:	d01a      	beq.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8004c32:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c36:	d822      	bhi.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0x436>
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d003      	beq.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8004c3c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c40:	d007      	beq.n	8004c52 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8004c42:	e01c      	b.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c44:	4b7e      	ldr	r3, [pc, #504]	@ (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004c46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c48:	4a7d      	ldr	r2, [pc, #500]	@ (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004c4a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004c4e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004c50:	e01c      	b.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004c52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c56:	3308      	adds	r3, #8
 8004c58:	2100      	movs	r1, #0
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	f002 f876 	bl	8006d4c <RCCEx_PLL2_Config>
 8004c60:	4603      	mov	r3, r0
 8004c62:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004c66:	e011      	b.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004c68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c6c:	3328      	adds	r3, #40	@ 0x28
 8004c6e:	2100      	movs	r1, #0
 8004c70:	4618      	mov	r0, r3
 8004c72:	f002 f91d 	bl	8006eb0 <RCCEx_PLL3_Config>
 8004c76:	4603      	mov	r3, r0
 8004c78:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004c7c:	e006      	b.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004c84:	e002      	b.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8004c86:	bf00      	nop
 8004c88:	e000      	b.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8004c8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c8c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d10a      	bne.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004c94:	4b6a      	ldr	r3, [pc, #424]	@ (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004c96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c98:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004c9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ca0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ca2:	4a67      	ldr	r2, [pc, #412]	@ (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004ca4:	430b      	orrs	r3, r1
 8004ca6:	6513      	str	r3, [r2, #80]	@ 0x50
 8004ca8:	e003      	b.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004caa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004cae:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004cb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cba:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8004cbe:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004cc8:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8004ccc:	460b      	mov	r3, r1
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	d053      	beq.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8004cd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004cd6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004cd8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004cdc:	d033      	beq.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8004cde:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004ce2:	d82c      	bhi.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004ce4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004ce8:	d02f      	beq.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0x502>
 8004cea:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004cee:	d826      	bhi.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004cf0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004cf4:	d02b      	beq.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x506>
 8004cf6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004cfa:	d820      	bhi.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004cfc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004d00:	d012      	beq.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8004d02:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004d06:	d81a      	bhi.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d022      	beq.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8004d0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d10:	d115      	bne.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004d12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d16:	3308      	adds	r3, #8
 8004d18:	2101      	movs	r1, #1
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	f002 f816 	bl	8006d4c <RCCEx_PLL2_Config>
 8004d20:	4603      	mov	r3, r0
 8004d22:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004d26:	e015      	b.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004d28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d2c:	3328      	adds	r3, #40	@ 0x28
 8004d2e:	2101      	movs	r1, #1
 8004d30:	4618      	mov	r0, r3
 8004d32:	f002 f8bd 	bl	8006eb0 <RCCEx_PLL3_Config>
 8004d36:	4603      	mov	r3, r0
 8004d38:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004d3c:	e00a      	b.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004d44:	e006      	b.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8004d46:	bf00      	nop
 8004d48:	e004      	b.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8004d4a:	bf00      	nop
 8004d4c:	e002      	b.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8004d4e:	bf00      	nop
 8004d50:	e000      	b.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8004d52:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d54:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d10a      	bne.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004d5c:	4b38      	ldr	r3, [pc, #224]	@ (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004d5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d60:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004d64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d6a:	4a35      	ldr	r2, [pc, #212]	@ (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004d6c:	430b      	orrs	r3, r1
 8004d6e:	6513      	str	r3, [r2, #80]	@ 0x50
 8004d70:	e003      	b.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d72:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004d76:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004d7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d82:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004d86:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004d90:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004d94:	460b      	mov	r3, r1
 8004d96:	4313      	orrs	r3, r2
 8004d98:	d058      	beq.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004d9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d9e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004da2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004da6:	d033      	beq.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8004da8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004dac:	d82c      	bhi.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004dae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004db2:	d02f      	beq.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8004db4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004db8:	d826      	bhi.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004dba:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004dbe:	d02b      	beq.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8004dc0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004dc4:	d820      	bhi.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004dc6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004dca:	d012      	beq.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8004dcc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004dd0:	d81a      	bhi.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d022      	beq.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004dd6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004dda:	d115      	bne.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004ddc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004de0:	3308      	adds	r3, #8
 8004de2:	2101      	movs	r1, #1
 8004de4:	4618      	mov	r0, r3
 8004de6:	f001 ffb1 	bl	8006d4c <RCCEx_PLL2_Config>
 8004dea:	4603      	mov	r3, r0
 8004dec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004df0:	e015      	b.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004df2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004df6:	3328      	adds	r3, #40	@ 0x28
 8004df8:	2101      	movs	r1, #1
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	f002 f858 	bl	8006eb0 <RCCEx_PLL3_Config>
 8004e00:	4603      	mov	r3, r0
 8004e02:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004e06:	e00a      	b.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004e08:	2301      	movs	r3, #1
 8004e0a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004e0e:	e006      	b.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004e10:	bf00      	nop
 8004e12:	e004      	b.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004e14:	bf00      	nop
 8004e16:	e002      	b.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004e18:	bf00      	nop
 8004e1a:	e000      	b.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004e1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e1e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d10e      	bne.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004e26:	4b06      	ldr	r3, [pc, #24]	@ (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004e28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e2a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004e2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e32:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004e36:	4a02      	ldr	r2, [pc, #8]	@ (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004e38:	430b      	orrs	r3, r1
 8004e3a:	6593      	str	r3, [r2, #88]	@ 0x58
 8004e3c:	e006      	b.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x604>
 8004e3e:	bf00      	nop
 8004e40:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e44:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004e48:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004e4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e54:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004e58:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8004e62:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8004e66:	460b      	mov	r3, r1
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	d037      	beq.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004e6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e70:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004e72:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004e76:	d00e      	beq.n	8004e96 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8004e78:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004e7c:	d816      	bhi.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x664>
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d018      	beq.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8004e82:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004e86:	d111      	bne.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e88:	4bc4      	ldr	r3, [pc, #784]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004e8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e8c:	4ac3      	ldr	r2, [pc, #780]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004e8e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004e92:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004e94:	e00f      	b.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004e96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e9a:	3308      	adds	r3, #8
 8004e9c:	2101      	movs	r1, #1
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f001 ff54 	bl	8006d4c <RCCEx_PLL2_Config>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004eaa:	e004      	b.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004eac:	2301      	movs	r3, #1
 8004eae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004eb2:	e000      	b.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8004eb4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004eb6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d10a      	bne.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004ebe:	4bb7      	ldr	r3, [pc, #732]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004ec0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ec2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004ec6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004eca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ecc:	4ab3      	ldr	r2, [pc, #716]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004ece:	430b      	orrs	r3, r1
 8004ed0:	6513      	str	r3, [r2, #80]	@ 0x50
 8004ed2:	e003      	b.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ed4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004ed8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004edc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ee4:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8004ee8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004eec:	2300      	movs	r3, #0
 8004eee:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004ef2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8004ef6:	460b      	mov	r3, r1
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	d039      	beq.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004efc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f02:	2b03      	cmp	r3, #3
 8004f04:	d81c      	bhi.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8004f06:	a201      	add	r2, pc, #4	@ (adr r2, 8004f0c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8004f08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f0c:	08004f49 	.word	0x08004f49
 8004f10:	08004f1d 	.word	0x08004f1d
 8004f14:	08004f2b 	.word	0x08004f2b
 8004f18:	08004f49 	.word	0x08004f49
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f1c:	4b9f      	ldr	r3, [pc, #636]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004f1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f20:	4a9e      	ldr	r2, [pc, #632]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004f22:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004f26:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004f28:	e00f      	b.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004f2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f2e:	3308      	adds	r3, #8
 8004f30:	2102      	movs	r1, #2
 8004f32:	4618      	mov	r0, r3
 8004f34:	f001 ff0a 	bl	8006d4c <RCCEx_PLL2_Config>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004f3e:	e004      	b.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004f40:	2301      	movs	r3, #1
 8004f42:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004f46:	e000      	b.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8004f48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f4a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d10a      	bne.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004f52:	4b92      	ldr	r3, [pc, #584]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004f54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f56:	f023 0103 	bic.w	r1, r3, #3
 8004f5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f5e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f60:	4a8e      	ldr	r2, [pc, #568]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004f62:	430b      	orrs	r3, r1
 8004f64:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004f66:	e003      	b.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f68:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004f6c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004f70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f78:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004f7c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004f80:	2300      	movs	r3, #0
 8004f82:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004f86:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004f8a:	460b      	mov	r3, r1
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	f000 8099 	beq.w	80050c4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004f92:	4b83      	ldr	r3, [pc, #524]	@ (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4a82      	ldr	r2, [pc, #520]	@ (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004f98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f9c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004f9e:	f7fc fad7 	bl	8001550 <HAL_GetTick>
 8004fa2:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004fa6:	e00b      	b.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fa8:	f7fc fad2 	bl	8001550 <HAL_GetTick>
 8004fac:	4602      	mov	r2, r0
 8004fae:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8004fb2:	1ad3      	subs	r3, r2, r3
 8004fb4:	2b64      	cmp	r3, #100	@ 0x64
 8004fb6:	d903      	bls.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8004fb8:	2303      	movs	r3, #3
 8004fba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004fbe:	e005      	b.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004fc0:	4b77      	ldr	r3, [pc, #476]	@ (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d0ed      	beq.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8004fcc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d173      	bne.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004fd4:	4b71      	ldr	r3, [pc, #452]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004fd6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004fd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004fdc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004fe0:	4053      	eors	r3, r2
 8004fe2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d015      	beq.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004fea:	4b6c      	ldr	r3, [pc, #432]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004fec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ff2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004ff6:	4b69      	ldr	r3, [pc, #420]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004ff8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ffa:	4a68      	ldr	r2, [pc, #416]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004ffc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005000:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005002:	4b66      	ldr	r3, [pc, #408]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005004:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005006:	4a65      	ldr	r2, [pc, #404]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005008:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800500c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800500e:	4a63      	ldr	r2, [pc, #396]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005010:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005014:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005016:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800501a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800501e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005022:	d118      	bne.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005024:	f7fc fa94 	bl	8001550 <HAL_GetTick>
 8005028:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800502c:	e00d      	b.n	800504a <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800502e:	f7fc fa8f 	bl	8001550 <HAL_GetTick>
 8005032:	4602      	mov	r2, r0
 8005034:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8005038:	1ad2      	subs	r2, r2, r3
 800503a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800503e:	429a      	cmp	r2, r3
 8005040:	d903      	bls.n	800504a <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8005042:	2303      	movs	r3, #3
 8005044:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8005048:	e005      	b.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800504a:	4b54      	ldr	r3, [pc, #336]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800504c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800504e:	f003 0302 	and.w	r3, r3, #2
 8005052:	2b00      	cmp	r3, #0
 8005054:	d0eb      	beq.n	800502e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8005056:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800505a:	2b00      	cmp	r3, #0
 800505c:	d129      	bne.n	80050b2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800505e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005062:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005066:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800506a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800506e:	d10e      	bne.n	800508e <HAL_RCCEx_PeriphCLKConfig+0x846>
 8005070:	4b4a      	ldr	r3, [pc, #296]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005072:	691b      	ldr	r3, [r3, #16]
 8005074:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8005078:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800507c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005080:	091a      	lsrs	r2, r3, #4
 8005082:	4b48      	ldr	r3, [pc, #288]	@ (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005084:	4013      	ands	r3, r2
 8005086:	4a45      	ldr	r2, [pc, #276]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005088:	430b      	orrs	r3, r1
 800508a:	6113      	str	r3, [r2, #16]
 800508c:	e005      	b.n	800509a <HAL_RCCEx_PeriphCLKConfig+0x852>
 800508e:	4b43      	ldr	r3, [pc, #268]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005090:	691b      	ldr	r3, [r3, #16]
 8005092:	4a42      	ldr	r2, [pc, #264]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005094:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005098:	6113      	str	r3, [r2, #16]
 800509a:	4b40      	ldr	r3, [pc, #256]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800509c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800509e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050a2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80050a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050aa:	4a3c      	ldr	r2, [pc, #240]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80050ac:	430b      	orrs	r3, r1
 80050ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80050b0:	e008      	b.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80050b2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80050b6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 80050ba:	e003      	b.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050bc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80050c0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80050c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050cc:	f002 0301 	and.w	r3, r2, #1
 80050d0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80050d4:	2300      	movs	r3, #0
 80050d6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80050da:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80050de:	460b      	mov	r3, r1
 80050e0:	4313      	orrs	r3, r2
 80050e2:	f000 808f 	beq.w	8005204 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80050e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050ea:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80050ec:	2b28      	cmp	r3, #40	@ 0x28
 80050ee:	d871      	bhi.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80050f0:	a201      	add	r2, pc, #4	@ (adr r2, 80050f8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80050f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050f6:	bf00      	nop
 80050f8:	080051dd 	.word	0x080051dd
 80050fc:	080051d5 	.word	0x080051d5
 8005100:	080051d5 	.word	0x080051d5
 8005104:	080051d5 	.word	0x080051d5
 8005108:	080051d5 	.word	0x080051d5
 800510c:	080051d5 	.word	0x080051d5
 8005110:	080051d5 	.word	0x080051d5
 8005114:	080051d5 	.word	0x080051d5
 8005118:	080051a9 	.word	0x080051a9
 800511c:	080051d5 	.word	0x080051d5
 8005120:	080051d5 	.word	0x080051d5
 8005124:	080051d5 	.word	0x080051d5
 8005128:	080051d5 	.word	0x080051d5
 800512c:	080051d5 	.word	0x080051d5
 8005130:	080051d5 	.word	0x080051d5
 8005134:	080051d5 	.word	0x080051d5
 8005138:	080051bf 	.word	0x080051bf
 800513c:	080051d5 	.word	0x080051d5
 8005140:	080051d5 	.word	0x080051d5
 8005144:	080051d5 	.word	0x080051d5
 8005148:	080051d5 	.word	0x080051d5
 800514c:	080051d5 	.word	0x080051d5
 8005150:	080051d5 	.word	0x080051d5
 8005154:	080051d5 	.word	0x080051d5
 8005158:	080051dd 	.word	0x080051dd
 800515c:	080051d5 	.word	0x080051d5
 8005160:	080051d5 	.word	0x080051d5
 8005164:	080051d5 	.word	0x080051d5
 8005168:	080051d5 	.word	0x080051d5
 800516c:	080051d5 	.word	0x080051d5
 8005170:	080051d5 	.word	0x080051d5
 8005174:	080051d5 	.word	0x080051d5
 8005178:	080051dd 	.word	0x080051dd
 800517c:	080051d5 	.word	0x080051d5
 8005180:	080051d5 	.word	0x080051d5
 8005184:	080051d5 	.word	0x080051d5
 8005188:	080051d5 	.word	0x080051d5
 800518c:	080051d5 	.word	0x080051d5
 8005190:	080051d5 	.word	0x080051d5
 8005194:	080051d5 	.word	0x080051d5
 8005198:	080051dd 	.word	0x080051dd
 800519c:	58024400 	.word	0x58024400
 80051a0:	58024800 	.word	0x58024800
 80051a4:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80051a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051ac:	3308      	adds	r3, #8
 80051ae:	2101      	movs	r1, #1
 80051b0:	4618      	mov	r0, r3
 80051b2:	f001 fdcb 	bl	8006d4c <RCCEx_PLL2_Config>
 80051b6:	4603      	mov	r3, r0
 80051b8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80051bc:	e00f      	b.n	80051de <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80051be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051c2:	3328      	adds	r3, #40	@ 0x28
 80051c4:	2101      	movs	r1, #1
 80051c6:	4618      	mov	r0, r3
 80051c8:	f001 fe72 	bl	8006eb0 <RCCEx_PLL3_Config>
 80051cc:	4603      	mov	r3, r0
 80051ce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80051d2:	e004      	b.n	80051de <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80051d4:	2301      	movs	r3, #1
 80051d6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80051da:	e000      	b.n	80051de <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80051dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051de:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d10a      	bne.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80051e6:	4bbf      	ldr	r3, [pc, #764]	@ (80054e4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80051e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051ea:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80051ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051f2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80051f4:	4abb      	ldr	r2, [pc, #748]	@ (80054e4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80051f6:	430b      	orrs	r3, r1
 80051f8:	6553      	str	r3, [r2, #84]	@ 0x54
 80051fa:	e003      	b.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051fc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005200:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005204:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800520c:	f002 0302 	and.w	r3, r2, #2
 8005210:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005214:	2300      	movs	r3, #0
 8005216:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800521a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800521e:	460b      	mov	r3, r1
 8005220:	4313      	orrs	r3, r2
 8005222:	d041      	beq.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005224:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005228:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800522a:	2b05      	cmp	r3, #5
 800522c:	d824      	bhi.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800522e:	a201      	add	r2, pc, #4	@ (adr r2, 8005234 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8005230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005234:	08005281 	.word	0x08005281
 8005238:	0800524d 	.word	0x0800524d
 800523c:	08005263 	.word	0x08005263
 8005240:	08005281 	.word	0x08005281
 8005244:	08005281 	.word	0x08005281
 8005248:	08005281 	.word	0x08005281
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800524c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005250:	3308      	adds	r3, #8
 8005252:	2101      	movs	r1, #1
 8005254:	4618      	mov	r0, r3
 8005256:	f001 fd79 	bl	8006d4c <RCCEx_PLL2_Config>
 800525a:	4603      	mov	r3, r0
 800525c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005260:	e00f      	b.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005262:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005266:	3328      	adds	r3, #40	@ 0x28
 8005268:	2101      	movs	r1, #1
 800526a:	4618      	mov	r0, r3
 800526c:	f001 fe20 	bl	8006eb0 <RCCEx_PLL3_Config>
 8005270:	4603      	mov	r3, r0
 8005272:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005276:	e004      	b.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005278:	2301      	movs	r3, #1
 800527a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800527e:	e000      	b.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8005280:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005282:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005286:	2b00      	cmp	r3, #0
 8005288:	d10a      	bne.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800528a:	4b96      	ldr	r3, [pc, #600]	@ (80054e4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800528c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800528e:	f023 0107 	bic.w	r1, r3, #7
 8005292:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005296:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005298:	4a92      	ldr	r2, [pc, #584]	@ (80054e4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800529a:	430b      	orrs	r3, r1
 800529c:	6553      	str	r3, [r2, #84]	@ 0x54
 800529e:	e003      	b.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052a0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80052a4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80052a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052b0:	f002 0304 	and.w	r3, r2, #4
 80052b4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80052b8:	2300      	movs	r3, #0
 80052ba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80052be:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80052c2:	460b      	mov	r3, r1
 80052c4:	4313      	orrs	r3, r2
 80052c6:	d044      	beq.n	8005352 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80052c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052d0:	2b05      	cmp	r3, #5
 80052d2:	d825      	bhi.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 80052d4:	a201      	add	r2, pc, #4	@ (adr r2, 80052dc <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 80052d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052da:	bf00      	nop
 80052dc:	08005329 	.word	0x08005329
 80052e0:	080052f5 	.word	0x080052f5
 80052e4:	0800530b 	.word	0x0800530b
 80052e8:	08005329 	.word	0x08005329
 80052ec:	08005329 	.word	0x08005329
 80052f0:	08005329 	.word	0x08005329
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80052f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052f8:	3308      	adds	r3, #8
 80052fa:	2101      	movs	r1, #1
 80052fc:	4618      	mov	r0, r3
 80052fe:	f001 fd25 	bl	8006d4c <RCCEx_PLL2_Config>
 8005302:	4603      	mov	r3, r0
 8005304:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005308:	e00f      	b.n	800532a <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800530a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800530e:	3328      	adds	r3, #40	@ 0x28
 8005310:	2101      	movs	r1, #1
 8005312:	4618      	mov	r0, r3
 8005314:	f001 fdcc 	bl	8006eb0 <RCCEx_PLL3_Config>
 8005318:	4603      	mov	r3, r0
 800531a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800531e:	e004      	b.n	800532a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005320:	2301      	movs	r3, #1
 8005322:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005326:	e000      	b.n	800532a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8005328:	bf00      	nop
    }

    if (ret == HAL_OK)
 800532a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800532e:	2b00      	cmp	r3, #0
 8005330:	d10b      	bne.n	800534a <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005332:	4b6c      	ldr	r3, [pc, #432]	@ (80054e4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005334:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005336:	f023 0107 	bic.w	r1, r3, #7
 800533a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800533e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005342:	4a68      	ldr	r2, [pc, #416]	@ (80054e4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005344:	430b      	orrs	r3, r1
 8005346:	6593      	str	r3, [r2, #88]	@ 0x58
 8005348:	e003      	b.n	8005352 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800534a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800534e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005352:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800535a:	f002 0320 	and.w	r3, r2, #32
 800535e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005362:	2300      	movs	r3, #0
 8005364:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005368:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800536c:	460b      	mov	r3, r1
 800536e:	4313      	orrs	r3, r2
 8005370:	d055      	beq.n	800541e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005372:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005376:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800537a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800537e:	d033      	beq.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8005380:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005384:	d82c      	bhi.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8005386:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800538a:	d02f      	beq.n	80053ec <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800538c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005390:	d826      	bhi.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8005392:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005396:	d02b      	beq.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8005398:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800539c:	d820      	bhi.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800539e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80053a2:	d012      	beq.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0xb82>
 80053a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80053a8:	d81a      	bhi.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d022      	beq.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80053ae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80053b2:	d115      	bne.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80053b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053b8:	3308      	adds	r3, #8
 80053ba:	2100      	movs	r1, #0
 80053bc:	4618      	mov	r0, r3
 80053be:	f001 fcc5 	bl	8006d4c <RCCEx_PLL2_Config>
 80053c2:	4603      	mov	r3, r0
 80053c4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80053c8:	e015      	b.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80053ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053ce:	3328      	adds	r3, #40	@ 0x28
 80053d0:	2102      	movs	r1, #2
 80053d2:	4618      	mov	r0, r3
 80053d4:	f001 fd6c 	bl	8006eb0 <RCCEx_PLL3_Config>
 80053d8:	4603      	mov	r3, r0
 80053da:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80053de:	e00a      	b.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80053e0:	2301      	movs	r3, #1
 80053e2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80053e6:	e006      	b.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80053e8:	bf00      	nop
 80053ea:	e004      	b.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80053ec:	bf00      	nop
 80053ee:	e002      	b.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80053f0:	bf00      	nop
 80053f2:	e000      	b.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80053f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053f6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d10b      	bne.n	8005416 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80053fe:	4b39      	ldr	r3, [pc, #228]	@ (80054e4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005400:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005402:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005406:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800540a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800540e:	4a35      	ldr	r2, [pc, #212]	@ (80054e4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005410:	430b      	orrs	r3, r1
 8005412:	6553      	str	r3, [r2, #84]	@ 0x54
 8005414:	e003      	b.n	800541e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005416:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800541a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800541e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005426:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800542a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800542e:	2300      	movs	r3, #0
 8005430:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005434:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8005438:	460b      	mov	r3, r1
 800543a:	4313      	orrs	r3, r2
 800543c:	d058      	beq.n	80054f0 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800543e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005442:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005446:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800544a:	d033      	beq.n	80054b4 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800544c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005450:	d82c      	bhi.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8005452:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005456:	d02f      	beq.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8005458:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800545c:	d826      	bhi.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800545e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005462:	d02b      	beq.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8005464:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005468:	d820      	bhi.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800546a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800546e:	d012      	beq.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8005470:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005474:	d81a      	bhi.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8005476:	2b00      	cmp	r3, #0
 8005478:	d022      	beq.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800547a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800547e:	d115      	bne.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005480:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005484:	3308      	adds	r3, #8
 8005486:	2100      	movs	r1, #0
 8005488:	4618      	mov	r0, r3
 800548a:	f001 fc5f 	bl	8006d4c <RCCEx_PLL2_Config>
 800548e:	4603      	mov	r3, r0
 8005490:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005494:	e015      	b.n	80054c2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005496:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800549a:	3328      	adds	r3, #40	@ 0x28
 800549c:	2102      	movs	r1, #2
 800549e:	4618      	mov	r0, r3
 80054a0:	f001 fd06 	bl	8006eb0 <RCCEx_PLL3_Config>
 80054a4:	4603      	mov	r3, r0
 80054a6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80054aa:	e00a      	b.n	80054c2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80054ac:	2301      	movs	r3, #1
 80054ae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80054b2:	e006      	b.n	80054c2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80054b4:	bf00      	nop
 80054b6:	e004      	b.n	80054c2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80054b8:	bf00      	nop
 80054ba:	e002      	b.n	80054c2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80054bc:	bf00      	nop
 80054be:	e000      	b.n	80054c2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80054c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054c2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d10e      	bne.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80054ca:	4b06      	ldr	r3, [pc, #24]	@ (80054e4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80054cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054ce:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80054d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80054da:	4a02      	ldr	r2, [pc, #8]	@ (80054e4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80054dc:	430b      	orrs	r3, r1
 80054de:	6593      	str	r3, [r2, #88]	@ 0x58
 80054e0:	e006      	b.n	80054f0 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 80054e2:	bf00      	nop
 80054e4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054e8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80054ec:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80054f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054f8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80054fc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005500:	2300      	movs	r3, #0
 8005502:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005506:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800550a:	460b      	mov	r3, r1
 800550c:	4313      	orrs	r3, r2
 800550e:	d055      	beq.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005510:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005514:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005518:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800551c:	d033      	beq.n	8005586 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800551e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005522:	d82c      	bhi.n	800557e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005524:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005528:	d02f      	beq.n	800558a <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800552a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800552e:	d826      	bhi.n	800557e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005530:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005534:	d02b      	beq.n	800558e <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8005536:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800553a:	d820      	bhi.n	800557e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800553c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005540:	d012      	beq.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8005542:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005546:	d81a      	bhi.n	800557e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005548:	2b00      	cmp	r3, #0
 800554a:	d022      	beq.n	8005592 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800554c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005550:	d115      	bne.n	800557e <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005552:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005556:	3308      	adds	r3, #8
 8005558:	2100      	movs	r1, #0
 800555a:	4618      	mov	r0, r3
 800555c:	f001 fbf6 	bl	8006d4c <RCCEx_PLL2_Config>
 8005560:	4603      	mov	r3, r0
 8005562:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005566:	e015      	b.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005568:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800556c:	3328      	adds	r3, #40	@ 0x28
 800556e:	2102      	movs	r1, #2
 8005570:	4618      	mov	r0, r3
 8005572:	f001 fc9d 	bl	8006eb0 <RCCEx_PLL3_Config>
 8005576:	4603      	mov	r3, r0
 8005578:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800557c:	e00a      	b.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800557e:	2301      	movs	r3, #1
 8005580:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005584:	e006      	b.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8005586:	bf00      	nop
 8005588:	e004      	b.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800558a:	bf00      	nop
 800558c:	e002      	b.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800558e:	bf00      	nop
 8005590:	e000      	b.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8005592:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005594:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005598:	2b00      	cmp	r3, #0
 800559a:	d10b      	bne.n	80055b4 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800559c:	4ba0      	ldr	r3, [pc, #640]	@ (8005820 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800559e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055a0:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80055a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055a8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80055ac:	4a9c      	ldr	r2, [pc, #624]	@ (8005820 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80055ae:	430b      	orrs	r3, r1
 80055b0:	6593      	str	r3, [r2, #88]	@ 0x58
 80055b2:	e003      	b.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055b4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80055b8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 80055bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055c4:	f002 0308 	and.w	r3, r2, #8
 80055c8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80055cc:	2300      	movs	r3, #0
 80055ce:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80055d2:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80055d6:	460b      	mov	r3, r1
 80055d8:	4313      	orrs	r3, r2
 80055da:	d01e      	beq.n	800561a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 80055dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80055e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055e8:	d10c      	bne.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80055ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055ee:	3328      	adds	r3, #40	@ 0x28
 80055f0:	2102      	movs	r1, #2
 80055f2:	4618      	mov	r0, r3
 80055f4:	f001 fc5c 	bl	8006eb0 <RCCEx_PLL3_Config>
 80055f8:	4603      	mov	r3, r0
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d002      	beq.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 80055fe:	2301      	movs	r3, #1
 8005600:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8005604:	4b86      	ldr	r3, [pc, #536]	@ (8005820 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005606:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005608:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800560c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005610:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005614:	4a82      	ldr	r2, [pc, #520]	@ (8005820 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005616:	430b      	orrs	r3, r1
 8005618:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800561a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800561e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005622:	f002 0310 	and.w	r3, r2, #16
 8005626:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800562a:	2300      	movs	r3, #0
 800562c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005630:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8005634:	460b      	mov	r3, r1
 8005636:	4313      	orrs	r3, r2
 8005638:	d01e      	beq.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800563a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800563e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005642:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005646:	d10c      	bne.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005648:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800564c:	3328      	adds	r3, #40	@ 0x28
 800564e:	2102      	movs	r1, #2
 8005650:	4618      	mov	r0, r3
 8005652:	f001 fc2d 	bl	8006eb0 <RCCEx_PLL3_Config>
 8005656:	4603      	mov	r3, r0
 8005658:	2b00      	cmp	r3, #0
 800565a:	d002      	beq.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800565c:	2301      	movs	r3, #1
 800565e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005662:	4b6f      	ldr	r3, [pc, #444]	@ (8005820 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005664:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005666:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800566a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800566e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005672:	4a6b      	ldr	r2, [pc, #428]	@ (8005820 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005674:	430b      	orrs	r3, r1
 8005676:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005678:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800567c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005680:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8005684:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005686:	2300      	movs	r3, #0
 8005688:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800568a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800568e:	460b      	mov	r3, r1
 8005690:	4313      	orrs	r3, r2
 8005692:	d03e      	beq.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005694:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005698:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800569c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80056a0:	d022      	beq.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80056a2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80056a6:	d81b      	bhi.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d003      	beq.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 80056ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80056b0:	d00b      	beq.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0xe82>
 80056b2:	e015      	b.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80056b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056b8:	3308      	adds	r3, #8
 80056ba:	2100      	movs	r1, #0
 80056bc:	4618      	mov	r0, r3
 80056be:	f001 fb45 	bl	8006d4c <RCCEx_PLL2_Config>
 80056c2:	4603      	mov	r3, r0
 80056c4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80056c8:	e00f      	b.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80056ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056ce:	3328      	adds	r3, #40	@ 0x28
 80056d0:	2102      	movs	r1, #2
 80056d2:	4618      	mov	r0, r3
 80056d4:	f001 fbec 	bl	8006eb0 <RCCEx_PLL3_Config>
 80056d8:	4603      	mov	r3, r0
 80056da:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80056de:	e004      	b.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80056e0:	2301      	movs	r3, #1
 80056e2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80056e6:	e000      	b.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 80056e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056ea:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d10b      	bne.n	800570a <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80056f2:	4b4b      	ldr	r3, [pc, #300]	@ (8005820 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80056f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056f6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80056fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056fe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005702:	4a47      	ldr	r2, [pc, #284]	@ (8005820 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005704:	430b      	orrs	r3, r1
 8005706:	6593      	str	r3, [r2, #88]	@ 0x58
 8005708:	e003      	b.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800570a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800570e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005712:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800571a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800571e:	673b      	str	r3, [r7, #112]	@ 0x70
 8005720:	2300      	movs	r3, #0
 8005722:	677b      	str	r3, [r7, #116]	@ 0x74
 8005724:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8005728:	460b      	mov	r3, r1
 800572a:	4313      	orrs	r3, r2
 800572c:	d03b      	beq.n	80057a6 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800572e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005732:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005736:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800573a:	d01f      	beq.n	800577c <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800573c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005740:	d818      	bhi.n	8005774 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8005742:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005746:	d003      	beq.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8005748:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800574c:	d007      	beq.n	800575e <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800574e:	e011      	b.n	8005774 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005750:	4b33      	ldr	r3, [pc, #204]	@ (8005820 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005752:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005754:	4a32      	ldr	r2, [pc, #200]	@ (8005820 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005756:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800575a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800575c:	e00f      	b.n	800577e <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800575e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005762:	3328      	adds	r3, #40	@ 0x28
 8005764:	2101      	movs	r1, #1
 8005766:	4618      	mov	r0, r3
 8005768:	f001 fba2 	bl	8006eb0 <RCCEx_PLL3_Config>
 800576c:	4603      	mov	r3, r0
 800576e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8005772:	e004      	b.n	800577e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005774:	2301      	movs	r3, #1
 8005776:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800577a:	e000      	b.n	800577e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800577c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800577e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005782:	2b00      	cmp	r3, #0
 8005784:	d10b      	bne.n	800579e <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005786:	4b26      	ldr	r3, [pc, #152]	@ (8005820 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005788:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800578a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800578e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005792:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005796:	4a22      	ldr	r2, [pc, #136]	@ (8005820 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005798:	430b      	orrs	r3, r1
 800579a:	6553      	str	r3, [r2, #84]	@ 0x54
 800579c:	e003      	b.n	80057a6 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800579e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80057a2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80057a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ae:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80057b2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80057b4:	2300      	movs	r3, #0
 80057b6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80057b8:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80057bc:	460b      	mov	r3, r1
 80057be:	4313      	orrs	r3, r2
 80057c0:	d034      	beq.n	800582c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80057c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d003      	beq.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 80057cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80057d0:	d007      	beq.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 80057d2:	e011      	b.n	80057f8 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057d4:	4b12      	ldr	r3, [pc, #72]	@ (8005820 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80057d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057d8:	4a11      	ldr	r2, [pc, #68]	@ (8005820 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80057da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80057de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80057e0:	e00e      	b.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80057e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057e6:	3308      	adds	r3, #8
 80057e8:	2102      	movs	r1, #2
 80057ea:	4618      	mov	r0, r3
 80057ec:	f001 faae 	bl	8006d4c <RCCEx_PLL2_Config>
 80057f0:	4603      	mov	r3, r0
 80057f2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80057f6:	e003      	b.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 80057f8:	2301      	movs	r3, #1
 80057fa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80057fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005800:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005804:	2b00      	cmp	r3, #0
 8005806:	d10d      	bne.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005808:	4b05      	ldr	r3, [pc, #20]	@ (8005820 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800580a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800580c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005810:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005814:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005816:	4a02      	ldr	r2, [pc, #8]	@ (8005820 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005818:	430b      	orrs	r3, r1
 800581a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800581c:	e006      	b.n	800582c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800581e:	bf00      	nop
 8005820:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005824:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005828:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800582c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005834:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8005838:	663b      	str	r3, [r7, #96]	@ 0x60
 800583a:	2300      	movs	r3, #0
 800583c:	667b      	str	r3, [r7, #100]	@ 0x64
 800583e:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8005842:	460b      	mov	r3, r1
 8005844:	4313      	orrs	r3, r2
 8005846:	d00c      	beq.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005848:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800584c:	3328      	adds	r3, #40	@ 0x28
 800584e:	2102      	movs	r1, #2
 8005850:	4618      	mov	r0, r3
 8005852:	f001 fb2d 	bl	8006eb0 <RCCEx_PLL3_Config>
 8005856:	4603      	mov	r3, r0
 8005858:	2b00      	cmp	r3, #0
 800585a:	d002      	beq.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800585c:	2301      	movs	r3, #1
 800585e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005862:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800586a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800586e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005870:	2300      	movs	r3, #0
 8005872:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005874:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8005878:	460b      	mov	r3, r1
 800587a:	4313      	orrs	r3, r2
 800587c:	d036      	beq.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800587e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005882:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005884:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005888:	d018      	beq.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800588a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800588e:	d811      	bhi.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8005890:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005894:	d014      	beq.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8005896:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800589a:	d80b      	bhi.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800589c:	2b00      	cmp	r3, #0
 800589e:	d011      	beq.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 80058a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80058a4:	d106      	bne.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058a6:	4bb7      	ldr	r3, [pc, #732]	@ (8005b84 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80058a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058aa:	4ab6      	ldr	r2, [pc, #728]	@ (8005b84 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80058ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80058b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80058b2:	e008      	b.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80058b4:	2301      	movs	r3, #1
 80058b6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80058ba:	e004      	b.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80058bc:	bf00      	nop
 80058be:	e002      	b.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80058c0:	bf00      	nop
 80058c2:	e000      	b.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80058c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058c6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d10a      	bne.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80058ce:	4bad      	ldr	r3, [pc, #692]	@ (8005b84 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80058d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058d2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80058d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058da:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80058dc:	4aa9      	ldr	r2, [pc, #676]	@ (8005b84 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80058de:	430b      	orrs	r3, r1
 80058e0:	6553      	str	r3, [r2, #84]	@ 0x54
 80058e2:	e003      	b.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058e4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80058e8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80058ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058f4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80058f8:	653b      	str	r3, [r7, #80]	@ 0x50
 80058fa:	2300      	movs	r3, #0
 80058fc:	657b      	str	r3, [r7, #84]	@ 0x54
 80058fe:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8005902:	460b      	mov	r3, r1
 8005904:	4313      	orrs	r3, r2
 8005906:	d009      	beq.n	800591c <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005908:	4b9e      	ldr	r3, [pc, #632]	@ (8005b84 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800590a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800590c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005910:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005914:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005916:	4a9b      	ldr	r2, [pc, #620]	@ (8005b84 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005918:	430b      	orrs	r3, r1
 800591a:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800591c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005924:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8005928:	64bb      	str	r3, [r7, #72]	@ 0x48
 800592a:	2300      	movs	r3, #0
 800592c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800592e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8005932:	460b      	mov	r3, r1
 8005934:	4313      	orrs	r3, r2
 8005936:	d009      	beq.n	800594c <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005938:	4b92      	ldr	r3, [pc, #584]	@ (8005b84 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800593a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800593c:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8005940:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005944:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005946:	4a8f      	ldr	r2, [pc, #572]	@ (8005b84 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005948:	430b      	orrs	r3, r1
 800594a:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800594c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005954:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8005958:	643b      	str	r3, [r7, #64]	@ 0x40
 800595a:	2300      	movs	r3, #0
 800595c:	647b      	str	r3, [r7, #68]	@ 0x44
 800595e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8005962:	460b      	mov	r3, r1
 8005964:	4313      	orrs	r3, r2
 8005966:	d00e      	beq.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005968:	4b86      	ldr	r3, [pc, #536]	@ (8005b84 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800596a:	691b      	ldr	r3, [r3, #16]
 800596c:	4a85      	ldr	r2, [pc, #532]	@ (8005b84 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800596e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005972:	6113      	str	r3, [r2, #16]
 8005974:	4b83      	ldr	r3, [pc, #524]	@ (8005b84 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005976:	6919      	ldr	r1, [r3, #16]
 8005978:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800597c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005980:	4a80      	ldr	r2, [pc, #512]	@ (8005b84 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005982:	430b      	orrs	r3, r1
 8005984:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005986:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800598a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800598e:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8005992:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005994:	2300      	movs	r3, #0
 8005996:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005998:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800599c:	460b      	mov	r3, r1
 800599e:	4313      	orrs	r3, r2
 80059a0:	d009      	beq.n	80059b6 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80059a2:	4b78      	ldr	r3, [pc, #480]	@ (8005b84 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80059a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059a6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80059aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059b0:	4a74      	ldr	r2, [pc, #464]	@ (8005b84 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80059b2:	430b      	orrs	r3, r1
 80059b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80059b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059be:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80059c2:	633b      	str	r3, [r7, #48]	@ 0x30
 80059c4:	2300      	movs	r3, #0
 80059c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80059c8:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80059cc:	460b      	mov	r3, r1
 80059ce:	4313      	orrs	r3, r2
 80059d0:	d00a      	beq.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80059d2:	4b6c      	ldr	r3, [pc, #432]	@ (8005b84 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80059d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059d6:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80059da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059e2:	4a68      	ldr	r2, [pc, #416]	@ (8005b84 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80059e4:	430b      	orrs	r3, r1
 80059e6:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80059e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059f0:	2100      	movs	r1, #0
 80059f2:	62b9      	str	r1, [r7, #40]	@ 0x28
 80059f4:	f003 0301 	and.w	r3, r3, #1
 80059f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80059fa:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80059fe:	460b      	mov	r3, r1
 8005a00:	4313      	orrs	r3, r2
 8005a02:	d011      	beq.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005a04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a08:	3308      	adds	r3, #8
 8005a0a:	2100      	movs	r1, #0
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	f001 f99d 	bl	8006d4c <RCCEx_PLL2_Config>
 8005a12:	4603      	mov	r3, r0
 8005a14:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8005a18:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d003      	beq.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a20:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005a24:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005a28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a30:	2100      	movs	r1, #0
 8005a32:	6239      	str	r1, [r7, #32]
 8005a34:	f003 0302 	and.w	r3, r3, #2
 8005a38:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a3a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005a3e:	460b      	mov	r3, r1
 8005a40:	4313      	orrs	r3, r2
 8005a42:	d011      	beq.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005a44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a48:	3308      	adds	r3, #8
 8005a4a:	2101      	movs	r1, #1
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	f001 f97d 	bl	8006d4c <RCCEx_PLL2_Config>
 8005a52:	4603      	mov	r3, r0
 8005a54:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8005a58:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d003      	beq.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a60:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005a64:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005a68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a70:	2100      	movs	r1, #0
 8005a72:	61b9      	str	r1, [r7, #24]
 8005a74:	f003 0304 	and.w	r3, r3, #4
 8005a78:	61fb      	str	r3, [r7, #28]
 8005a7a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005a7e:	460b      	mov	r3, r1
 8005a80:	4313      	orrs	r3, r2
 8005a82:	d011      	beq.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005a84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a88:	3308      	adds	r3, #8
 8005a8a:	2102      	movs	r1, #2
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	f001 f95d 	bl	8006d4c <RCCEx_PLL2_Config>
 8005a92:	4603      	mov	r3, r0
 8005a94:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8005a98:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d003      	beq.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005aa0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005aa4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005aa8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ab0:	2100      	movs	r1, #0
 8005ab2:	6139      	str	r1, [r7, #16]
 8005ab4:	f003 0308 	and.w	r3, r3, #8
 8005ab8:	617b      	str	r3, [r7, #20]
 8005aba:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005abe:	460b      	mov	r3, r1
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	d011      	beq.n	8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005ac4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ac8:	3328      	adds	r3, #40	@ 0x28
 8005aca:	2100      	movs	r1, #0
 8005acc:	4618      	mov	r0, r3
 8005ace:	f001 f9ef 	bl	8006eb0 <RCCEx_PLL3_Config>
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8005ad8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d003      	beq.n	8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ae0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005ae4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005ae8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005af0:	2100      	movs	r1, #0
 8005af2:	60b9      	str	r1, [r7, #8]
 8005af4:	f003 0310 	and.w	r3, r3, #16
 8005af8:	60fb      	str	r3, [r7, #12]
 8005afa:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005afe:	460b      	mov	r3, r1
 8005b00:	4313      	orrs	r3, r2
 8005b02:	d011      	beq.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005b04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b08:	3328      	adds	r3, #40	@ 0x28
 8005b0a:	2101      	movs	r1, #1
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	f001 f9cf 	bl	8006eb0 <RCCEx_PLL3_Config>
 8005b12:	4603      	mov	r3, r0
 8005b14:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8005b18:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d003      	beq.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b20:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005b24:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005b28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b30:	2100      	movs	r1, #0
 8005b32:	6039      	str	r1, [r7, #0]
 8005b34:	f003 0320 	and.w	r3, r3, #32
 8005b38:	607b      	str	r3, [r7, #4]
 8005b3a:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005b3e:	460b      	mov	r3, r1
 8005b40:	4313      	orrs	r3, r2
 8005b42:	d011      	beq.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005b44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b48:	3328      	adds	r3, #40	@ 0x28
 8005b4a:	2102      	movs	r1, #2
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	f001 f9af 	bl	8006eb0 <RCCEx_PLL3_Config>
 8005b52:	4603      	mov	r3, r0
 8005b54:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8005b58:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d003      	beq.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b60:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005b64:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8005b68:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d101      	bne.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8005b70:	2300      	movs	r3, #0
 8005b72:	e000      	b.n	8005b76 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8005b74:	2301      	movs	r3, #1
}
 8005b76:	4618      	mov	r0, r3
 8005b78:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b82:	bf00      	nop
 8005b84:	58024400 	.word	0x58024400

08005b88 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b090      	sub	sp, #64	@ 0x40
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005b92:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b96:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8005b9a:	430b      	orrs	r3, r1
 8005b9c:	f040 8094 	bne.w	8005cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8005ba0:	4b9b      	ldr	r3, [pc, #620]	@ (8005e10 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005ba2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ba4:	f003 0307 	and.w	r3, r3, #7
 8005ba8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8005baa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bac:	2b04      	cmp	r3, #4
 8005bae:	f200 8087 	bhi.w	8005cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8005bb2:	a201      	add	r2, pc, #4	@ (adr r2, 8005bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8005bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bb8:	08005bcd 	.word	0x08005bcd
 8005bbc:	08005bf5 	.word	0x08005bf5
 8005bc0:	08005c1d 	.word	0x08005c1d
 8005bc4:	08005cb9 	.word	0x08005cb9
 8005bc8:	08005c45 	.word	0x08005c45
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005bcc:	4b90      	ldr	r3, [pc, #576]	@ (8005e10 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005bd4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005bd8:	d108      	bne.n	8005bec <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005bda:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005bde:	4618      	mov	r0, r3
 8005be0:	f000 ff62 	bl	8006aa8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005be4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005be6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005be8:	f000 bc93 	b.w	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005bec:	2300      	movs	r3, #0
 8005bee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005bf0:	f000 bc8f 	b.w	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005bf4:	4b86      	ldr	r3, [pc, #536]	@ (8005e10 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005bfc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005c00:	d108      	bne.n	8005c14 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005c02:	f107 0318 	add.w	r3, r7, #24
 8005c06:	4618      	mov	r0, r3
 8005c08:	f000 fca6 	bl	8006558 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005c0c:	69bb      	ldr	r3, [r7, #24]
 8005c0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005c10:	f000 bc7f 	b.w	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005c14:	2300      	movs	r3, #0
 8005c16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c18:	f000 bc7b 	b.w	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005c1c:	4b7c      	ldr	r3, [pc, #496]	@ (8005e10 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005c24:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005c28:	d108      	bne.n	8005c3c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005c2a:	f107 030c 	add.w	r3, r7, #12
 8005c2e:	4618      	mov	r0, r3
 8005c30:	f000 fde6 	bl	8006800 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005c38:	f000 bc6b 	b.w	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c40:	f000 bc67 	b.w	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005c44:	4b72      	ldr	r3, [pc, #456]	@ (8005e10 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005c46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c48:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005c4c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005c4e:	4b70      	ldr	r3, [pc, #448]	@ (8005e10 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f003 0304 	and.w	r3, r3, #4
 8005c56:	2b04      	cmp	r3, #4
 8005c58:	d10c      	bne.n	8005c74 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8005c5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d109      	bne.n	8005c74 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005c60:	4b6b      	ldr	r3, [pc, #428]	@ (8005e10 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	08db      	lsrs	r3, r3, #3
 8005c66:	f003 0303 	and.w	r3, r3, #3
 8005c6a:	4a6a      	ldr	r2, [pc, #424]	@ (8005e14 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8005c6c:	fa22 f303 	lsr.w	r3, r2, r3
 8005c70:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005c72:	e01f      	b.n	8005cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005c74:	4b66      	ldr	r3, [pc, #408]	@ (8005e10 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c7c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005c80:	d106      	bne.n	8005c90 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8005c82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c84:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005c88:	d102      	bne.n	8005c90 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005c8a:	4b63      	ldr	r3, [pc, #396]	@ (8005e18 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005c8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005c8e:	e011      	b.n	8005cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005c90:	4b5f      	ldr	r3, [pc, #380]	@ (8005e10 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c98:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005c9c:	d106      	bne.n	8005cac <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8005c9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ca0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005ca4:	d102      	bne.n	8005cac <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005ca6:	4b5d      	ldr	r3, [pc, #372]	@ (8005e1c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005ca8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005caa:	e003      	b.n	8005cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005cac:	2300      	movs	r3, #0
 8005cae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8005cb0:	f000 bc2f 	b.w	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8005cb4:	f000 bc2d 	b.w	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005cb8:	4b59      	ldr	r3, [pc, #356]	@ (8005e20 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005cba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005cbc:	f000 bc29 	b.w	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005cc4:	f000 bc25 	b.w	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8005cc8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ccc:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8005cd0:	430b      	orrs	r3, r1
 8005cd2:	f040 80a7 	bne.w	8005e24 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8005cd6:	4b4e      	ldr	r3, [pc, #312]	@ (8005e10 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005cd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cda:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8005cde:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8005ce0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ce2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005ce6:	d054      	beq.n	8005d92 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 8005ce8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cea:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005cee:	f200 808b 	bhi.w	8005e08 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8005cf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cf4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005cf8:	f000 8083 	beq.w	8005e02 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 8005cfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cfe:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005d02:	f200 8081 	bhi.w	8005e08 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8005d06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d08:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005d0c:	d02f      	beq.n	8005d6e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8005d0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d10:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005d14:	d878      	bhi.n	8005e08 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8005d16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d004      	beq.n	8005d26 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 8005d1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d1e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005d22:	d012      	beq.n	8005d4a <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 8005d24:	e070      	b.n	8005e08 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005d26:	4b3a      	ldr	r3, [pc, #232]	@ (8005e10 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d2e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005d32:	d107      	bne.n	8005d44 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005d34:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005d38:	4618      	mov	r0, r3
 8005d3a:	f000 feb5 	bl	8006aa8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005d3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005d42:	e3e6      	b.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005d44:	2300      	movs	r3, #0
 8005d46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d48:	e3e3      	b.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005d4a:	4b31      	ldr	r3, [pc, #196]	@ (8005e10 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005d52:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005d56:	d107      	bne.n	8005d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005d58:	f107 0318 	add.w	r3, r7, #24
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	f000 fbfb 	bl	8006558 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005d62:	69bb      	ldr	r3, [r7, #24]
 8005d64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005d66:	e3d4      	b.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005d68:	2300      	movs	r3, #0
 8005d6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d6c:	e3d1      	b.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005d6e:	4b28      	ldr	r3, [pc, #160]	@ (8005e10 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005d76:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005d7a:	d107      	bne.n	8005d8c <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005d7c:	f107 030c 	add.w	r3, r7, #12
 8005d80:	4618      	mov	r0, r3
 8005d82:	f000 fd3d 	bl	8006800 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005d8a:	e3c2      	b.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d90:	e3bf      	b.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005d92:	4b1f      	ldr	r3, [pc, #124]	@ (8005e10 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005d94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d96:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005d9a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005d9c:	4b1c      	ldr	r3, [pc, #112]	@ (8005e10 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f003 0304 	and.w	r3, r3, #4
 8005da4:	2b04      	cmp	r3, #4
 8005da6:	d10c      	bne.n	8005dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 8005da8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d109      	bne.n	8005dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005dae:	4b18      	ldr	r3, [pc, #96]	@ (8005e10 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	08db      	lsrs	r3, r3, #3
 8005db4:	f003 0303 	and.w	r3, r3, #3
 8005db8:	4a16      	ldr	r2, [pc, #88]	@ (8005e14 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8005dba:	fa22 f303 	lsr.w	r3, r2, r3
 8005dbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005dc0:	e01e      	b.n	8005e00 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005dc2:	4b13      	ldr	r3, [pc, #76]	@ (8005e10 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005dca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005dce:	d106      	bne.n	8005dde <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 8005dd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005dd2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005dd6:	d102      	bne.n	8005dde <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005dd8:	4b0f      	ldr	r3, [pc, #60]	@ (8005e18 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005dda:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005ddc:	e010      	b.n	8005e00 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005dde:	4b0c      	ldr	r3, [pc, #48]	@ (8005e10 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005de6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005dea:	d106      	bne.n	8005dfa <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8005dec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005dee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005df2:	d102      	bne.n	8005dfa <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005df4:	4b09      	ldr	r3, [pc, #36]	@ (8005e1c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005df6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005df8:	e002      	b.n	8005e00 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8005dfe:	e388      	b.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8005e00:	e387      	b.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005e02:	4b07      	ldr	r3, [pc, #28]	@ (8005e20 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005e04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e06:	e384      	b.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8005e08:	2300      	movs	r3, #0
 8005e0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e0c:	e381      	b.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8005e0e:	bf00      	nop
 8005e10:	58024400 	.word	0x58024400
 8005e14:	03d09000 	.word	0x03d09000
 8005e18:	003d0900 	.word	0x003d0900
 8005e1c:	007a1200 	.word	0x007a1200
 8005e20:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8005e24:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005e28:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8005e2c:	430b      	orrs	r3, r1
 8005e2e:	f040 809c 	bne.w	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8005e32:	4b9e      	ldr	r3, [pc, #632]	@ (80060ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005e34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e36:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8005e3a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8005e3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e3e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005e42:	d054      	beq.n	8005eee <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 8005e44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e46:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005e4a:	f200 808b 	bhi.w	8005f64 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8005e4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e50:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005e54:	f000 8083 	beq.w	8005f5e <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 8005e58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e5a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005e5e:	f200 8081 	bhi.w	8005f64 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8005e62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e64:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005e68:	d02f      	beq.n	8005eca <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 8005e6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e6c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005e70:	d878      	bhi.n	8005f64 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8005e72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d004      	beq.n	8005e82 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8005e78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e7a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005e7e:	d012      	beq.n	8005ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8005e80:	e070      	b.n	8005f64 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005e82:	4b8a      	ldr	r3, [pc, #552]	@ (80060ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e8a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005e8e:	d107      	bne.n	8005ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005e90:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005e94:	4618      	mov	r0, r3
 8005e96:	f000 fe07 	bl	8006aa8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005e9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005e9e:	e338      	b.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ea4:	e335      	b.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005ea6:	4b81      	ldr	r3, [pc, #516]	@ (80060ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005eae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005eb2:	d107      	bne.n	8005ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005eb4:	f107 0318 	add.w	r3, r7, #24
 8005eb8:	4618      	mov	r0, r3
 8005eba:	f000 fb4d 	bl	8006558 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005ebe:	69bb      	ldr	r3, [r7, #24]
 8005ec0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005ec2:	e326      	b.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ec8:	e323      	b.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005eca:	4b78      	ldr	r3, [pc, #480]	@ (80060ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005ed2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005ed6:	d107      	bne.n	8005ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005ed8:	f107 030c 	add.w	r3, r7, #12
 8005edc:	4618      	mov	r0, r3
 8005ede:	f000 fc8f 	bl	8006800 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005ee6:	e314      	b.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005ee8:	2300      	movs	r3, #0
 8005eea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005eec:	e311      	b.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005eee:	4b6f      	ldr	r3, [pc, #444]	@ (80060ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005ef0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ef2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005ef6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005ef8:	4b6c      	ldr	r3, [pc, #432]	@ (80060ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f003 0304 	and.w	r3, r3, #4
 8005f00:	2b04      	cmp	r3, #4
 8005f02:	d10c      	bne.n	8005f1e <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8005f04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d109      	bne.n	8005f1e <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005f0a:	4b68      	ldr	r3, [pc, #416]	@ (80060ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	08db      	lsrs	r3, r3, #3
 8005f10:	f003 0303 	and.w	r3, r3, #3
 8005f14:	4a66      	ldr	r2, [pc, #408]	@ (80060b0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8005f16:	fa22 f303 	lsr.w	r3, r2, r3
 8005f1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005f1c:	e01e      	b.n	8005f5c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005f1e:	4b63      	ldr	r3, [pc, #396]	@ (80060ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f26:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005f2a:	d106      	bne.n	8005f3a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8005f2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f2e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005f32:	d102      	bne.n	8005f3a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005f34:	4b5f      	ldr	r3, [pc, #380]	@ (80060b4 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8005f36:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005f38:	e010      	b.n	8005f5c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005f3a:	4b5c      	ldr	r3, [pc, #368]	@ (80060ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f42:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005f46:	d106      	bne.n	8005f56 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 8005f48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f4a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005f4e:	d102      	bne.n	8005f56 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005f50:	4b59      	ldr	r3, [pc, #356]	@ (80060b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005f52:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005f54:	e002      	b.n	8005f5c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005f56:	2300      	movs	r3, #0
 8005f58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8005f5a:	e2da      	b.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8005f5c:	e2d9      	b.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005f5e:	4b57      	ldr	r3, [pc, #348]	@ (80060bc <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8005f60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005f62:	e2d6      	b.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8005f64:	2300      	movs	r3, #0
 8005f66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005f68:	e2d3      	b.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8005f6a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f6e:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8005f72:	430b      	orrs	r3, r1
 8005f74:	f040 80a7 	bne.w	80060c6 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8005f78:	4b4c      	ldr	r3, [pc, #304]	@ (80060ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005f7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f7c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8005f80:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8005f82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f84:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005f88:	d055      	beq.n	8006036 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 8005f8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f8c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005f90:	f200 8096 	bhi.w	80060c0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8005f94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f96:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005f9a:	f000 8084 	beq.w	80060a6 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 8005f9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fa0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005fa4:	f200 808c 	bhi.w	80060c0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8005fa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005faa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005fae:	d030      	beq.n	8006012 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8005fb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fb2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005fb6:	f200 8083 	bhi.w	80060c0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8005fba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d004      	beq.n	8005fca <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 8005fc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fc2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005fc6:	d012      	beq.n	8005fee <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8005fc8:	e07a      	b.n	80060c0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005fca:	4b38      	ldr	r3, [pc, #224]	@ (80060ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005fd2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005fd6:	d107      	bne.n	8005fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005fd8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005fdc:	4618      	mov	r0, r3
 8005fde:	f000 fd63 	bl	8006aa8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005fe2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fe4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005fe6:	e294      	b.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005fe8:	2300      	movs	r3, #0
 8005fea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005fec:	e291      	b.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005fee:	4b2f      	ldr	r3, [pc, #188]	@ (80060ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005ff6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005ffa:	d107      	bne.n	800600c <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005ffc:	f107 0318 	add.w	r3, r7, #24
 8006000:	4618      	mov	r0, r3
 8006002:	f000 faa9 	bl	8006558 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006006:	69bb      	ldr	r3, [r7, #24]
 8006008:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800600a:	e282      	b.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800600c:	2300      	movs	r3, #0
 800600e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006010:	e27f      	b.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006012:	4b26      	ldr	r3, [pc, #152]	@ (80060ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800601a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800601e:	d107      	bne.n	8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006020:	f107 030c 	add.w	r3, r7, #12
 8006024:	4618      	mov	r0, r3
 8006026:	f000 fbeb 	bl	8006800 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800602e:	e270      	b.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006030:	2300      	movs	r3, #0
 8006032:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006034:	e26d      	b.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006036:	4b1d      	ldr	r3, [pc, #116]	@ (80060ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006038:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800603a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800603e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006040:	4b1a      	ldr	r3, [pc, #104]	@ (80060ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f003 0304 	and.w	r3, r3, #4
 8006048:	2b04      	cmp	r3, #4
 800604a:	d10c      	bne.n	8006066 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800604c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800604e:	2b00      	cmp	r3, #0
 8006050:	d109      	bne.n	8006066 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006052:	4b16      	ldr	r3, [pc, #88]	@ (80060ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	08db      	lsrs	r3, r3, #3
 8006058:	f003 0303 	and.w	r3, r3, #3
 800605c:	4a14      	ldr	r2, [pc, #80]	@ (80060b0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800605e:	fa22 f303 	lsr.w	r3, r2, r3
 8006062:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006064:	e01e      	b.n	80060a4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006066:	4b11      	ldr	r3, [pc, #68]	@ (80060ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800606e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006072:	d106      	bne.n	8006082 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8006074:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006076:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800607a:	d102      	bne.n	8006082 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800607c:	4b0d      	ldr	r3, [pc, #52]	@ (80060b4 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800607e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006080:	e010      	b.n	80060a4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006082:	4b0a      	ldr	r3, [pc, #40]	@ (80060ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800608a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800608e:	d106      	bne.n	800609e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8006090:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006092:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006096:	d102      	bne.n	800609e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006098:	4b07      	ldr	r3, [pc, #28]	@ (80060b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800609a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800609c:	e002      	b.n	80060a4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800609e:	2300      	movs	r3, #0
 80060a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80060a2:	e236      	b.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80060a4:	e235      	b.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80060a6:	4b05      	ldr	r3, [pc, #20]	@ (80060bc <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80060a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80060aa:	e232      	b.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80060ac:	58024400 	.word	0x58024400
 80060b0:	03d09000 	.word	0x03d09000
 80060b4:	003d0900 	.word	0x003d0900
 80060b8:	007a1200 	.word	0x007a1200
 80060bc:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 80060c0:	2300      	movs	r3, #0
 80060c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80060c4:	e225      	b.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80060c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80060ca:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 80060ce:	430b      	orrs	r3, r1
 80060d0:	f040 8085 	bne.w	80061de <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80060d4:	4b9c      	ldr	r3, [pc, #624]	@ (8006348 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80060d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060d8:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 80060dc:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 80060de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80060e4:	d06b      	beq.n	80061be <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 80060e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060e8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80060ec:	d874      	bhi.n	80061d8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 80060ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060f0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80060f4:	d056      	beq.n	80061a4 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 80060f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060f8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80060fc:	d86c      	bhi.n	80061d8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 80060fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006100:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006104:	d03b      	beq.n	800617e <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8006106:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006108:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800610c:	d864      	bhi.n	80061d8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800610e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006110:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006114:	d021      	beq.n	800615a <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 8006116:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006118:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800611c:	d85c      	bhi.n	80061d8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800611e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006120:	2b00      	cmp	r3, #0
 8006122:	d004      	beq.n	800612e <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 8006124:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006126:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800612a:	d004      	beq.n	8006136 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800612c:	e054      	b.n	80061d8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800612e:	f7fe fb5f 	bl	80047f0 <HAL_RCC_GetPCLK1Freq>
 8006132:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006134:	e1ed      	b.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006136:	4b84      	ldr	r3, [pc, #528]	@ (8006348 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800613e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006142:	d107      	bne.n	8006154 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006144:	f107 0318 	add.w	r3, r7, #24
 8006148:	4618      	mov	r0, r3
 800614a:	f000 fa05 	bl	8006558 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800614e:	69fb      	ldr	r3, [r7, #28]
 8006150:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006152:	e1de      	b.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006154:	2300      	movs	r3, #0
 8006156:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006158:	e1db      	b.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800615a:	4b7b      	ldr	r3, [pc, #492]	@ (8006348 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006162:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006166:	d107      	bne.n	8006178 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006168:	f107 030c 	add.w	r3, r7, #12
 800616c:	4618      	mov	r0, r3
 800616e:	f000 fb47 	bl	8006800 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006172:	693b      	ldr	r3, [r7, #16]
 8006174:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006176:	e1cc      	b.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006178:	2300      	movs	r3, #0
 800617a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800617c:	e1c9      	b.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800617e:	4b72      	ldr	r3, [pc, #456]	@ (8006348 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f003 0304 	and.w	r3, r3, #4
 8006186:	2b04      	cmp	r3, #4
 8006188:	d109      	bne.n	800619e <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800618a:	4b6f      	ldr	r3, [pc, #444]	@ (8006348 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	08db      	lsrs	r3, r3, #3
 8006190:	f003 0303 	and.w	r3, r3, #3
 8006194:	4a6d      	ldr	r2, [pc, #436]	@ (800634c <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8006196:	fa22 f303 	lsr.w	r3, r2, r3
 800619a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800619c:	e1b9      	b.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800619e:	2300      	movs	r3, #0
 80061a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80061a2:	e1b6      	b.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80061a4:	4b68      	ldr	r3, [pc, #416]	@ (8006348 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80061b0:	d102      	bne.n	80061b8 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 80061b2:	4b67      	ldr	r3, [pc, #412]	@ (8006350 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 80061b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80061b6:	e1ac      	b.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80061b8:	2300      	movs	r3, #0
 80061ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80061bc:	e1a9      	b.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80061be:	4b62      	ldr	r3, [pc, #392]	@ (8006348 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80061c6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80061ca:	d102      	bne.n	80061d2 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 80061cc:	4b61      	ldr	r3, [pc, #388]	@ (8006354 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 80061ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80061d0:	e19f      	b.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80061d2:	2300      	movs	r3, #0
 80061d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80061d6:	e19c      	b.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 80061d8:	2300      	movs	r3, #0
 80061da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80061dc:	e199      	b.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80061de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80061e2:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 80061e6:	430b      	orrs	r3, r1
 80061e8:	d173      	bne.n	80062d2 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80061ea:	4b57      	ldr	r3, [pc, #348]	@ (8006348 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80061ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061ee:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80061f2:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80061f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061f6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80061fa:	d02f      	beq.n	800625c <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 80061fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061fe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006202:	d863      	bhi.n	80062cc <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 8006204:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006206:	2b00      	cmp	r3, #0
 8006208:	d004      	beq.n	8006214 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800620a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800620c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006210:	d012      	beq.n	8006238 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 8006212:	e05b      	b.n	80062cc <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006214:	4b4c      	ldr	r3, [pc, #304]	@ (8006348 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800621c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006220:	d107      	bne.n	8006232 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006222:	f107 0318 	add.w	r3, r7, #24
 8006226:	4618      	mov	r0, r3
 8006228:	f000 f996 	bl	8006558 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800622c:	69bb      	ldr	r3, [r7, #24]
 800622e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006230:	e16f      	b.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006232:	2300      	movs	r3, #0
 8006234:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006236:	e16c      	b.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006238:	4b43      	ldr	r3, [pc, #268]	@ (8006348 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006240:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006244:	d107      	bne.n	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006246:	f107 030c 	add.w	r3, r7, #12
 800624a:	4618      	mov	r0, r3
 800624c:	f000 fad8 	bl	8006800 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006250:	697b      	ldr	r3, [r7, #20]
 8006252:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006254:	e15d      	b.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006256:	2300      	movs	r3, #0
 8006258:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800625a:	e15a      	b.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800625c:	4b3a      	ldr	r3, [pc, #232]	@ (8006348 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800625e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006260:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006264:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006266:	4b38      	ldr	r3, [pc, #224]	@ (8006348 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f003 0304 	and.w	r3, r3, #4
 800626e:	2b04      	cmp	r3, #4
 8006270:	d10c      	bne.n	800628c <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8006272:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006274:	2b00      	cmp	r3, #0
 8006276:	d109      	bne.n	800628c <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006278:	4b33      	ldr	r3, [pc, #204]	@ (8006348 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	08db      	lsrs	r3, r3, #3
 800627e:	f003 0303 	and.w	r3, r3, #3
 8006282:	4a32      	ldr	r2, [pc, #200]	@ (800634c <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8006284:	fa22 f303 	lsr.w	r3, r2, r3
 8006288:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800628a:	e01e      	b.n	80062ca <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800628c:	4b2e      	ldr	r3, [pc, #184]	@ (8006348 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006294:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006298:	d106      	bne.n	80062a8 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800629a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800629c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80062a0:	d102      	bne.n	80062a8 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80062a2:	4b2b      	ldr	r3, [pc, #172]	@ (8006350 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 80062a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80062a6:	e010      	b.n	80062ca <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80062a8:	4b27      	ldr	r3, [pc, #156]	@ (8006348 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062b0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80062b4:	d106      	bne.n	80062c4 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 80062b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80062bc:	d102      	bne.n	80062c4 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80062be:	4b25      	ldr	r3, [pc, #148]	@ (8006354 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 80062c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80062c2:	e002      	b.n	80062ca <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80062c4:	2300      	movs	r3, #0
 80062c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80062c8:	e123      	b.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80062ca:	e122      	b.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 80062cc:	2300      	movs	r3, #0
 80062ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80062d0:	e11f      	b.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80062d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80062d6:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 80062da:	430b      	orrs	r3, r1
 80062dc:	d13c      	bne.n	8006358 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80062de:	4b1a      	ldr	r3, [pc, #104]	@ (8006348 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80062e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80062e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80062e6:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80062e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d004      	beq.n	80062f8 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 80062ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80062f4:	d012      	beq.n	800631c <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 80062f6:	e023      	b.n	8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80062f8:	4b13      	ldr	r3, [pc, #76]	@ (8006348 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006300:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006304:	d107      	bne.n	8006316 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006306:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800630a:	4618      	mov	r0, r3
 800630c:	f000 fbcc 	bl	8006aa8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006310:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006312:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006314:	e0fd      	b.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006316:	2300      	movs	r3, #0
 8006318:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800631a:	e0fa      	b.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800631c:	4b0a      	ldr	r3, [pc, #40]	@ (8006348 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006324:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006328:	d107      	bne.n	800633a <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800632a:	f107 0318 	add.w	r3, r7, #24
 800632e:	4618      	mov	r0, r3
 8006330:	f000 f912 	bl	8006558 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006334:	6a3b      	ldr	r3, [r7, #32]
 8006336:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006338:	e0eb      	b.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800633a:	2300      	movs	r3, #0
 800633c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800633e:	e0e8      	b.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8006340:	2300      	movs	r3, #0
 8006342:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006344:	e0e5      	b.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006346:	bf00      	nop
 8006348:	58024400 	.word	0x58024400
 800634c:	03d09000 	.word	0x03d09000
 8006350:	003d0900 	.word	0x003d0900
 8006354:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8006358:	e9d7 2300 	ldrd	r2, r3, [r7]
 800635c:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8006360:	430b      	orrs	r3, r1
 8006362:	f040 8085 	bne.w	8006470 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8006366:	4b6d      	ldr	r3, [pc, #436]	@ (800651c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006368:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800636a:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800636e:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006370:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006372:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006376:	d06b      	beq.n	8006450 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 8006378:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800637a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800637e:	d874      	bhi.n	800646a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8006380:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006382:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006386:	d056      	beq.n	8006436 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 8006388:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800638a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800638e:	d86c      	bhi.n	800646a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8006390:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006392:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006396:	d03b      	beq.n	8006410 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 8006398:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800639a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800639e:	d864      	bhi.n	800646a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 80063a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063a2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80063a6:	d021      	beq.n	80063ec <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 80063a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80063ae:	d85c      	bhi.n	800646a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 80063b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d004      	beq.n	80063c0 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 80063b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063b8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80063bc:	d004      	beq.n	80063c8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 80063be:	e054      	b.n	800646a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80063c0:	f000 f8b4 	bl	800652c <HAL_RCCEx_GetD3PCLK1Freq>
 80063c4:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80063c6:	e0a4      	b.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80063c8:	4b54      	ldr	r3, [pc, #336]	@ (800651c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80063d0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80063d4:	d107      	bne.n	80063e6 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80063d6:	f107 0318 	add.w	r3, r7, #24
 80063da:	4618      	mov	r0, r3
 80063dc:	f000 f8bc 	bl	8006558 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80063e0:	69fb      	ldr	r3, [r7, #28]
 80063e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80063e4:	e095      	b.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80063e6:	2300      	movs	r3, #0
 80063e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80063ea:	e092      	b.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80063ec:	4b4b      	ldr	r3, [pc, #300]	@ (800651c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80063f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80063f8:	d107      	bne.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80063fa:	f107 030c 	add.w	r3, r7, #12
 80063fe:	4618      	mov	r0, r3
 8006400:	f000 f9fe 	bl	8006800 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006404:	693b      	ldr	r3, [r7, #16]
 8006406:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006408:	e083      	b.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800640a:	2300      	movs	r3, #0
 800640c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800640e:	e080      	b.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006410:	4b42      	ldr	r3, [pc, #264]	@ (800651c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f003 0304 	and.w	r3, r3, #4
 8006418:	2b04      	cmp	r3, #4
 800641a:	d109      	bne.n	8006430 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800641c:	4b3f      	ldr	r3, [pc, #252]	@ (800651c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	08db      	lsrs	r3, r3, #3
 8006422:	f003 0303 	and.w	r3, r3, #3
 8006426:	4a3e      	ldr	r2, [pc, #248]	@ (8006520 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8006428:	fa22 f303 	lsr.w	r3, r2, r3
 800642c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800642e:	e070      	b.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006430:	2300      	movs	r3, #0
 8006432:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006434:	e06d      	b.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006436:	4b39      	ldr	r3, [pc, #228]	@ (800651c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800643e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006442:	d102      	bne.n	800644a <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 8006444:	4b37      	ldr	r3, [pc, #220]	@ (8006524 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8006446:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006448:	e063      	b.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800644a:	2300      	movs	r3, #0
 800644c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800644e:	e060      	b.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006450:	4b32      	ldr	r3, [pc, #200]	@ (800651c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006458:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800645c:	d102      	bne.n	8006464 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800645e:	4b32      	ldr	r3, [pc, #200]	@ (8006528 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8006460:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006462:	e056      	b.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006464:	2300      	movs	r3, #0
 8006466:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006468:	e053      	b.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800646a:	2300      	movs	r3, #0
 800646c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800646e:	e050      	b.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8006470:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006474:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8006478:	430b      	orrs	r3, r1
 800647a:	d148      	bne.n	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800647c:	4b27      	ldr	r3, [pc, #156]	@ (800651c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800647e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006480:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006484:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006486:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006488:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800648c:	d02a      	beq.n	80064e4 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800648e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006490:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006494:	d838      	bhi.n	8006508 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8006496:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006498:	2b00      	cmp	r3, #0
 800649a:	d004      	beq.n	80064a6 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800649c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800649e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80064a2:	d00d      	beq.n	80064c0 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 80064a4:	e030      	b.n	8006508 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80064a6:	4b1d      	ldr	r3, [pc, #116]	@ (800651c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80064ae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80064b2:	d102      	bne.n	80064ba <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 80064b4:	4b1c      	ldr	r3, [pc, #112]	@ (8006528 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 80064b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80064b8:	e02b      	b.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80064ba:	2300      	movs	r3, #0
 80064bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80064be:	e028      	b.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80064c0:	4b16      	ldr	r3, [pc, #88]	@ (800651c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80064c8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80064cc:	d107      	bne.n	80064de <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80064ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80064d2:	4618      	mov	r0, r3
 80064d4:	f000 fae8 	bl	8006aa8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80064d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80064dc:	e019      	b.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80064de:	2300      	movs	r3, #0
 80064e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80064e2:	e016      	b.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80064e4:	4b0d      	ldr	r3, [pc, #52]	@ (800651c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80064ec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80064f0:	d107      	bne.n	8006502 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80064f2:	f107 0318 	add.w	r3, r7, #24
 80064f6:	4618      	mov	r0, r3
 80064f8:	f000 f82e 	bl	8006558 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80064fc:	69fb      	ldr	r3, [r7, #28]
 80064fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006500:	e007      	b.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006502:	2300      	movs	r3, #0
 8006504:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006506:	e004      	b.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8006508:	2300      	movs	r3, #0
 800650a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800650c:	e001      	b.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800650e:	2300      	movs	r3, #0
 8006510:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8006512:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006514:	4618      	mov	r0, r3
 8006516:	3740      	adds	r7, #64	@ 0x40
 8006518:	46bd      	mov	sp, r7
 800651a:	bd80      	pop	{r7, pc}
 800651c:	58024400 	.word	0x58024400
 8006520:	03d09000 	.word	0x03d09000
 8006524:	003d0900 	.word	0x003d0900
 8006528:	007a1200 	.word	0x007a1200

0800652c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006530:	f7fe f92e 	bl	8004790 <HAL_RCC_GetHCLKFreq>
 8006534:	4602      	mov	r2, r0
 8006536:	4b06      	ldr	r3, [pc, #24]	@ (8006550 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006538:	6a1b      	ldr	r3, [r3, #32]
 800653a:	091b      	lsrs	r3, r3, #4
 800653c:	f003 0307 	and.w	r3, r3, #7
 8006540:	4904      	ldr	r1, [pc, #16]	@ (8006554 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006542:	5ccb      	ldrb	r3, [r1, r3]
 8006544:	f003 031f 	and.w	r3, r3, #31
 8006548:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800654c:	4618      	mov	r0, r3
 800654e:	bd80      	pop	{r7, pc}
 8006550:	58024400 	.word	0x58024400
 8006554:	08009398 	.word	0x08009398

08006558 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006558:	b480      	push	{r7}
 800655a:	b089      	sub	sp, #36	@ 0x24
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006560:	4ba1      	ldr	r3, [pc, #644]	@ (80067e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006562:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006564:	f003 0303 	and.w	r3, r3, #3
 8006568:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800656a:	4b9f      	ldr	r3, [pc, #636]	@ (80067e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800656c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800656e:	0b1b      	lsrs	r3, r3, #12
 8006570:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006574:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006576:	4b9c      	ldr	r3, [pc, #624]	@ (80067e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006578:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800657a:	091b      	lsrs	r3, r3, #4
 800657c:	f003 0301 	and.w	r3, r3, #1
 8006580:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006582:	4b99      	ldr	r3, [pc, #612]	@ (80067e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006584:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006586:	08db      	lsrs	r3, r3, #3
 8006588:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800658c:	693a      	ldr	r2, [r7, #16]
 800658e:	fb02 f303 	mul.w	r3, r2, r3
 8006592:	ee07 3a90 	vmov	s15, r3
 8006596:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800659a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800659e:	697b      	ldr	r3, [r7, #20]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	f000 8111 	beq.w	80067c8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80065a6:	69bb      	ldr	r3, [r7, #24]
 80065a8:	2b02      	cmp	r3, #2
 80065aa:	f000 8083 	beq.w	80066b4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80065ae:	69bb      	ldr	r3, [r7, #24]
 80065b0:	2b02      	cmp	r3, #2
 80065b2:	f200 80a1 	bhi.w	80066f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80065b6:	69bb      	ldr	r3, [r7, #24]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d003      	beq.n	80065c4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80065bc:	69bb      	ldr	r3, [r7, #24]
 80065be:	2b01      	cmp	r3, #1
 80065c0:	d056      	beq.n	8006670 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80065c2:	e099      	b.n	80066f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80065c4:	4b88      	ldr	r3, [pc, #544]	@ (80067e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f003 0320 	and.w	r3, r3, #32
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d02d      	beq.n	800662c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80065d0:	4b85      	ldr	r3, [pc, #532]	@ (80067e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	08db      	lsrs	r3, r3, #3
 80065d6:	f003 0303 	and.w	r3, r3, #3
 80065da:	4a84      	ldr	r2, [pc, #528]	@ (80067ec <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80065dc:	fa22 f303 	lsr.w	r3, r2, r3
 80065e0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80065e2:	68bb      	ldr	r3, [r7, #8]
 80065e4:	ee07 3a90 	vmov	s15, r3
 80065e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065ec:	697b      	ldr	r3, [r7, #20]
 80065ee:	ee07 3a90 	vmov	s15, r3
 80065f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065fa:	4b7b      	ldr	r3, [pc, #492]	@ (80067e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80065fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006602:	ee07 3a90 	vmov	s15, r3
 8006606:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800660a:	ed97 6a03 	vldr	s12, [r7, #12]
 800660e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80067f0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006612:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006616:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800661a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800661e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006622:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006626:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800662a:	e087      	b.n	800673c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800662c:	697b      	ldr	r3, [r7, #20]
 800662e:	ee07 3a90 	vmov	s15, r3
 8006632:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006636:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80067f4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800663a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800663e:	4b6a      	ldr	r3, [pc, #424]	@ (80067e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006640:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006642:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006646:	ee07 3a90 	vmov	s15, r3
 800664a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800664e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006652:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80067f0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006656:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800665a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800665e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006662:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006666:	ee67 7a27 	vmul.f32	s15, s14, s15
 800666a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800666e:	e065      	b.n	800673c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006670:	697b      	ldr	r3, [r7, #20]
 8006672:	ee07 3a90 	vmov	s15, r3
 8006676:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800667a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80067f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800667e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006682:	4b59      	ldr	r3, [pc, #356]	@ (80067e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006684:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006686:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800668a:	ee07 3a90 	vmov	s15, r3
 800668e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006692:	ed97 6a03 	vldr	s12, [r7, #12]
 8006696:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80067f0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800669a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800669e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80066a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80066aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80066b2:	e043      	b.n	800673c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80066b4:	697b      	ldr	r3, [r7, #20]
 80066b6:	ee07 3a90 	vmov	s15, r3
 80066ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066be:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80067fc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80066c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066c6:	4b48      	ldr	r3, [pc, #288]	@ (80067e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80066c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066ce:	ee07 3a90 	vmov	s15, r3
 80066d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80066da:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80067f0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80066de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80066e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80066ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80066ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80066f6:	e021      	b.n	800673c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80066f8:	697b      	ldr	r3, [r7, #20]
 80066fa:	ee07 3a90 	vmov	s15, r3
 80066fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006702:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80067f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006706:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800670a:	4b37      	ldr	r3, [pc, #220]	@ (80067e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800670c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800670e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006712:	ee07 3a90 	vmov	s15, r3
 8006716:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800671a:	ed97 6a03 	vldr	s12, [r7, #12]
 800671e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80067f0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006722:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006726:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800672a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800672e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006732:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006736:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800673a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800673c:	4b2a      	ldr	r3, [pc, #168]	@ (80067e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800673e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006740:	0a5b      	lsrs	r3, r3, #9
 8006742:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006746:	ee07 3a90 	vmov	s15, r3
 800674a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800674e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006752:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006756:	edd7 6a07 	vldr	s13, [r7, #28]
 800675a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800675e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006762:	ee17 2a90 	vmov	r2, s15
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800676a:	4b1f      	ldr	r3, [pc, #124]	@ (80067e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800676c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800676e:	0c1b      	lsrs	r3, r3, #16
 8006770:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006774:	ee07 3a90 	vmov	s15, r3
 8006778:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800677c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006780:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006784:	edd7 6a07 	vldr	s13, [r7, #28]
 8006788:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800678c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006790:	ee17 2a90 	vmov	r2, s15
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8006798:	4b13      	ldr	r3, [pc, #76]	@ (80067e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800679a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800679c:	0e1b      	lsrs	r3, r3, #24
 800679e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80067a2:	ee07 3a90 	vmov	s15, r3
 80067a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067aa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80067ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 80067b2:	edd7 6a07 	vldr	s13, [r7, #28]
 80067b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80067ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80067be:	ee17 2a90 	vmov	r2, s15
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80067c6:	e008      	b.n	80067da <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2200      	movs	r2, #0
 80067cc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2200      	movs	r2, #0
 80067d2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2200      	movs	r2, #0
 80067d8:	609a      	str	r2, [r3, #8]
}
 80067da:	bf00      	nop
 80067dc:	3724      	adds	r7, #36	@ 0x24
 80067de:	46bd      	mov	sp, r7
 80067e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e4:	4770      	bx	lr
 80067e6:	bf00      	nop
 80067e8:	58024400 	.word	0x58024400
 80067ec:	03d09000 	.word	0x03d09000
 80067f0:	46000000 	.word	0x46000000
 80067f4:	4c742400 	.word	0x4c742400
 80067f8:	4a742400 	.word	0x4a742400
 80067fc:	4af42400 	.word	0x4af42400

08006800 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006800:	b480      	push	{r7}
 8006802:	b089      	sub	sp, #36	@ 0x24
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006808:	4ba1      	ldr	r3, [pc, #644]	@ (8006a90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800680a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800680c:	f003 0303 	and.w	r3, r3, #3
 8006810:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8006812:	4b9f      	ldr	r3, [pc, #636]	@ (8006a90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006814:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006816:	0d1b      	lsrs	r3, r3, #20
 8006818:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800681c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800681e:	4b9c      	ldr	r3, [pc, #624]	@ (8006a90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006820:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006822:	0a1b      	lsrs	r3, r3, #8
 8006824:	f003 0301 	and.w	r3, r3, #1
 8006828:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800682a:	4b99      	ldr	r3, [pc, #612]	@ (8006a90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800682c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800682e:	08db      	lsrs	r3, r3, #3
 8006830:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006834:	693a      	ldr	r2, [r7, #16]
 8006836:	fb02 f303 	mul.w	r3, r2, r3
 800683a:	ee07 3a90 	vmov	s15, r3
 800683e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006842:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006846:	697b      	ldr	r3, [r7, #20]
 8006848:	2b00      	cmp	r3, #0
 800684a:	f000 8111 	beq.w	8006a70 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800684e:	69bb      	ldr	r3, [r7, #24]
 8006850:	2b02      	cmp	r3, #2
 8006852:	f000 8083 	beq.w	800695c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006856:	69bb      	ldr	r3, [r7, #24]
 8006858:	2b02      	cmp	r3, #2
 800685a:	f200 80a1 	bhi.w	80069a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800685e:	69bb      	ldr	r3, [r7, #24]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d003      	beq.n	800686c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006864:	69bb      	ldr	r3, [r7, #24]
 8006866:	2b01      	cmp	r3, #1
 8006868:	d056      	beq.n	8006918 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800686a:	e099      	b.n	80069a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800686c:	4b88      	ldr	r3, [pc, #544]	@ (8006a90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f003 0320 	and.w	r3, r3, #32
 8006874:	2b00      	cmp	r3, #0
 8006876:	d02d      	beq.n	80068d4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006878:	4b85      	ldr	r3, [pc, #532]	@ (8006a90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	08db      	lsrs	r3, r3, #3
 800687e:	f003 0303 	and.w	r3, r3, #3
 8006882:	4a84      	ldr	r2, [pc, #528]	@ (8006a94 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006884:	fa22 f303 	lsr.w	r3, r2, r3
 8006888:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800688a:	68bb      	ldr	r3, [r7, #8]
 800688c:	ee07 3a90 	vmov	s15, r3
 8006890:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006894:	697b      	ldr	r3, [r7, #20]
 8006896:	ee07 3a90 	vmov	s15, r3
 800689a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800689e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068a2:	4b7b      	ldr	r3, [pc, #492]	@ (8006a90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80068a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068aa:	ee07 3a90 	vmov	s15, r3
 80068ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80068b6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006a98 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80068ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80068be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80068c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068ce:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80068d2:	e087      	b.n	80069e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80068d4:	697b      	ldr	r3, [r7, #20]
 80068d6:	ee07 3a90 	vmov	s15, r3
 80068da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068de:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006a9c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80068e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068e6:	4b6a      	ldr	r3, [pc, #424]	@ (8006a90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80068e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068ee:	ee07 3a90 	vmov	s15, r3
 80068f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80068fa:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006a98 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80068fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006902:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006906:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800690a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800690e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006912:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006916:	e065      	b.n	80069e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006918:	697b      	ldr	r3, [r7, #20]
 800691a:	ee07 3a90 	vmov	s15, r3
 800691e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006922:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006926:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800692a:	4b59      	ldr	r3, [pc, #356]	@ (8006a90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800692c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800692e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006932:	ee07 3a90 	vmov	s15, r3
 8006936:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800693a:	ed97 6a03 	vldr	s12, [r7, #12]
 800693e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006a98 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006942:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006946:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800694a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800694e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006952:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006956:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800695a:	e043      	b.n	80069e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800695c:	697b      	ldr	r3, [r7, #20]
 800695e:	ee07 3a90 	vmov	s15, r3
 8006962:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006966:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006aa4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800696a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800696e:	4b48      	ldr	r3, [pc, #288]	@ (8006a90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006972:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006976:	ee07 3a90 	vmov	s15, r3
 800697a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800697e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006982:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006a98 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006986:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800698a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800698e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006992:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006996:	ee67 7a27 	vmul.f32	s15, s14, s15
 800699a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800699e:	e021      	b.n	80069e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80069a0:	697b      	ldr	r3, [r7, #20]
 80069a2:	ee07 3a90 	vmov	s15, r3
 80069a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069aa:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80069ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069b2:	4b37      	ldr	r3, [pc, #220]	@ (8006a90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80069b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069ba:	ee07 3a90 	vmov	s15, r3
 80069be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80069c6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006a98 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80069ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80069d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80069e2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80069e4:	4b2a      	ldr	r3, [pc, #168]	@ (8006a90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80069e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069e8:	0a5b      	lsrs	r3, r3, #9
 80069ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80069ee:	ee07 3a90 	vmov	s15, r3
 80069f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069f6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80069fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80069fe:	edd7 6a07 	vldr	s13, [r7, #28]
 8006a02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a0a:	ee17 2a90 	vmov	r2, s15
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8006a12:	4b1f      	ldr	r3, [pc, #124]	@ (8006a90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a16:	0c1b      	lsrs	r3, r3, #16
 8006a18:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006a1c:	ee07 3a90 	vmov	s15, r3
 8006a20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a24:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006a28:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006a2c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006a30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a38:	ee17 2a90 	vmov	r2, s15
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006a40:	4b13      	ldr	r3, [pc, #76]	@ (8006a90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a44:	0e1b      	lsrs	r3, r3, #24
 8006a46:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006a4a:	ee07 3a90 	vmov	s15, r3
 8006a4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a52:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006a56:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006a5a:	edd7 6a07 	vldr	s13, [r7, #28]
 8006a5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a66:	ee17 2a90 	vmov	r2, s15
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006a6e:	e008      	b.n	8006a82 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2200      	movs	r2, #0
 8006a74:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2200      	movs	r2, #0
 8006a7a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2200      	movs	r2, #0
 8006a80:	609a      	str	r2, [r3, #8]
}
 8006a82:	bf00      	nop
 8006a84:	3724      	adds	r7, #36	@ 0x24
 8006a86:	46bd      	mov	sp, r7
 8006a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8c:	4770      	bx	lr
 8006a8e:	bf00      	nop
 8006a90:	58024400 	.word	0x58024400
 8006a94:	03d09000 	.word	0x03d09000
 8006a98:	46000000 	.word	0x46000000
 8006a9c:	4c742400 	.word	0x4c742400
 8006aa0:	4a742400 	.word	0x4a742400
 8006aa4:	4af42400 	.word	0x4af42400

08006aa8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	b089      	sub	sp, #36	@ 0x24
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006ab0:	4ba0      	ldr	r3, [pc, #640]	@ (8006d34 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006ab2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ab4:	f003 0303 	and.w	r3, r3, #3
 8006ab8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8006aba:	4b9e      	ldr	r3, [pc, #632]	@ (8006d34 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006abc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006abe:	091b      	lsrs	r3, r3, #4
 8006ac0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006ac4:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8006ac6:	4b9b      	ldr	r3, [pc, #620]	@ (8006d34 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006ac8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006aca:	f003 0301 	and.w	r3, r3, #1
 8006ace:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006ad0:	4b98      	ldr	r3, [pc, #608]	@ (8006d34 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006ad2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ad4:	08db      	lsrs	r3, r3, #3
 8006ad6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006ada:	693a      	ldr	r2, [r7, #16]
 8006adc:	fb02 f303 	mul.w	r3, r2, r3
 8006ae0:	ee07 3a90 	vmov	s15, r3
 8006ae4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ae8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8006aec:	697b      	ldr	r3, [r7, #20]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	f000 8111 	beq.w	8006d16 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8006af4:	69bb      	ldr	r3, [r7, #24]
 8006af6:	2b02      	cmp	r3, #2
 8006af8:	f000 8083 	beq.w	8006c02 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8006afc:	69bb      	ldr	r3, [r7, #24]
 8006afe:	2b02      	cmp	r3, #2
 8006b00:	f200 80a1 	bhi.w	8006c46 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8006b04:	69bb      	ldr	r3, [r7, #24]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d003      	beq.n	8006b12 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8006b0a:	69bb      	ldr	r3, [r7, #24]
 8006b0c:	2b01      	cmp	r3, #1
 8006b0e:	d056      	beq.n	8006bbe <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8006b10:	e099      	b.n	8006c46 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006b12:	4b88      	ldr	r3, [pc, #544]	@ (8006d34 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f003 0320 	and.w	r3, r3, #32
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d02d      	beq.n	8006b7a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006b1e:	4b85      	ldr	r3, [pc, #532]	@ (8006d34 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	08db      	lsrs	r3, r3, #3
 8006b24:	f003 0303 	and.w	r3, r3, #3
 8006b28:	4a83      	ldr	r2, [pc, #524]	@ (8006d38 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8006b2a:	fa22 f303 	lsr.w	r3, r2, r3
 8006b2e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006b30:	68bb      	ldr	r3, [r7, #8]
 8006b32:	ee07 3a90 	vmov	s15, r3
 8006b36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b3a:	697b      	ldr	r3, [r7, #20]
 8006b3c:	ee07 3a90 	vmov	s15, r3
 8006b40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b44:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b48:	4b7a      	ldr	r3, [pc, #488]	@ (8006d34 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006b4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b50:	ee07 3a90 	vmov	s15, r3
 8006b54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b58:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b5c:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8006d3c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006b60:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b64:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b68:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b6c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b74:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006b78:	e087      	b.n	8006c8a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006b7a:	697b      	ldr	r3, [r7, #20]
 8006b7c:	ee07 3a90 	vmov	s15, r3
 8006b80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b84:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8006d40 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8006b88:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b8c:	4b69      	ldr	r3, [pc, #420]	@ (8006d34 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006b8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b94:	ee07 3a90 	vmov	s15, r3
 8006b98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b9c:	ed97 6a03 	vldr	s12, [r7, #12]
 8006ba0:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8006d3c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006ba4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ba8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bac:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006bb0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bb8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006bbc:	e065      	b.n	8006c8a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006bbe:	697b      	ldr	r3, [r7, #20]
 8006bc0:	ee07 3a90 	vmov	s15, r3
 8006bc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bc8:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8006d44 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8006bcc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bd0:	4b58      	ldr	r3, [pc, #352]	@ (8006d34 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006bd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bd8:	ee07 3a90 	vmov	s15, r3
 8006bdc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006be0:	ed97 6a03 	vldr	s12, [r7, #12]
 8006be4:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8006d3c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006be8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bf0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006bf4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bf8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bfc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006c00:	e043      	b.n	8006c8a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006c02:	697b      	ldr	r3, [r7, #20]
 8006c04:	ee07 3a90 	vmov	s15, r3
 8006c08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c0c:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8006d48 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8006c10:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c14:	4b47      	ldr	r3, [pc, #284]	@ (8006d34 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006c16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c1c:	ee07 3a90 	vmov	s15, r3
 8006c20:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c24:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c28:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8006d3c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006c2c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c30:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c34:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c38:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c40:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006c44:	e021      	b.n	8006c8a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006c46:	697b      	ldr	r3, [r7, #20]
 8006c48:	ee07 3a90 	vmov	s15, r3
 8006c4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c50:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8006d40 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8006c54:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c58:	4b36      	ldr	r3, [pc, #216]	@ (8006d34 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006c5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c60:	ee07 3a90 	vmov	s15, r3
 8006c64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c68:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c6c:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8006d3c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006c70:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c74:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c78:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c7c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c84:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006c88:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8006c8a:	4b2a      	ldr	r3, [pc, #168]	@ (8006d34 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c8e:	0a5b      	lsrs	r3, r3, #9
 8006c90:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c94:	ee07 3a90 	vmov	s15, r3
 8006c98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c9c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006ca0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006ca4:	edd7 6a07 	vldr	s13, [r7, #28]
 8006ca8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006cac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006cb0:	ee17 2a90 	vmov	r2, s15
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8006cb8:	4b1e      	ldr	r3, [pc, #120]	@ (8006d34 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006cba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cbc:	0c1b      	lsrs	r3, r3, #16
 8006cbe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006cc2:	ee07 3a90 	vmov	s15, r3
 8006cc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006cce:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006cd2:	edd7 6a07 	vldr	s13, [r7, #28]
 8006cd6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006cda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006cde:	ee17 2a90 	vmov	r2, s15
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8006ce6:	4b13      	ldr	r3, [pc, #76]	@ (8006d34 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cea:	0e1b      	lsrs	r3, r3, #24
 8006cec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006cf0:	ee07 3a90 	vmov	s15, r3
 8006cf4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cf8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006cfc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006d00:	edd7 6a07 	vldr	s13, [r7, #28]
 8006d04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d0c:	ee17 2a90 	vmov	r2, s15
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8006d14:	e008      	b.n	8006d28 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2200      	movs	r2, #0
 8006d1a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2200      	movs	r2, #0
 8006d20:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2200      	movs	r2, #0
 8006d26:	609a      	str	r2, [r3, #8]
}
 8006d28:	bf00      	nop
 8006d2a:	3724      	adds	r7, #36	@ 0x24
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d32:	4770      	bx	lr
 8006d34:	58024400 	.word	0x58024400
 8006d38:	03d09000 	.word	0x03d09000
 8006d3c:	46000000 	.word	0x46000000
 8006d40:	4c742400 	.word	0x4c742400
 8006d44:	4a742400 	.word	0x4a742400
 8006d48:	4af42400 	.word	0x4af42400

08006d4c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b084      	sub	sp, #16
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
 8006d54:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006d56:	2300      	movs	r3, #0
 8006d58:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006d5a:	4b53      	ldr	r3, [pc, #332]	@ (8006ea8 <RCCEx_PLL2_Config+0x15c>)
 8006d5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d5e:	f003 0303 	and.w	r3, r3, #3
 8006d62:	2b03      	cmp	r3, #3
 8006d64:	d101      	bne.n	8006d6a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006d66:	2301      	movs	r3, #1
 8006d68:	e099      	b.n	8006e9e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006d6a:	4b4f      	ldr	r3, [pc, #316]	@ (8006ea8 <RCCEx_PLL2_Config+0x15c>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	4a4e      	ldr	r2, [pc, #312]	@ (8006ea8 <RCCEx_PLL2_Config+0x15c>)
 8006d70:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006d74:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d76:	f7fa fbeb 	bl	8001550 <HAL_GetTick>
 8006d7a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006d7c:	e008      	b.n	8006d90 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006d7e:	f7fa fbe7 	bl	8001550 <HAL_GetTick>
 8006d82:	4602      	mov	r2, r0
 8006d84:	68bb      	ldr	r3, [r7, #8]
 8006d86:	1ad3      	subs	r3, r2, r3
 8006d88:	2b02      	cmp	r3, #2
 8006d8a:	d901      	bls.n	8006d90 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006d8c:	2303      	movs	r3, #3
 8006d8e:	e086      	b.n	8006e9e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006d90:	4b45      	ldr	r3, [pc, #276]	@ (8006ea8 <RCCEx_PLL2_Config+0x15c>)
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d1f0      	bne.n	8006d7e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006d9c:	4b42      	ldr	r3, [pc, #264]	@ (8006ea8 <RCCEx_PLL2_Config+0x15c>)
 8006d9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006da0:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	031b      	lsls	r3, r3, #12
 8006daa:	493f      	ldr	r1, [pc, #252]	@ (8006ea8 <RCCEx_PLL2_Config+0x15c>)
 8006dac:	4313      	orrs	r3, r2
 8006dae:	628b      	str	r3, [r1, #40]	@ 0x28
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	685b      	ldr	r3, [r3, #4]
 8006db4:	3b01      	subs	r3, #1
 8006db6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	689b      	ldr	r3, [r3, #8]
 8006dbe:	3b01      	subs	r3, #1
 8006dc0:	025b      	lsls	r3, r3, #9
 8006dc2:	b29b      	uxth	r3, r3
 8006dc4:	431a      	orrs	r2, r3
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	68db      	ldr	r3, [r3, #12]
 8006dca:	3b01      	subs	r3, #1
 8006dcc:	041b      	lsls	r3, r3, #16
 8006dce:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006dd2:	431a      	orrs	r2, r3
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	691b      	ldr	r3, [r3, #16]
 8006dd8:	3b01      	subs	r3, #1
 8006dda:	061b      	lsls	r3, r3, #24
 8006ddc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006de0:	4931      	ldr	r1, [pc, #196]	@ (8006ea8 <RCCEx_PLL2_Config+0x15c>)
 8006de2:	4313      	orrs	r3, r2
 8006de4:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006de6:	4b30      	ldr	r3, [pc, #192]	@ (8006ea8 <RCCEx_PLL2_Config+0x15c>)
 8006de8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dea:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	695b      	ldr	r3, [r3, #20]
 8006df2:	492d      	ldr	r1, [pc, #180]	@ (8006ea8 <RCCEx_PLL2_Config+0x15c>)
 8006df4:	4313      	orrs	r3, r2
 8006df6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006df8:	4b2b      	ldr	r3, [pc, #172]	@ (8006ea8 <RCCEx_PLL2_Config+0x15c>)
 8006dfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dfc:	f023 0220 	bic.w	r2, r3, #32
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	699b      	ldr	r3, [r3, #24]
 8006e04:	4928      	ldr	r1, [pc, #160]	@ (8006ea8 <RCCEx_PLL2_Config+0x15c>)
 8006e06:	4313      	orrs	r3, r2
 8006e08:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006e0a:	4b27      	ldr	r3, [pc, #156]	@ (8006ea8 <RCCEx_PLL2_Config+0x15c>)
 8006e0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e0e:	4a26      	ldr	r2, [pc, #152]	@ (8006ea8 <RCCEx_PLL2_Config+0x15c>)
 8006e10:	f023 0310 	bic.w	r3, r3, #16
 8006e14:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006e16:	4b24      	ldr	r3, [pc, #144]	@ (8006ea8 <RCCEx_PLL2_Config+0x15c>)
 8006e18:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006e1a:	4b24      	ldr	r3, [pc, #144]	@ (8006eac <RCCEx_PLL2_Config+0x160>)
 8006e1c:	4013      	ands	r3, r2
 8006e1e:	687a      	ldr	r2, [r7, #4]
 8006e20:	69d2      	ldr	r2, [r2, #28]
 8006e22:	00d2      	lsls	r2, r2, #3
 8006e24:	4920      	ldr	r1, [pc, #128]	@ (8006ea8 <RCCEx_PLL2_Config+0x15c>)
 8006e26:	4313      	orrs	r3, r2
 8006e28:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006e2a:	4b1f      	ldr	r3, [pc, #124]	@ (8006ea8 <RCCEx_PLL2_Config+0x15c>)
 8006e2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e2e:	4a1e      	ldr	r2, [pc, #120]	@ (8006ea8 <RCCEx_PLL2_Config+0x15c>)
 8006e30:	f043 0310 	orr.w	r3, r3, #16
 8006e34:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d106      	bne.n	8006e4a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006e3c:	4b1a      	ldr	r3, [pc, #104]	@ (8006ea8 <RCCEx_PLL2_Config+0x15c>)
 8006e3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e40:	4a19      	ldr	r2, [pc, #100]	@ (8006ea8 <RCCEx_PLL2_Config+0x15c>)
 8006e42:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006e46:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006e48:	e00f      	b.n	8006e6a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	2b01      	cmp	r3, #1
 8006e4e:	d106      	bne.n	8006e5e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006e50:	4b15      	ldr	r3, [pc, #84]	@ (8006ea8 <RCCEx_PLL2_Config+0x15c>)
 8006e52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e54:	4a14      	ldr	r2, [pc, #80]	@ (8006ea8 <RCCEx_PLL2_Config+0x15c>)
 8006e56:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006e5a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006e5c:	e005      	b.n	8006e6a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006e5e:	4b12      	ldr	r3, [pc, #72]	@ (8006ea8 <RCCEx_PLL2_Config+0x15c>)
 8006e60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e62:	4a11      	ldr	r2, [pc, #68]	@ (8006ea8 <RCCEx_PLL2_Config+0x15c>)
 8006e64:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006e68:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006e6a:	4b0f      	ldr	r3, [pc, #60]	@ (8006ea8 <RCCEx_PLL2_Config+0x15c>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	4a0e      	ldr	r2, [pc, #56]	@ (8006ea8 <RCCEx_PLL2_Config+0x15c>)
 8006e70:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006e74:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e76:	f7fa fb6b 	bl	8001550 <HAL_GetTick>
 8006e7a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006e7c:	e008      	b.n	8006e90 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006e7e:	f7fa fb67 	bl	8001550 <HAL_GetTick>
 8006e82:	4602      	mov	r2, r0
 8006e84:	68bb      	ldr	r3, [r7, #8]
 8006e86:	1ad3      	subs	r3, r2, r3
 8006e88:	2b02      	cmp	r3, #2
 8006e8a:	d901      	bls.n	8006e90 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006e8c:	2303      	movs	r3, #3
 8006e8e:	e006      	b.n	8006e9e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006e90:	4b05      	ldr	r3, [pc, #20]	@ (8006ea8 <RCCEx_PLL2_Config+0x15c>)
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d0f0      	beq.n	8006e7e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006e9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	3710      	adds	r7, #16
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	bd80      	pop	{r7, pc}
 8006ea6:	bf00      	nop
 8006ea8:	58024400 	.word	0x58024400
 8006eac:	ffff0007 	.word	0xffff0007

08006eb0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b084      	sub	sp, #16
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
 8006eb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006eba:	2300      	movs	r3, #0
 8006ebc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006ebe:	4b53      	ldr	r3, [pc, #332]	@ (800700c <RCCEx_PLL3_Config+0x15c>)
 8006ec0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ec2:	f003 0303 	and.w	r3, r3, #3
 8006ec6:	2b03      	cmp	r3, #3
 8006ec8:	d101      	bne.n	8006ece <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006eca:	2301      	movs	r3, #1
 8006ecc:	e099      	b.n	8007002 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006ece:	4b4f      	ldr	r3, [pc, #316]	@ (800700c <RCCEx_PLL3_Config+0x15c>)
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	4a4e      	ldr	r2, [pc, #312]	@ (800700c <RCCEx_PLL3_Config+0x15c>)
 8006ed4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006ed8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006eda:	f7fa fb39 	bl	8001550 <HAL_GetTick>
 8006ede:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006ee0:	e008      	b.n	8006ef4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006ee2:	f7fa fb35 	bl	8001550 <HAL_GetTick>
 8006ee6:	4602      	mov	r2, r0
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	1ad3      	subs	r3, r2, r3
 8006eec:	2b02      	cmp	r3, #2
 8006eee:	d901      	bls.n	8006ef4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006ef0:	2303      	movs	r3, #3
 8006ef2:	e086      	b.n	8007002 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006ef4:	4b45      	ldr	r3, [pc, #276]	@ (800700c <RCCEx_PLL3_Config+0x15c>)
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d1f0      	bne.n	8006ee2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006f00:	4b42      	ldr	r3, [pc, #264]	@ (800700c <RCCEx_PLL3_Config+0x15c>)
 8006f02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f04:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	051b      	lsls	r3, r3, #20
 8006f0e:	493f      	ldr	r1, [pc, #252]	@ (800700c <RCCEx_PLL3_Config+0x15c>)
 8006f10:	4313      	orrs	r3, r2
 8006f12:	628b      	str	r3, [r1, #40]	@ 0x28
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	685b      	ldr	r3, [r3, #4]
 8006f18:	3b01      	subs	r3, #1
 8006f1a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	689b      	ldr	r3, [r3, #8]
 8006f22:	3b01      	subs	r3, #1
 8006f24:	025b      	lsls	r3, r3, #9
 8006f26:	b29b      	uxth	r3, r3
 8006f28:	431a      	orrs	r2, r3
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	68db      	ldr	r3, [r3, #12]
 8006f2e:	3b01      	subs	r3, #1
 8006f30:	041b      	lsls	r3, r3, #16
 8006f32:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006f36:	431a      	orrs	r2, r3
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	691b      	ldr	r3, [r3, #16]
 8006f3c:	3b01      	subs	r3, #1
 8006f3e:	061b      	lsls	r3, r3, #24
 8006f40:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006f44:	4931      	ldr	r1, [pc, #196]	@ (800700c <RCCEx_PLL3_Config+0x15c>)
 8006f46:	4313      	orrs	r3, r2
 8006f48:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006f4a:	4b30      	ldr	r3, [pc, #192]	@ (800700c <RCCEx_PLL3_Config+0x15c>)
 8006f4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f4e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	695b      	ldr	r3, [r3, #20]
 8006f56:	492d      	ldr	r1, [pc, #180]	@ (800700c <RCCEx_PLL3_Config+0x15c>)
 8006f58:	4313      	orrs	r3, r2
 8006f5a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006f5c:	4b2b      	ldr	r3, [pc, #172]	@ (800700c <RCCEx_PLL3_Config+0x15c>)
 8006f5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f60:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	699b      	ldr	r3, [r3, #24]
 8006f68:	4928      	ldr	r1, [pc, #160]	@ (800700c <RCCEx_PLL3_Config+0x15c>)
 8006f6a:	4313      	orrs	r3, r2
 8006f6c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006f6e:	4b27      	ldr	r3, [pc, #156]	@ (800700c <RCCEx_PLL3_Config+0x15c>)
 8006f70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f72:	4a26      	ldr	r2, [pc, #152]	@ (800700c <RCCEx_PLL3_Config+0x15c>)
 8006f74:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006f78:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006f7a:	4b24      	ldr	r3, [pc, #144]	@ (800700c <RCCEx_PLL3_Config+0x15c>)
 8006f7c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006f7e:	4b24      	ldr	r3, [pc, #144]	@ (8007010 <RCCEx_PLL3_Config+0x160>)
 8006f80:	4013      	ands	r3, r2
 8006f82:	687a      	ldr	r2, [r7, #4]
 8006f84:	69d2      	ldr	r2, [r2, #28]
 8006f86:	00d2      	lsls	r2, r2, #3
 8006f88:	4920      	ldr	r1, [pc, #128]	@ (800700c <RCCEx_PLL3_Config+0x15c>)
 8006f8a:	4313      	orrs	r3, r2
 8006f8c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006f8e:	4b1f      	ldr	r3, [pc, #124]	@ (800700c <RCCEx_PLL3_Config+0x15c>)
 8006f90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f92:	4a1e      	ldr	r2, [pc, #120]	@ (800700c <RCCEx_PLL3_Config+0x15c>)
 8006f94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006f98:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d106      	bne.n	8006fae <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006fa0:	4b1a      	ldr	r3, [pc, #104]	@ (800700c <RCCEx_PLL3_Config+0x15c>)
 8006fa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fa4:	4a19      	ldr	r2, [pc, #100]	@ (800700c <RCCEx_PLL3_Config+0x15c>)
 8006fa6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006faa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006fac:	e00f      	b.n	8006fce <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	2b01      	cmp	r3, #1
 8006fb2:	d106      	bne.n	8006fc2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006fb4:	4b15      	ldr	r3, [pc, #84]	@ (800700c <RCCEx_PLL3_Config+0x15c>)
 8006fb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fb8:	4a14      	ldr	r2, [pc, #80]	@ (800700c <RCCEx_PLL3_Config+0x15c>)
 8006fba:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006fbe:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006fc0:	e005      	b.n	8006fce <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006fc2:	4b12      	ldr	r3, [pc, #72]	@ (800700c <RCCEx_PLL3_Config+0x15c>)
 8006fc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fc6:	4a11      	ldr	r2, [pc, #68]	@ (800700c <RCCEx_PLL3_Config+0x15c>)
 8006fc8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006fcc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006fce:	4b0f      	ldr	r3, [pc, #60]	@ (800700c <RCCEx_PLL3_Config+0x15c>)
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	4a0e      	ldr	r2, [pc, #56]	@ (800700c <RCCEx_PLL3_Config+0x15c>)
 8006fd4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006fd8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006fda:	f7fa fab9 	bl	8001550 <HAL_GetTick>
 8006fde:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006fe0:	e008      	b.n	8006ff4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006fe2:	f7fa fab5 	bl	8001550 <HAL_GetTick>
 8006fe6:	4602      	mov	r2, r0
 8006fe8:	68bb      	ldr	r3, [r7, #8]
 8006fea:	1ad3      	subs	r3, r2, r3
 8006fec:	2b02      	cmp	r3, #2
 8006fee:	d901      	bls.n	8006ff4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006ff0:	2303      	movs	r3, #3
 8006ff2:	e006      	b.n	8007002 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006ff4:	4b05      	ldr	r3, [pc, #20]	@ (800700c <RCCEx_PLL3_Config+0x15c>)
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d0f0      	beq.n	8006fe2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007000:	7bfb      	ldrb	r3, [r7, #15]
}
 8007002:	4618      	mov	r0, r3
 8007004:	3710      	adds	r7, #16
 8007006:	46bd      	mov	sp, r7
 8007008:	bd80      	pop	{r7, pc}
 800700a:	bf00      	nop
 800700c:	58024400 	.word	0x58024400
 8007010:	ffff0007 	.word	0xffff0007

08007014 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b082      	sub	sp, #8
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d101      	bne.n	8007026 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007022:	2301      	movs	r3, #1
 8007024:	e042      	b.n	80070ac <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800702c:	2b00      	cmp	r3, #0
 800702e:	d106      	bne.n	800703e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2200      	movs	r2, #0
 8007034:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007038:	6878      	ldr	r0, [r7, #4]
 800703a:	f7f9 fe09 	bl	8000c50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2224      	movs	r2, #36	@ 0x24
 8007042:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	681a      	ldr	r2, [r3, #0]
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f022 0201 	bic.w	r2, r2, #1
 8007054:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800705a:	2b00      	cmp	r3, #0
 800705c:	d002      	beq.n	8007064 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800705e:	6878      	ldr	r0, [r7, #4]
 8007060:	f000 ff22 	bl	8007ea8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007064:	6878      	ldr	r0, [r7, #4]
 8007066:	f000 f8b3 	bl	80071d0 <UART_SetConfig>
 800706a:	4603      	mov	r3, r0
 800706c:	2b01      	cmp	r3, #1
 800706e:	d101      	bne.n	8007074 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007070:	2301      	movs	r3, #1
 8007072:	e01b      	b.n	80070ac <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	685a      	ldr	r2, [r3, #4]
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007082:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	689a      	ldr	r2, [r3, #8]
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007092:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	681a      	ldr	r2, [r3, #0]
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f042 0201 	orr.w	r2, r2, #1
 80070a2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80070a4:	6878      	ldr	r0, [r7, #4]
 80070a6:	f000 ffa1 	bl	8007fec <UART_CheckIdleState>
 80070aa:	4603      	mov	r3, r0
}
 80070ac:	4618      	mov	r0, r3
 80070ae:	3708      	adds	r7, #8
 80070b0:	46bd      	mov	sp, r7
 80070b2:	bd80      	pop	{r7, pc}

080070b4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b08a      	sub	sp, #40	@ 0x28
 80070b8:	af02      	add	r7, sp, #8
 80070ba:	60f8      	str	r0, [r7, #12]
 80070bc:	60b9      	str	r1, [r7, #8]
 80070be:	603b      	str	r3, [r7, #0]
 80070c0:	4613      	mov	r3, r2
 80070c2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070ca:	2b20      	cmp	r3, #32
 80070cc:	d17b      	bne.n	80071c6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80070ce:	68bb      	ldr	r3, [r7, #8]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d002      	beq.n	80070da <HAL_UART_Transmit+0x26>
 80070d4:	88fb      	ldrh	r3, [r7, #6]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d101      	bne.n	80070de <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80070da:	2301      	movs	r3, #1
 80070dc:	e074      	b.n	80071c8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	2200      	movs	r2, #0
 80070e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	2221      	movs	r2, #33	@ 0x21
 80070ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80070ee:	f7fa fa2f 	bl	8001550 <HAL_GetTick>
 80070f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	88fa      	ldrh	r2, [r7, #6]
 80070f8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	88fa      	ldrh	r2, [r7, #6]
 8007100:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	689b      	ldr	r3, [r3, #8]
 8007108:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800710c:	d108      	bne.n	8007120 <HAL_UART_Transmit+0x6c>
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	691b      	ldr	r3, [r3, #16]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d104      	bne.n	8007120 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007116:	2300      	movs	r3, #0
 8007118:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	61bb      	str	r3, [r7, #24]
 800711e:	e003      	b.n	8007128 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007120:	68bb      	ldr	r3, [r7, #8]
 8007122:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007124:	2300      	movs	r3, #0
 8007126:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007128:	e030      	b.n	800718c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	9300      	str	r3, [sp, #0]
 800712e:	697b      	ldr	r3, [r7, #20]
 8007130:	2200      	movs	r2, #0
 8007132:	2180      	movs	r1, #128	@ 0x80
 8007134:	68f8      	ldr	r0, [r7, #12]
 8007136:	f001 f803 	bl	8008140 <UART_WaitOnFlagUntilTimeout>
 800713a:	4603      	mov	r3, r0
 800713c:	2b00      	cmp	r3, #0
 800713e:	d005      	beq.n	800714c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	2220      	movs	r2, #32
 8007144:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8007148:	2303      	movs	r3, #3
 800714a:	e03d      	b.n	80071c8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800714c:	69fb      	ldr	r3, [r7, #28]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d10b      	bne.n	800716a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007152:	69bb      	ldr	r3, [r7, #24]
 8007154:	881b      	ldrh	r3, [r3, #0]
 8007156:	461a      	mov	r2, r3
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007160:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007162:	69bb      	ldr	r3, [r7, #24]
 8007164:	3302      	adds	r3, #2
 8007166:	61bb      	str	r3, [r7, #24]
 8007168:	e007      	b.n	800717a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800716a:	69fb      	ldr	r3, [r7, #28]
 800716c:	781a      	ldrb	r2, [r3, #0]
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007174:	69fb      	ldr	r3, [r7, #28]
 8007176:	3301      	adds	r3, #1
 8007178:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007180:	b29b      	uxth	r3, r3
 8007182:	3b01      	subs	r3, #1
 8007184:	b29a      	uxth	r2, r3
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007192:	b29b      	uxth	r3, r3
 8007194:	2b00      	cmp	r3, #0
 8007196:	d1c8      	bne.n	800712a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	9300      	str	r3, [sp, #0]
 800719c:	697b      	ldr	r3, [r7, #20]
 800719e:	2200      	movs	r2, #0
 80071a0:	2140      	movs	r1, #64	@ 0x40
 80071a2:	68f8      	ldr	r0, [r7, #12]
 80071a4:	f000 ffcc 	bl	8008140 <UART_WaitOnFlagUntilTimeout>
 80071a8:	4603      	mov	r3, r0
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d005      	beq.n	80071ba <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	2220      	movs	r2, #32
 80071b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80071b6:	2303      	movs	r3, #3
 80071b8:	e006      	b.n	80071c8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	2220      	movs	r2, #32
 80071be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80071c2:	2300      	movs	r3, #0
 80071c4:	e000      	b.n	80071c8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80071c6:	2302      	movs	r3, #2
  }
}
 80071c8:	4618      	mov	r0, r3
 80071ca:	3720      	adds	r7, #32
 80071cc:	46bd      	mov	sp, r7
 80071ce:	bd80      	pop	{r7, pc}

080071d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80071d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80071d4:	b092      	sub	sp, #72	@ 0x48
 80071d6:	af00      	add	r7, sp, #0
 80071d8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80071da:	2300      	movs	r3, #0
 80071dc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80071e0:	697b      	ldr	r3, [r7, #20]
 80071e2:	689a      	ldr	r2, [r3, #8]
 80071e4:	697b      	ldr	r3, [r7, #20]
 80071e6:	691b      	ldr	r3, [r3, #16]
 80071e8:	431a      	orrs	r2, r3
 80071ea:	697b      	ldr	r3, [r7, #20]
 80071ec:	695b      	ldr	r3, [r3, #20]
 80071ee:	431a      	orrs	r2, r3
 80071f0:	697b      	ldr	r3, [r7, #20]
 80071f2:	69db      	ldr	r3, [r3, #28]
 80071f4:	4313      	orrs	r3, r2
 80071f6:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80071f8:	697b      	ldr	r3, [r7, #20]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	681a      	ldr	r2, [r3, #0]
 80071fe:	4bbe      	ldr	r3, [pc, #760]	@ (80074f8 <UART_SetConfig+0x328>)
 8007200:	4013      	ands	r3, r2
 8007202:	697a      	ldr	r2, [r7, #20]
 8007204:	6812      	ldr	r2, [r2, #0]
 8007206:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007208:	430b      	orrs	r3, r1
 800720a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800720c:	697b      	ldr	r3, [r7, #20]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	685b      	ldr	r3, [r3, #4]
 8007212:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007216:	697b      	ldr	r3, [r7, #20]
 8007218:	68da      	ldr	r2, [r3, #12]
 800721a:	697b      	ldr	r3, [r7, #20]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	430a      	orrs	r2, r1
 8007220:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007222:	697b      	ldr	r3, [r7, #20]
 8007224:	699b      	ldr	r3, [r3, #24]
 8007226:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007228:	697b      	ldr	r3, [r7, #20]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	4ab3      	ldr	r2, [pc, #716]	@ (80074fc <UART_SetConfig+0x32c>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d004      	beq.n	800723c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007232:	697b      	ldr	r3, [r7, #20]
 8007234:	6a1b      	ldr	r3, [r3, #32]
 8007236:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007238:	4313      	orrs	r3, r2
 800723a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800723c:	697b      	ldr	r3, [r7, #20]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	689a      	ldr	r2, [r3, #8]
 8007242:	4baf      	ldr	r3, [pc, #700]	@ (8007500 <UART_SetConfig+0x330>)
 8007244:	4013      	ands	r3, r2
 8007246:	697a      	ldr	r2, [r7, #20]
 8007248:	6812      	ldr	r2, [r2, #0]
 800724a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800724c:	430b      	orrs	r3, r1
 800724e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007250:	697b      	ldr	r3, [r7, #20]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007256:	f023 010f 	bic.w	r1, r3, #15
 800725a:	697b      	ldr	r3, [r7, #20]
 800725c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800725e:	697b      	ldr	r3, [r7, #20]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	430a      	orrs	r2, r1
 8007264:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007266:	697b      	ldr	r3, [r7, #20]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	4aa6      	ldr	r2, [pc, #664]	@ (8007504 <UART_SetConfig+0x334>)
 800726c:	4293      	cmp	r3, r2
 800726e:	d177      	bne.n	8007360 <UART_SetConfig+0x190>
 8007270:	4ba5      	ldr	r3, [pc, #660]	@ (8007508 <UART_SetConfig+0x338>)
 8007272:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007274:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007278:	2b28      	cmp	r3, #40	@ 0x28
 800727a:	d86d      	bhi.n	8007358 <UART_SetConfig+0x188>
 800727c:	a201      	add	r2, pc, #4	@ (adr r2, 8007284 <UART_SetConfig+0xb4>)
 800727e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007282:	bf00      	nop
 8007284:	08007329 	.word	0x08007329
 8007288:	08007359 	.word	0x08007359
 800728c:	08007359 	.word	0x08007359
 8007290:	08007359 	.word	0x08007359
 8007294:	08007359 	.word	0x08007359
 8007298:	08007359 	.word	0x08007359
 800729c:	08007359 	.word	0x08007359
 80072a0:	08007359 	.word	0x08007359
 80072a4:	08007331 	.word	0x08007331
 80072a8:	08007359 	.word	0x08007359
 80072ac:	08007359 	.word	0x08007359
 80072b0:	08007359 	.word	0x08007359
 80072b4:	08007359 	.word	0x08007359
 80072b8:	08007359 	.word	0x08007359
 80072bc:	08007359 	.word	0x08007359
 80072c0:	08007359 	.word	0x08007359
 80072c4:	08007339 	.word	0x08007339
 80072c8:	08007359 	.word	0x08007359
 80072cc:	08007359 	.word	0x08007359
 80072d0:	08007359 	.word	0x08007359
 80072d4:	08007359 	.word	0x08007359
 80072d8:	08007359 	.word	0x08007359
 80072dc:	08007359 	.word	0x08007359
 80072e0:	08007359 	.word	0x08007359
 80072e4:	08007341 	.word	0x08007341
 80072e8:	08007359 	.word	0x08007359
 80072ec:	08007359 	.word	0x08007359
 80072f0:	08007359 	.word	0x08007359
 80072f4:	08007359 	.word	0x08007359
 80072f8:	08007359 	.word	0x08007359
 80072fc:	08007359 	.word	0x08007359
 8007300:	08007359 	.word	0x08007359
 8007304:	08007349 	.word	0x08007349
 8007308:	08007359 	.word	0x08007359
 800730c:	08007359 	.word	0x08007359
 8007310:	08007359 	.word	0x08007359
 8007314:	08007359 	.word	0x08007359
 8007318:	08007359 	.word	0x08007359
 800731c:	08007359 	.word	0x08007359
 8007320:	08007359 	.word	0x08007359
 8007324:	08007351 	.word	0x08007351
 8007328:	2301      	movs	r3, #1
 800732a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800732e:	e326      	b.n	800797e <UART_SetConfig+0x7ae>
 8007330:	2304      	movs	r3, #4
 8007332:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007336:	e322      	b.n	800797e <UART_SetConfig+0x7ae>
 8007338:	2308      	movs	r3, #8
 800733a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800733e:	e31e      	b.n	800797e <UART_SetConfig+0x7ae>
 8007340:	2310      	movs	r3, #16
 8007342:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007346:	e31a      	b.n	800797e <UART_SetConfig+0x7ae>
 8007348:	2320      	movs	r3, #32
 800734a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800734e:	e316      	b.n	800797e <UART_SetConfig+0x7ae>
 8007350:	2340      	movs	r3, #64	@ 0x40
 8007352:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007356:	e312      	b.n	800797e <UART_SetConfig+0x7ae>
 8007358:	2380      	movs	r3, #128	@ 0x80
 800735a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800735e:	e30e      	b.n	800797e <UART_SetConfig+0x7ae>
 8007360:	697b      	ldr	r3, [r7, #20]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	4a69      	ldr	r2, [pc, #420]	@ (800750c <UART_SetConfig+0x33c>)
 8007366:	4293      	cmp	r3, r2
 8007368:	d130      	bne.n	80073cc <UART_SetConfig+0x1fc>
 800736a:	4b67      	ldr	r3, [pc, #412]	@ (8007508 <UART_SetConfig+0x338>)
 800736c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800736e:	f003 0307 	and.w	r3, r3, #7
 8007372:	2b05      	cmp	r3, #5
 8007374:	d826      	bhi.n	80073c4 <UART_SetConfig+0x1f4>
 8007376:	a201      	add	r2, pc, #4	@ (adr r2, 800737c <UART_SetConfig+0x1ac>)
 8007378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800737c:	08007395 	.word	0x08007395
 8007380:	0800739d 	.word	0x0800739d
 8007384:	080073a5 	.word	0x080073a5
 8007388:	080073ad 	.word	0x080073ad
 800738c:	080073b5 	.word	0x080073b5
 8007390:	080073bd 	.word	0x080073bd
 8007394:	2300      	movs	r3, #0
 8007396:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800739a:	e2f0      	b.n	800797e <UART_SetConfig+0x7ae>
 800739c:	2304      	movs	r3, #4
 800739e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073a2:	e2ec      	b.n	800797e <UART_SetConfig+0x7ae>
 80073a4:	2308      	movs	r3, #8
 80073a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073aa:	e2e8      	b.n	800797e <UART_SetConfig+0x7ae>
 80073ac:	2310      	movs	r3, #16
 80073ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073b2:	e2e4      	b.n	800797e <UART_SetConfig+0x7ae>
 80073b4:	2320      	movs	r3, #32
 80073b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073ba:	e2e0      	b.n	800797e <UART_SetConfig+0x7ae>
 80073bc:	2340      	movs	r3, #64	@ 0x40
 80073be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073c2:	e2dc      	b.n	800797e <UART_SetConfig+0x7ae>
 80073c4:	2380      	movs	r3, #128	@ 0x80
 80073c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073ca:	e2d8      	b.n	800797e <UART_SetConfig+0x7ae>
 80073cc:	697b      	ldr	r3, [r7, #20]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	4a4f      	ldr	r2, [pc, #316]	@ (8007510 <UART_SetConfig+0x340>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d130      	bne.n	8007438 <UART_SetConfig+0x268>
 80073d6:	4b4c      	ldr	r3, [pc, #304]	@ (8007508 <UART_SetConfig+0x338>)
 80073d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073da:	f003 0307 	and.w	r3, r3, #7
 80073de:	2b05      	cmp	r3, #5
 80073e0:	d826      	bhi.n	8007430 <UART_SetConfig+0x260>
 80073e2:	a201      	add	r2, pc, #4	@ (adr r2, 80073e8 <UART_SetConfig+0x218>)
 80073e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073e8:	08007401 	.word	0x08007401
 80073ec:	08007409 	.word	0x08007409
 80073f0:	08007411 	.word	0x08007411
 80073f4:	08007419 	.word	0x08007419
 80073f8:	08007421 	.word	0x08007421
 80073fc:	08007429 	.word	0x08007429
 8007400:	2300      	movs	r3, #0
 8007402:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007406:	e2ba      	b.n	800797e <UART_SetConfig+0x7ae>
 8007408:	2304      	movs	r3, #4
 800740a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800740e:	e2b6      	b.n	800797e <UART_SetConfig+0x7ae>
 8007410:	2308      	movs	r3, #8
 8007412:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007416:	e2b2      	b.n	800797e <UART_SetConfig+0x7ae>
 8007418:	2310      	movs	r3, #16
 800741a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800741e:	e2ae      	b.n	800797e <UART_SetConfig+0x7ae>
 8007420:	2320      	movs	r3, #32
 8007422:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007426:	e2aa      	b.n	800797e <UART_SetConfig+0x7ae>
 8007428:	2340      	movs	r3, #64	@ 0x40
 800742a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800742e:	e2a6      	b.n	800797e <UART_SetConfig+0x7ae>
 8007430:	2380      	movs	r3, #128	@ 0x80
 8007432:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007436:	e2a2      	b.n	800797e <UART_SetConfig+0x7ae>
 8007438:	697b      	ldr	r3, [r7, #20]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	4a35      	ldr	r2, [pc, #212]	@ (8007514 <UART_SetConfig+0x344>)
 800743e:	4293      	cmp	r3, r2
 8007440:	d130      	bne.n	80074a4 <UART_SetConfig+0x2d4>
 8007442:	4b31      	ldr	r3, [pc, #196]	@ (8007508 <UART_SetConfig+0x338>)
 8007444:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007446:	f003 0307 	and.w	r3, r3, #7
 800744a:	2b05      	cmp	r3, #5
 800744c:	d826      	bhi.n	800749c <UART_SetConfig+0x2cc>
 800744e:	a201      	add	r2, pc, #4	@ (adr r2, 8007454 <UART_SetConfig+0x284>)
 8007450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007454:	0800746d 	.word	0x0800746d
 8007458:	08007475 	.word	0x08007475
 800745c:	0800747d 	.word	0x0800747d
 8007460:	08007485 	.word	0x08007485
 8007464:	0800748d 	.word	0x0800748d
 8007468:	08007495 	.word	0x08007495
 800746c:	2300      	movs	r3, #0
 800746e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007472:	e284      	b.n	800797e <UART_SetConfig+0x7ae>
 8007474:	2304      	movs	r3, #4
 8007476:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800747a:	e280      	b.n	800797e <UART_SetConfig+0x7ae>
 800747c:	2308      	movs	r3, #8
 800747e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007482:	e27c      	b.n	800797e <UART_SetConfig+0x7ae>
 8007484:	2310      	movs	r3, #16
 8007486:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800748a:	e278      	b.n	800797e <UART_SetConfig+0x7ae>
 800748c:	2320      	movs	r3, #32
 800748e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007492:	e274      	b.n	800797e <UART_SetConfig+0x7ae>
 8007494:	2340      	movs	r3, #64	@ 0x40
 8007496:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800749a:	e270      	b.n	800797e <UART_SetConfig+0x7ae>
 800749c:	2380      	movs	r3, #128	@ 0x80
 800749e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074a2:	e26c      	b.n	800797e <UART_SetConfig+0x7ae>
 80074a4:	697b      	ldr	r3, [r7, #20]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	4a1b      	ldr	r2, [pc, #108]	@ (8007518 <UART_SetConfig+0x348>)
 80074aa:	4293      	cmp	r3, r2
 80074ac:	d142      	bne.n	8007534 <UART_SetConfig+0x364>
 80074ae:	4b16      	ldr	r3, [pc, #88]	@ (8007508 <UART_SetConfig+0x338>)
 80074b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80074b2:	f003 0307 	and.w	r3, r3, #7
 80074b6:	2b05      	cmp	r3, #5
 80074b8:	d838      	bhi.n	800752c <UART_SetConfig+0x35c>
 80074ba:	a201      	add	r2, pc, #4	@ (adr r2, 80074c0 <UART_SetConfig+0x2f0>)
 80074bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074c0:	080074d9 	.word	0x080074d9
 80074c4:	080074e1 	.word	0x080074e1
 80074c8:	080074e9 	.word	0x080074e9
 80074cc:	080074f1 	.word	0x080074f1
 80074d0:	0800751d 	.word	0x0800751d
 80074d4:	08007525 	.word	0x08007525
 80074d8:	2300      	movs	r3, #0
 80074da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074de:	e24e      	b.n	800797e <UART_SetConfig+0x7ae>
 80074e0:	2304      	movs	r3, #4
 80074e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074e6:	e24a      	b.n	800797e <UART_SetConfig+0x7ae>
 80074e8:	2308      	movs	r3, #8
 80074ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074ee:	e246      	b.n	800797e <UART_SetConfig+0x7ae>
 80074f0:	2310      	movs	r3, #16
 80074f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074f6:	e242      	b.n	800797e <UART_SetConfig+0x7ae>
 80074f8:	cfff69f3 	.word	0xcfff69f3
 80074fc:	58000c00 	.word	0x58000c00
 8007500:	11fff4ff 	.word	0x11fff4ff
 8007504:	40011000 	.word	0x40011000
 8007508:	58024400 	.word	0x58024400
 800750c:	40004400 	.word	0x40004400
 8007510:	40004800 	.word	0x40004800
 8007514:	40004c00 	.word	0x40004c00
 8007518:	40005000 	.word	0x40005000
 800751c:	2320      	movs	r3, #32
 800751e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007522:	e22c      	b.n	800797e <UART_SetConfig+0x7ae>
 8007524:	2340      	movs	r3, #64	@ 0x40
 8007526:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800752a:	e228      	b.n	800797e <UART_SetConfig+0x7ae>
 800752c:	2380      	movs	r3, #128	@ 0x80
 800752e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007532:	e224      	b.n	800797e <UART_SetConfig+0x7ae>
 8007534:	697b      	ldr	r3, [r7, #20]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	4ab1      	ldr	r2, [pc, #708]	@ (8007800 <UART_SetConfig+0x630>)
 800753a:	4293      	cmp	r3, r2
 800753c:	d176      	bne.n	800762c <UART_SetConfig+0x45c>
 800753e:	4bb1      	ldr	r3, [pc, #708]	@ (8007804 <UART_SetConfig+0x634>)
 8007540:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007542:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007546:	2b28      	cmp	r3, #40	@ 0x28
 8007548:	d86c      	bhi.n	8007624 <UART_SetConfig+0x454>
 800754a:	a201      	add	r2, pc, #4	@ (adr r2, 8007550 <UART_SetConfig+0x380>)
 800754c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007550:	080075f5 	.word	0x080075f5
 8007554:	08007625 	.word	0x08007625
 8007558:	08007625 	.word	0x08007625
 800755c:	08007625 	.word	0x08007625
 8007560:	08007625 	.word	0x08007625
 8007564:	08007625 	.word	0x08007625
 8007568:	08007625 	.word	0x08007625
 800756c:	08007625 	.word	0x08007625
 8007570:	080075fd 	.word	0x080075fd
 8007574:	08007625 	.word	0x08007625
 8007578:	08007625 	.word	0x08007625
 800757c:	08007625 	.word	0x08007625
 8007580:	08007625 	.word	0x08007625
 8007584:	08007625 	.word	0x08007625
 8007588:	08007625 	.word	0x08007625
 800758c:	08007625 	.word	0x08007625
 8007590:	08007605 	.word	0x08007605
 8007594:	08007625 	.word	0x08007625
 8007598:	08007625 	.word	0x08007625
 800759c:	08007625 	.word	0x08007625
 80075a0:	08007625 	.word	0x08007625
 80075a4:	08007625 	.word	0x08007625
 80075a8:	08007625 	.word	0x08007625
 80075ac:	08007625 	.word	0x08007625
 80075b0:	0800760d 	.word	0x0800760d
 80075b4:	08007625 	.word	0x08007625
 80075b8:	08007625 	.word	0x08007625
 80075bc:	08007625 	.word	0x08007625
 80075c0:	08007625 	.word	0x08007625
 80075c4:	08007625 	.word	0x08007625
 80075c8:	08007625 	.word	0x08007625
 80075cc:	08007625 	.word	0x08007625
 80075d0:	08007615 	.word	0x08007615
 80075d4:	08007625 	.word	0x08007625
 80075d8:	08007625 	.word	0x08007625
 80075dc:	08007625 	.word	0x08007625
 80075e0:	08007625 	.word	0x08007625
 80075e4:	08007625 	.word	0x08007625
 80075e8:	08007625 	.word	0x08007625
 80075ec:	08007625 	.word	0x08007625
 80075f0:	0800761d 	.word	0x0800761d
 80075f4:	2301      	movs	r3, #1
 80075f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075fa:	e1c0      	b.n	800797e <UART_SetConfig+0x7ae>
 80075fc:	2304      	movs	r3, #4
 80075fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007602:	e1bc      	b.n	800797e <UART_SetConfig+0x7ae>
 8007604:	2308      	movs	r3, #8
 8007606:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800760a:	e1b8      	b.n	800797e <UART_SetConfig+0x7ae>
 800760c:	2310      	movs	r3, #16
 800760e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007612:	e1b4      	b.n	800797e <UART_SetConfig+0x7ae>
 8007614:	2320      	movs	r3, #32
 8007616:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800761a:	e1b0      	b.n	800797e <UART_SetConfig+0x7ae>
 800761c:	2340      	movs	r3, #64	@ 0x40
 800761e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007622:	e1ac      	b.n	800797e <UART_SetConfig+0x7ae>
 8007624:	2380      	movs	r3, #128	@ 0x80
 8007626:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800762a:	e1a8      	b.n	800797e <UART_SetConfig+0x7ae>
 800762c:	697b      	ldr	r3, [r7, #20]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	4a75      	ldr	r2, [pc, #468]	@ (8007808 <UART_SetConfig+0x638>)
 8007632:	4293      	cmp	r3, r2
 8007634:	d130      	bne.n	8007698 <UART_SetConfig+0x4c8>
 8007636:	4b73      	ldr	r3, [pc, #460]	@ (8007804 <UART_SetConfig+0x634>)
 8007638:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800763a:	f003 0307 	and.w	r3, r3, #7
 800763e:	2b05      	cmp	r3, #5
 8007640:	d826      	bhi.n	8007690 <UART_SetConfig+0x4c0>
 8007642:	a201      	add	r2, pc, #4	@ (adr r2, 8007648 <UART_SetConfig+0x478>)
 8007644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007648:	08007661 	.word	0x08007661
 800764c:	08007669 	.word	0x08007669
 8007650:	08007671 	.word	0x08007671
 8007654:	08007679 	.word	0x08007679
 8007658:	08007681 	.word	0x08007681
 800765c:	08007689 	.word	0x08007689
 8007660:	2300      	movs	r3, #0
 8007662:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007666:	e18a      	b.n	800797e <UART_SetConfig+0x7ae>
 8007668:	2304      	movs	r3, #4
 800766a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800766e:	e186      	b.n	800797e <UART_SetConfig+0x7ae>
 8007670:	2308      	movs	r3, #8
 8007672:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007676:	e182      	b.n	800797e <UART_SetConfig+0x7ae>
 8007678:	2310      	movs	r3, #16
 800767a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800767e:	e17e      	b.n	800797e <UART_SetConfig+0x7ae>
 8007680:	2320      	movs	r3, #32
 8007682:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007686:	e17a      	b.n	800797e <UART_SetConfig+0x7ae>
 8007688:	2340      	movs	r3, #64	@ 0x40
 800768a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800768e:	e176      	b.n	800797e <UART_SetConfig+0x7ae>
 8007690:	2380      	movs	r3, #128	@ 0x80
 8007692:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007696:	e172      	b.n	800797e <UART_SetConfig+0x7ae>
 8007698:	697b      	ldr	r3, [r7, #20]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	4a5b      	ldr	r2, [pc, #364]	@ (800780c <UART_SetConfig+0x63c>)
 800769e:	4293      	cmp	r3, r2
 80076a0:	d130      	bne.n	8007704 <UART_SetConfig+0x534>
 80076a2:	4b58      	ldr	r3, [pc, #352]	@ (8007804 <UART_SetConfig+0x634>)
 80076a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80076a6:	f003 0307 	and.w	r3, r3, #7
 80076aa:	2b05      	cmp	r3, #5
 80076ac:	d826      	bhi.n	80076fc <UART_SetConfig+0x52c>
 80076ae:	a201      	add	r2, pc, #4	@ (adr r2, 80076b4 <UART_SetConfig+0x4e4>)
 80076b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076b4:	080076cd 	.word	0x080076cd
 80076b8:	080076d5 	.word	0x080076d5
 80076bc:	080076dd 	.word	0x080076dd
 80076c0:	080076e5 	.word	0x080076e5
 80076c4:	080076ed 	.word	0x080076ed
 80076c8:	080076f5 	.word	0x080076f5
 80076cc:	2300      	movs	r3, #0
 80076ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076d2:	e154      	b.n	800797e <UART_SetConfig+0x7ae>
 80076d4:	2304      	movs	r3, #4
 80076d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076da:	e150      	b.n	800797e <UART_SetConfig+0x7ae>
 80076dc:	2308      	movs	r3, #8
 80076de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076e2:	e14c      	b.n	800797e <UART_SetConfig+0x7ae>
 80076e4:	2310      	movs	r3, #16
 80076e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076ea:	e148      	b.n	800797e <UART_SetConfig+0x7ae>
 80076ec:	2320      	movs	r3, #32
 80076ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076f2:	e144      	b.n	800797e <UART_SetConfig+0x7ae>
 80076f4:	2340      	movs	r3, #64	@ 0x40
 80076f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076fa:	e140      	b.n	800797e <UART_SetConfig+0x7ae>
 80076fc:	2380      	movs	r3, #128	@ 0x80
 80076fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007702:	e13c      	b.n	800797e <UART_SetConfig+0x7ae>
 8007704:	697b      	ldr	r3, [r7, #20]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	4a41      	ldr	r2, [pc, #260]	@ (8007810 <UART_SetConfig+0x640>)
 800770a:	4293      	cmp	r3, r2
 800770c:	f040 8082 	bne.w	8007814 <UART_SetConfig+0x644>
 8007710:	4b3c      	ldr	r3, [pc, #240]	@ (8007804 <UART_SetConfig+0x634>)
 8007712:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007714:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007718:	2b28      	cmp	r3, #40	@ 0x28
 800771a:	d86d      	bhi.n	80077f8 <UART_SetConfig+0x628>
 800771c:	a201      	add	r2, pc, #4	@ (adr r2, 8007724 <UART_SetConfig+0x554>)
 800771e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007722:	bf00      	nop
 8007724:	080077c9 	.word	0x080077c9
 8007728:	080077f9 	.word	0x080077f9
 800772c:	080077f9 	.word	0x080077f9
 8007730:	080077f9 	.word	0x080077f9
 8007734:	080077f9 	.word	0x080077f9
 8007738:	080077f9 	.word	0x080077f9
 800773c:	080077f9 	.word	0x080077f9
 8007740:	080077f9 	.word	0x080077f9
 8007744:	080077d1 	.word	0x080077d1
 8007748:	080077f9 	.word	0x080077f9
 800774c:	080077f9 	.word	0x080077f9
 8007750:	080077f9 	.word	0x080077f9
 8007754:	080077f9 	.word	0x080077f9
 8007758:	080077f9 	.word	0x080077f9
 800775c:	080077f9 	.word	0x080077f9
 8007760:	080077f9 	.word	0x080077f9
 8007764:	080077d9 	.word	0x080077d9
 8007768:	080077f9 	.word	0x080077f9
 800776c:	080077f9 	.word	0x080077f9
 8007770:	080077f9 	.word	0x080077f9
 8007774:	080077f9 	.word	0x080077f9
 8007778:	080077f9 	.word	0x080077f9
 800777c:	080077f9 	.word	0x080077f9
 8007780:	080077f9 	.word	0x080077f9
 8007784:	080077e1 	.word	0x080077e1
 8007788:	080077f9 	.word	0x080077f9
 800778c:	080077f9 	.word	0x080077f9
 8007790:	080077f9 	.word	0x080077f9
 8007794:	080077f9 	.word	0x080077f9
 8007798:	080077f9 	.word	0x080077f9
 800779c:	080077f9 	.word	0x080077f9
 80077a0:	080077f9 	.word	0x080077f9
 80077a4:	080077e9 	.word	0x080077e9
 80077a8:	080077f9 	.word	0x080077f9
 80077ac:	080077f9 	.word	0x080077f9
 80077b0:	080077f9 	.word	0x080077f9
 80077b4:	080077f9 	.word	0x080077f9
 80077b8:	080077f9 	.word	0x080077f9
 80077bc:	080077f9 	.word	0x080077f9
 80077c0:	080077f9 	.word	0x080077f9
 80077c4:	080077f1 	.word	0x080077f1
 80077c8:	2301      	movs	r3, #1
 80077ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077ce:	e0d6      	b.n	800797e <UART_SetConfig+0x7ae>
 80077d0:	2304      	movs	r3, #4
 80077d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077d6:	e0d2      	b.n	800797e <UART_SetConfig+0x7ae>
 80077d8:	2308      	movs	r3, #8
 80077da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077de:	e0ce      	b.n	800797e <UART_SetConfig+0x7ae>
 80077e0:	2310      	movs	r3, #16
 80077e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077e6:	e0ca      	b.n	800797e <UART_SetConfig+0x7ae>
 80077e8:	2320      	movs	r3, #32
 80077ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077ee:	e0c6      	b.n	800797e <UART_SetConfig+0x7ae>
 80077f0:	2340      	movs	r3, #64	@ 0x40
 80077f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077f6:	e0c2      	b.n	800797e <UART_SetConfig+0x7ae>
 80077f8:	2380      	movs	r3, #128	@ 0x80
 80077fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077fe:	e0be      	b.n	800797e <UART_SetConfig+0x7ae>
 8007800:	40011400 	.word	0x40011400
 8007804:	58024400 	.word	0x58024400
 8007808:	40007800 	.word	0x40007800
 800780c:	40007c00 	.word	0x40007c00
 8007810:	40011800 	.word	0x40011800
 8007814:	697b      	ldr	r3, [r7, #20]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	4aad      	ldr	r2, [pc, #692]	@ (8007ad0 <UART_SetConfig+0x900>)
 800781a:	4293      	cmp	r3, r2
 800781c:	d176      	bne.n	800790c <UART_SetConfig+0x73c>
 800781e:	4bad      	ldr	r3, [pc, #692]	@ (8007ad4 <UART_SetConfig+0x904>)
 8007820:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007822:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007826:	2b28      	cmp	r3, #40	@ 0x28
 8007828:	d86c      	bhi.n	8007904 <UART_SetConfig+0x734>
 800782a:	a201      	add	r2, pc, #4	@ (adr r2, 8007830 <UART_SetConfig+0x660>)
 800782c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007830:	080078d5 	.word	0x080078d5
 8007834:	08007905 	.word	0x08007905
 8007838:	08007905 	.word	0x08007905
 800783c:	08007905 	.word	0x08007905
 8007840:	08007905 	.word	0x08007905
 8007844:	08007905 	.word	0x08007905
 8007848:	08007905 	.word	0x08007905
 800784c:	08007905 	.word	0x08007905
 8007850:	080078dd 	.word	0x080078dd
 8007854:	08007905 	.word	0x08007905
 8007858:	08007905 	.word	0x08007905
 800785c:	08007905 	.word	0x08007905
 8007860:	08007905 	.word	0x08007905
 8007864:	08007905 	.word	0x08007905
 8007868:	08007905 	.word	0x08007905
 800786c:	08007905 	.word	0x08007905
 8007870:	080078e5 	.word	0x080078e5
 8007874:	08007905 	.word	0x08007905
 8007878:	08007905 	.word	0x08007905
 800787c:	08007905 	.word	0x08007905
 8007880:	08007905 	.word	0x08007905
 8007884:	08007905 	.word	0x08007905
 8007888:	08007905 	.word	0x08007905
 800788c:	08007905 	.word	0x08007905
 8007890:	080078ed 	.word	0x080078ed
 8007894:	08007905 	.word	0x08007905
 8007898:	08007905 	.word	0x08007905
 800789c:	08007905 	.word	0x08007905
 80078a0:	08007905 	.word	0x08007905
 80078a4:	08007905 	.word	0x08007905
 80078a8:	08007905 	.word	0x08007905
 80078ac:	08007905 	.word	0x08007905
 80078b0:	080078f5 	.word	0x080078f5
 80078b4:	08007905 	.word	0x08007905
 80078b8:	08007905 	.word	0x08007905
 80078bc:	08007905 	.word	0x08007905
 80078c0:	08007905 	.word	0x08007905
 80078c4:	08007905 	.word	0x08007905
 80078c8:	08007905 	.word	0x08007905
 80078cc:	08007905 	.word	0x08007905
 80078d0:	080078fd 	.word	0x080078fd
 80078d4:	2301      	movs	r3, #1
 80078d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078da:	e050      	b.n	800797e <UART_SetConfig+0x7ae>
 80078dc:	2304      	movs	r3, #4
 80078de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078e2:	e04c      	b.n	800797e <UART_SetConfig+0x7ae>
 80078e4:	2308      	movs	r3, #8
 80078e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078ea:	e048      	b.n	800797e <UART_SetConfig+0x7ae>
 80078ec:	2310      	movs	r3, #16
 80078ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078f2:	e044      	b.n	800797e <UART_SetConfig+0x7ae>
 80078f4:	2320      	movs	r3, #32
 80078f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078fa:	e040      	b.n	800797e <UART_SetConfig+0x7ae>
 80078fc:	2340      	movs	r3, #64	@ 0x40
 80078fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007902:	e03c      	b.n	800797e <UART_SetConfig+0x7ae>
 8007904:	2380      	movs	r3, #128	@ 0x80
 8007906:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800790a:	e038      	b.n	800797e <UART_SetConfig+0x7ae>
 800790c:	697b      	ldr	r3, [r7, #20]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	4a71      	ldr	r2, [pc, #452]	@ (8007ad8 <UART_SetConfig+0x908>)
 8007912:	4293      	cmp	r3, r2
 8007914:	d130      	bne.n	8007978 <UART_SetConfig+0x7a8>
 8007916:	4b6f      	ldr	r3, [pc, #444]	@ (8007ad4 <UART_SetConfig+0x904>)
 8007918:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800791a:	f003 0307 	and.w	r3, r3, #7
 800791e:	2b05      	cmp	r3, #5
 8007920:	d826      	bhi.n	8007970 <UART_SetConfig+0x7a0>
 8007922:	a201      	add	r2, pc, #4	@ (adr r2, 8007928 <UART_SetConfig+0x758>)
 8007924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007928:	08007941 	.word	0x08007941
 800792c:	08007949 	.word	0x08007949
 8007930:	08007951 	.word	0x08007951
 8007934:	08007959 	.word	0x08007959
 8007938:	08007961 	.word	0x08007961
 800793c:	08007969 	.word	0x08007969
 8007940:	2302      	movs	r3, #2
 8007942:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007946:	e01a      	b.n	800797e <UART_SetConfig+0x7ae>
 8007948:	2304      	movs	r3, #4
 800794a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800794e:	e016      	b.n	800797e <UART_SetConfig+0x7ae>
 8007950:	2308      	movs	r3, #8
 8007952:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007956:	e012      	b.n	800797e <UART_SetConfig+0x7ae>
 8007958:	2310      	movs	r3, #16
 800795a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800795e:	e00e      	b.n	800797e <UART_SetConfig+0x7ae>
 8007960:	2320      	movs	r3, #32
 8007962:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007966:	e00a      	b.n	800797e <UART_SetConfig+0x7ae>
 8007968:	2340      	movs	r3, #64	@ 0x40
 800796a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800796e:	e006      	b.n	800797e <UART_SetConfig+0x7ae>
 8007970:	2380      	movs	r3, #128	@ 0x80
 8007972:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007976:	e002      	b.n	800797e <UART_SetConfig+0x7ae>
 8007978:	2380      	movs	r3, #128	@ 0x80
 800797a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800797e:	697b      	ldr	r3, [r7, #20]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	4a55      	ldr	r2, [pc, #340]	@ (8007ad8 <UART_SetConfig+0x908>)
 8007984:	4293      	cmp	r3, r2
 8007986:	f040 80f8 	bne.w	8007b7a <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800798a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800798e:	2b20      	cmp	r3, #32
 8007990:	dc46      	bgt.n	8007a20 <UART_SetConfig+0x850>
 8007992:	2b02      	cmp	r3, #2
 8007994:	db75      	blt.n	8007a82 <UART_SetConfig+0x8b2>
 8007996:	3b02      	subs	r3, #2
 8007998:	2b1e      	cmp	r3, #30
 800799a:	d872      	bhi.n	8007a82 <UART_SetConfig+0x8b2>
 800799c:	a201      	add	r2, pc, #4	@ (adr r2, 80079a4 <UART_SetConfig+0x7d4>)
 800799e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079a2:	bf00      	nop
 80079a4:	08007a27 	.word	0x08007a27
 80079a8:	08007a83 	.word	0x08007a83
 80079ac:	08007a2f 	.word	0x08007a2f
 80079b0:	08007a83 	.word	0x08007a83
 80079b4:	08007a83 	.word	0x08007a83
 80079b8:	08007a83 	.word	0x08007a83
 80079bc:	08007a3f 	.word	0x08007a3f
 80079c0:	08007a83 	.word	0x08007a83
 80079c4:	08007a83 	.word	0x08007a83
 80079c8:	08007a83 	.word	0x08007a83
 80079cc:	08007a83 	.word	0x08007a83
 80079d0:	08007a83 	.word	0x08007a83
 80079d4:	08007a83 	.word	0x08007a83
 80079d8:	08007a83 	.word	0x08007a83
 80079dc:	08007a4f 	.word	0x08007a4f
 80079e0:	08007a83 	.word	0x08007a83
 80079e4:	08007a83 	.word	0x08007a83
 80079e8:	08007a83 	.word	0x08007a83
 80079ec:	08007a83 	.word	0x08007a83
 80079f0:	08007a83 	.word	0x08007a83
 80079f4:	08007a83 	.word	0x08007a83
 80079f8:	08007a83 	.word	0x08007a83
 80079fc:	08007a83 	.word	0x08007a83
 8007a00:	08007a83 	.word	0x08007a83
 8007a04:	08007a83 	.word	0x08007a83
 8007a08:	08007a83 	.word	0x08007a83
 8007a0c:	08007a83 	.word	0x08007a83
 8007a10:	08007a83 	.word	0x08007a83
 8007a14:	08007a83 	.word	0x08007a83
 8007a18:	08007a83 	.word	0x08007a83
 8007a1c:	08007a75 	.word	0x08007a75
 8007a20:	2b40      	cmp	r3, #64	@ 0x40
 8007a22:	d02a      	beq.n	8007a7a <UART_SetConfig+0x8aa>
 8007a24:	e02d      	b.n	8007a82 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007a26:	f7fe fd81 	bl	800652c <HAL_RCCEx_GetD3PCLK1Freq>
 8007a2a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007a2c:	e02f      	b.n	8007a8e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007a2e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007a32:	4618      	mov	r0, r3
 8007a34:	f7fe fd90 	bl	8006558 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007a38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a3c:	e027      	b.n	8007a8e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007a3e:	f107 0318 	add.w	r3, r7, #24
 8007a42:	4618      	mov	r0, r3
 8007a44:	f7fe fedc 	bl	8006800 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007a48:	69fb      	ldr	r3, [r7, #28]
 8007a4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a4c:	e01f      	b.n	8007a8e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007a4e:	4b21      	ldr	r3, [pc, #132]	@ (8007ad4 <UART_SetConfig+0x904>)
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	f003 0320 	and.w	r3, r3, #32
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d009      	beq.n	8007a6e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007a5a:	4b1e      	ldr	r3, [pc, #120]	@ (8007ad4 <UART_SetConfig+0x904>)
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	08db      	lsrs	r3, r3, #3
 8007a60:	f003 0303 	and.w	r3, r3, #3
 8007a64:	4a1d      	ldr	r2, [pc, #116]	@ (8007adc <UART_SetConfig+0x90c>)
 8007a66:	fa22 f303 	lsr.w	r3, r2, r3
 8007a6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007a6c:	e00f      	b.n	8007a8e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8007a6e:	4b1b      	ldr	r3, [pc, #108]	@ (8007adc <UART_SetConfig+0x90c>)
 8007a70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a72:	e00c      	b.n	8007a8e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007a74:	4b1a      	ldr	r3, [pc, #104]	@ (8007ae0 <UART_SetConfig+0x910>)
 8007a76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a78:	e009      	b.n	8007a8e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a7a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007a7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a80:	e005      	b.n	8007a8e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8007a82:	2300      	movs	r3, #0
 8007a84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007a86:	2301      	movs	r3, #1
 8007a88:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007a8c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007a8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	f000 81ee 	beq.w	8007e72 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007a96:	697b      	ldr	r3, [r7, #20]
 8007a98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a9a:	4a12      	ldr	r2, [pc, #72]	@ (8007ae4 <UART_SetConfig+0x914>)
 8007a9c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007aa0:	461a      	mov	r2, r3
 8007aa2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007aa4:	fbb3 f3f2 	udiv	r3, r3, r2
 8007aa8:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007aaa:	697b      	ldr	r3, [r7, #20]
 8007aac:	685a      	ldr	r2, [r3, #4]
 8007aae:	4613      	mov	r3, r2
 8007ab0:	005b      	lsls	r3, r3, #1
 8007ab2:	4413      	add	r3, r2
 8007ab4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007ab6:	429a      	cmp	r2, r3
 8007ab8:	d305      	bcc.n	8007ac6 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007aba:	697b      	ldr	r3, [r7, #20]
 8007abc:	685b      	ldr	r3, [r3, #4]
 8007abe:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007ac0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007ac2:	429a      	cmp	r2, r3
 8007ac4:	d910      	bls.n	8007ae8 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8007ac6:	2301      	movs	r3, #1
 8007ac8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007acc:	e1d1      	b.n	8007e72 <UART_SetConfig+0xca2>
 8007ace:	bf00      	nop
 8007ad0:	40011c00 	.word	0x40011c00
 8007ad4:	58024400 	.word	0x58024400
 8007ad8:	58000c00 	.word	0x58000c00
 8007adc:	03d09000 	.word	0x03d09000
 8007ae0:	003d0900 	.word	0x003d0900
 8007ae4:	080093b4 	.word	0x080093b4
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007ae8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007aea:	2200      	movs	r2, #0
 8007aec:	60bb      	str	r3, [r7, #8]
 8007aee:	60fa      	str	r2, [r7, #12]
 8007af0:	697b      	ldr	r3, [r7, #20]
 8007af2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007af4:	4ac0      	ldr	r2, [pc, #768]	@ (8007df8 <UART_SetConfig+0xc28>)
 8007af6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007afa:	b29b      	uxth	r3, r3
 8007afc:	2200      	movs	r2, #0
 8007afe:	603b      	str	r3, [r7, #0]
 8007b00:	607a      	str	r2, [r7, #4]
 8007b02:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b06:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007b0a:	f7f8 fc51 	bl	80003b0 <__aeabi_uldivmod>
 8007b0e:	4602      	mov	r2, r0
 8007b10:	460b      	mov	r3, r1
 8007b12:	4610      	mov	r0, r2
 8007b14:	4619      	mov	r1, r3
 8007b16:	f04f 0200 	mov.w	r2, #0
 8007b1a:	f04f 0300 	mov.w	r3, #0
 8007b1e:	020b      	lsls	r3, r1, #8
 8007b20:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007b24:	0202      	lsls	r2, r0, #8
 8007b26:	6979      	ldr	r1, [r7, #20]
 8007b28:	6849      	ldr	r1, [r1, #4]
 8007b2a:	0849      	lsrs	r1, r1, #1
 8007b2c:	2000      	movs	r0, #0
 8007b2e:	460c      	mov	r4, r1
 8007b30:	4605      	mov	r5, r0
 8007b32:	eb12 0804 	adds.w	r8, r2, r4
 8007b36:	eb43 0905 	adc.w	r9, r3, r5
 8007b3a:	697b      	ldr	r3, [r7, #20]
 8007b3c:	685b      	ldr	r3, [r3, #4]
 8007b3e:	2200      	movs	r2, #0
 8007b40:	469a      	mov	sl, r3
 8007b42:	4693      	mov	fp, r2
 8007b44:	4652      	mov	r2, sl
 8007b46:	465b      	mov	r3, fp
 8007b48:	4640      	mov	r0, r8
 8007b4a:	4649      	mov	r1, r9
 8007b4c:	f7f8 fc30 	bl	80003b0 <__aeabi_uldivmod>
 8007b50:	4602      	mov	r2, r0
 8007b52:	460b      	mov	r3, r1
 8007b54:	4613      	mov	r3, r2
 8007b56:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007b58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b5a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007b5e:	d308      	bcc.n	8007b72 <UART_SetConfig+0x9a2>
 8007b60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b62:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007b66:	d204      	bcs.n	8007b72 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8007b68:	697b      	ldr	r3, [r7, #20]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007b6e:	60da      	str	r2, [r3, #12]
 8007b70:	e17f      	b.n	8007e72 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8007b72:	2301      	movs	r3, #1
 8007b74:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007b78:	e17b      	b.n	8007e72 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007b7a:	697b      	ldr	r3, [r7, #20]
 8007b7c:	69db      	ldr	r3, [r3, #28]
 8007b7e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007b82:	f040 80bd 	bne.w	8007d00 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8007b86:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007b8a:	2b20      	cmp	r3, #32
 8007b8c:	dc48      	bgt.n	8007c20 <UART_SetConfig+0xa50>
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	db7b      	blt.n	8007c8a <UART_SetConfig+0xaba>
 8007b92:	2b20      	cmp	r3, #32
 8007b94:	d879      	bhi.n	8007c8a <UART_SetConfig+0xaba>
 8007b96:	a201      	add	r2, pc, #4	@ (adr r2, 8007b9c <UART_SetConfig+0x9cc>)
 8007b98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b9c:	08007c27 	.word	0x08007c27
 8007ba0:	08007c2f 	.word	0x08007c2f
 8007ba4:	08007c8b 	.word	0x08007c8b
 8007ba8:	08007c8b 	.word	0x08007c8b
 8007bac:	08007c37 	.word	0x08007c37
 8007bb0:	08007c8b 	.word	0x08007c8b
 8007bb4:	08007c8b 	.word	0x08007c8b
 8007bb8:	08007c8b 	.word	0x08007c8b
 8007bbc:	08007c47 	.word	0x08007c47
 8007bc0:	08007c8b 	.word	0x08007c8b
 8007bc4:	08007c8b 	.word	0x08007c8b
 8007bc8:	08007c8b 	.word	0x08007c8b
 8007bcc:	08007c8b 	.word	0x08007c8b
 8007bd0:	08007c8b 	.word	0x08007c8b
 8007bd4:	08007c8b 	.word	0x08007c8b
 8007bd8:	08007c8b 	.word	0x08007c8b
 8007bdc:	08007c57 	.word	0x08007c57
 8007be0:	08007c8b 	.word	0x08007c8b
 8007be4:	08007c8b 	.word	0x08007c8b
 8007be8:	08007c8b 	.word	0x08007c8b
 8007bec:	08007c8b 	.word	0x08007c8b
 8007bf0:	08007c8b 	.word	0x08007c8b
 8007bf4:	08007c8b 	.word	0x08007c8b
 8007bf8:	08007c8b 	.word	0x08007c8b
 8007bfc:	08007c8b 	.word	0x08007c8b
 8007c00:	08007c8b 	.word	0x08007c8b
 8007c04:	08007c8b 	.word	0x08007c8b
 8007c08:	08007c8b 	.word	0x08007c8b
 8007c0c:	08007c8b 	.word	0x08007c8b
 8007c10:	08007c8b 	.word	0x08007c8b
 8007c14:	08007c8b 	.word	0x08007c8b
 8007c18:	08007c8b 	.word	0x08007c8b
 8007c1c:	08007c7d 	.word	0x08007c7d
 8007c20:	2b40      	cmp	r3, #64	@ 0x40
 8007c22:	d02e      	beq.n	8007c82 <UART_SetConfig+0xab2>
 8007c24:	e031      	b.n	8007c8a <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c26:	f7fc fde3 	bl	80047f0 <HAL_RCC_GetPCLK1Freq>
 8007c2a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007c2c:	e033      	b.n	8007c96 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007c2e:	f7fc fdf5 	bl	800481c <HAL_RCC_GetPCLK2Freq>
 8007c32:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007c34:	e02f      	b.n	8007c96 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c36:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	f7fe fc8c 	bl	8006558 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007c40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c44:	e027      	b.n	8007c96 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007c46:	f107 0318 	add.w	r3, r7, #24
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	f7fe fdd8 	bl	8006800 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007c50:	69fb      	ldr	r3, [r7, #28]
 8007c52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c54:	e01f      	b.n	8007c96 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007c56:	4b69      	ldr	r3, [pc, #420]	@ (8007dfc <UART_SetConfig+0xc2c>)
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f003 0320 	and.w	r3, r3, #32
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d009      	beq.n	8007c76 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007c62:	4b66      	ldr	r3, [pc, #408]	@ (8007dfc <UART_SetConfig+0xc2c>)
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	08db      	lsrs	r3, r3, #3
 8007c68:	f003 0303 	and.w	r3, r3, #3
 8007c6c:	4a64      	ldr	r2, [pc, #400]	@ (8007e00 <UART_SetConfig+0xc30>)
 8007c6e:	fa22 f303 	lsr.w	r3, r2, r3
 8007c72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007c74:	e00f      	b.n	8007c96 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8007c76:	4b62      	ldr	r3, [pc, #392]	@ (8007e00 <UART_SetConfig+0xc30>)
 8007c78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c7a:	e00c      	b.n	8007c96 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007c7c:	4b61      	ldr	r3, [pc, #388]	@ (8007e04 <UART_SetConfig+0xc34>)
 8007c7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c80:	e009      	b.n	8007c96 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c82:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007c86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c88:	e005      	b.n	8007c96 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007c8e:	2301      	movs	r3, #1
 8007c90:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007c94:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007c96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	f000 80ea 	beq.w	8007e72 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007c9e:	697b      	ldr	r3, [r7, #20]
 8007ca0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ca2:	4a55      	ldr	r2, [pc, #340]	@ (8007df8 <UART_SetConfig+0xc28>)
 8007ca4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007ca8:	461a      	mov	r2, r3
 8007caa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007cac:	fbb3 f3f2 	udiv	r3, r3, r2
 8007cb0:	005a      	lsls	r2, r3, #1
 8007cb2:	697b      	ldr	r3, [r7, #20]
 8007cb4:	685b      	ldr	r3, [r3, #4]
 8007cb6:	085b      	lsrs	r3, r3, #1
 8007cb8:	441a      	add	r2, r3
 8007cba:	697b      	ldr	r3, [r7, #20]
 8007cbc:	685b      	ldr	r3, [r3, #4]
 8007cbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cc2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007cc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cc6:	2b0f      	cmp	r3, #15
 8007cc8:	d916      	bls.n	8007cf8 <UART_SetConfig+0xb28>
 8007cca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ccc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007cd0:	d212      	bcs.n	8007cf8 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007cd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cd4:	b29b      	uxth	r3, r3
 8007cd6:	f023 030f 	bic.w	r3, r3, #15
 8007cda:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007cdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cde:	085b      	lsrs	r3, r3, #1
 8007ce0:	b29b      	uxth	r3, r3
 8007ce2:	f003 0307 	and.w	r3, r3, #7
 8007ce6:	b29a      	uxth	r2, r3
 8007ce8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007cea:	4313      	orrs	r3, r2
 8007cec:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8007cee:	697b      	ldr	r3, [r7, #20]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8007cf4:	60da      	str	r2, [r3, #12]
 8007cf6:	e0bc      	b.n	8007e72 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8007cf8:	2301      	movs	r3, #1
 8007cfa:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007cfe:	e0b8      	b.n	8007e72 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007d00:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007d04:	2b20      	cmp	r3, #32
 8007d06:	dc4b      	bgt.n	8007da0 <UART_SetConfig+0xbd0>
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	f2c0 8087 	blt.w	8007e1c <UART_SetConfig+0xc4c>
 8007d0e:	2b20      	cmp	r3, #32
 8007d10:	f200 8084 	bhi.w	8007e1c <UART_SetConfig+0xc4c>
 8007d14:	a201      	add	r2, pc, #4	@ (adr r2, 8007d1c <UART_SetConfig+0xb4c>)
 8007d16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d1a:	bf00      	nop
 8007d1c:	08007da7 	.word	0x08007da7
 8007d20:	08007daf 	.word	0x08007daf
 8007d24:	08007e1d 	.word	0x08007e1d
 8007d28:	08007e1d 	.word	0x08007e1d
 8007d2c:	08007db7 	.word	0x08007db7
 8007d30:	08007e1d 	.word	0x08007e1d
 8007d34:	08007e1d 	.word	0x08007e1d
 8007d38:	08007e1d 	.word	0x08007e1d
 8007d3c:	08007dc7 	.word	0x08007dc7
 8007d40:	08007e1d 	.word	0x08007e1d
 8007d44:	08007e1d 	.word	0x08007e1d
 8007d48:	08007e1d 	.word	0x08007e1d
 8007d4c:	08007e1d 	.word	0x08007e1d
 8007d50:	08007e1d 	.word	0x08007e1d
 8007d54:	08007e1d 	.word	0x08007e1d
 8007d58:	08007e1d 	.word	0x08007e1d
 8007d5c:	08007dd7 	.word	0x08007dd7
 8007d60:	08007e1d 	.word	0x08007e1d
 8007d64:	08007e1d 	.word	0x08007e1d
 8007d68:	08007e1d 	.word	0x08007e1d
 8007d6c:	08007e1d 	.word	0x08007e1d
 8007d70:	08007e1d 	.word	0x08007e1d
 8007d74:	08007e1d 	.word	0x08007e1d
 8007d78:	08007e1d 	.word	0x08007e1d
 8007d7c:	08007e1d 	.word	0x08007e1d
 8007d80:	08007e1d 	.word	0x08007e1d
 8007d84:	08007e1d 	.word	0x08007e1d
 8007d88:	08007e1d 	.word	0x08007e1d
 8007d8c:	08007e1d 	.word	0x08007e1d
 8007d90:	08007e1d 	.word	0x08007e1d
 8007d94:	08007e1d 	.word	0x08007e1d
 8007d98:	08007e1d 	.word	0x08007e1d
 8007d9c:	08007e0f 	.word	0x08007e0f
 8007da0:	2b40      	cmp	r3, #64	@ 0x40
 8007da2:	d037      	beq.n	8007e14 <UART_SetConfig+0xc44>
 8007da4:	e03a      	b.n	8007e1c <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007da6:	f7fc fd23 	bl	80047f0 <HAL_RCC_GetPCLK1Freq>
 8007daa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007dac:	e03c      	b.n	8007e28 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007dae:	f7fc fd35 	bl	800481c <HAL_RCC_GetPCLK2Freq>
 8007db2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007db4:	e038      	b.n	8007e28 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007db6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007dba:	4618      	mov	r0, r3
 8007dbc:	f7fe fbcc 	bl	8006558 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007dc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007dc4:	e030      	b.n	8007e28 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007dc6:	f107 0318 	add.w	r3, r7, #24
 8007dca:	4618      	mov	r0, r3
 8007dcc:	f7fe fd18 	bl	8006800 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007dd0:	69fb      	ldr	r3, [r7, #28]
 8007dd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007dd4:	e028      	b.n	8007e28 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007dd6:	4b09      	ldr	r3, [pc, #36]	@ (8007dfc <UART_SetConfig+0xc2c>)
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	f003 0320 	and.w	r3, r3, #32
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d012      	beq.n	8007e08 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007de2:	4b06      	ldr	r3, [pc, #24]	@ (8007dfc <UART_SetConfig+0xc2c>)
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	08db      	lsrs	r3, r3, #3
 8007de8:	f003 0303 	and.w	r3, r3, #3
 8007dec:	4a04      	ldr	r2, [pc, #16]	@ (8007e00 <UART_SetConfig+0xc30>)
 8007dee:	fa22 f303 	lsr.w	r3, r2, r3
 8007df2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007df4:	e018      	b.n	8007e28 <UART_SetConfig+0xc58>
 8007df6:	bf00      	nop
 8007df8:	080093b4 	.word	0x080093b4
 8007dfc:	58024400 	.word	0x58024400
 8007e00:	03d09000 	.word	0x03d09000
 8007e04:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8007e08:	4b24      	ldr	r3, [pc, #144]	@ (8007e9c <UART_SetConfig+0xccc>)
 8007e0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e0c:	e00c      	b.n	8007e28 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007e0e:	4b24      	ldr	r3, [pc, #144]	@ (8007ea0 <UART_SetConfig+0xcd0>)
 8007e10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e12:	e009      	b.n	8007e28 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007e14:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007e18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e1a:	e005      	b.n	8007e28 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007e20:	2301      	movs	r3, #1
 8007e22:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007e26:	bf00      	nop
    }

    if (pclk != 0U)
 8007e28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d021      	beq.n	8007e72 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007e2e:	697b      	ldr	r3, [r7, #20]
 8007e30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e32:	4a1c      	ldr	r2, [pc, #112]	@ (8007ea4 <UART_SetConfig+0xcd4>)
 8007e34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007e38:	461a      	mov	r2, r3
 8007e3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e3c:	fbb3 f2f2 	udiv	r2, r3, r2
 8007e40:	697b      	ldr	r3, [r7, #20]
 8007e42:	685b      	ldr	r3, [r3, #4]
 8007e44:	085b      	lsrs	r3, r3, #1
 8007e46:	441a      	add	r2, r3
 8007e48:	697b      	ldr	r3, [r7, #20]
 8007e4a:	685b      	ldr	r3, [r3, #4]
 8007e4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e50:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007e52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e54:	2b0f      	cmp	r3, #15
 8007e56:	d909      	bls.n	8007e6c <UART_SetConfig+0xc9c>
 8007e58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e5a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007e5e:	d205      	bcs.n	8007e6c <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007e60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e62:	b29a      	uxth	r2, r3
 8007e64:	697b      	ldr	r3, [r7, #20]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	60da      	str	r2, [r3, #12]
 8007e6a:	e002      	b.n	8007e72 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8007e6c:	2301      	movs	r3, #1
 8007e6e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007e72:	697b      	ldr	r3, [r7, #20]
 8007e74:	2201      	movs	r2, #1
 8007e76:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007e7a:	697b      	ldr	r3, [r7, #20]
 8007e7c:	2201      	movs	r2, #1
 8007e7e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007e82:	697b      	ldr	r3, [r7, #20]
 8007e84:	2200      	movs	r2, #0
 8007e86:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007e88:	697b      	ldr	r3, [r7, #20]
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007e8e:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8007e92:	4618      	mov	r0, r3
 8007e94:	3748      	adds	r7, #72	@ 0x48
 8007e96:	46bd      	mov	sp, r7
 8007e98:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007e9c:	03d09000 	.word	0x03d09000
 8007ea0:	003d0900 	.word	0x003d0900
 8007ea4:	080093b4 	.word	0x080093b4

08007ea8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007ea8:	b480      	push	{r7}
 8007eaa:	b083      	sub	sp, #12
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007eb4:	f003 0308 	and.w	r3, r3, #8
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d00a      	beq.n	8007ed2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	685b      	ldr	r3, [r3, #4]
 8007ec2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	430a      	orrs	r2, r1
 8007ed0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ed6:	f003 0301 	and.w	r3, r3, #1
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d00a      	beq.n	8007ef4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	685b      	ldr	r3, [r3, #4]
 8007ee4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	430a      	orrs	r2, r1
 8007ef2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ef8:	f003 0302 	and.w	r3, r3, #2
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d00a      	beq.n	8007f16 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	685b      	ldr	r3, [r3, #4]
 8007f06:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	430a      	orrs	r2, r1
 8007f14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f1a:	f003 0304 	and.w	r3, r3, #4
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d00a      	beq.n	8007f38 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	685b      	ldr	r3, [r3, #4]
 8007f28:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	430a      	orrs	r2, r1
 8007f36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f3c:	f003 0310 	and.w	r3, r3, #16
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d00a      	beq.n	8007f5a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	689b      	ldr	r3, [r3, #8]
 8007f4a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	430a      	orrs	r2, r1
 8007f58:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f5e:	f003 0320 	and.w	r3, r3, #32
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d00a      	beq.n	8007f7c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	689b      	ldr	r3, [r3, #8]
 8007f6c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	430a      	orrs	r2, r1
 8007f7a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d01a      	beq.n	8007fbe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	685b      	ldr	r3, [r3, #4]
 8007f8e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	430a      	orrs	r2, r1
 8007f9c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007fa2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007fa6:	d10a      	bne.n	8007fbe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	685b      	ldr	r3, [r3, #4]
 8007fae:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	430a      	orrs	r2, r1
 8007fbc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d00a      	beq.n	8007fe0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	685b      	ldr	r3, [r3, #4]
 8007fd0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	430a      	orrs	r2, r1
 8007fde:	605a      	str	r2, [r3, #4]
  }
}
 8007fe0:	bf00      	nop
 8007fe2:	370c      	adds	r7, #12
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fea:	4770      	bx	lr

08007fec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b098      	sub	sp, #96	@ 0x60
 8007ff0:	af02      	add	r7, sp, #8
 8007ff2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007ffc:	f7f9 faa8 	bl	8001550 <HAL_GetTick>
 8008000:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	f003 0308 	and.w	r3, r3, #8
 800800c:	2b08      	cmp	r3, #8
 800800e:	d12f      	bne.n	8008070 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008010:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008014:	9300      	str	r3, [sp, #0]
 8008016:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008018:	2200      	movs	r2, #0
 800801a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800801e:	6878      	ldr	r0, [r7, #4]
 8008020:	f000 f88e 	bl	8008140 <UART_WaitOnFlagUntilTimeout>
 8008024:	4603      	mov	r3, r0
 8008026:	2b00      	cmp	r3, #0
 8008028:	d022      	beq.n	8008070 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008030:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008032:	e853 3f00 	ldrex	r3, [r3]
 8008036:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008038:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800803a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800803e:	653b      	str	r3, [r7, #80]	@ 0x50
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	461a      	mov	r2, r3
 8008046:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008048:	647b      	str	r3, [r7, #68]	@ 0x44
 800804a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800804c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800804e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008050:	e841 2300 	strex	r3, r2, [r1]
 8008054:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008056:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008058:	2b00      	cmp	r3, #0
 800805a:	d1e6      	bne.n	800802a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2220      	movs	r2, #32
 8008060:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2200      	movs	r2, #0
 8008068:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800806c:	2303      	movs	r3, #3
 800806e:	e063      	b.n	8008138 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	f003 0304 	and.w	r3, r3, #4
 800807a:	2b04      	cmp	r3, #4
 800807c:	d149      	bne.n	8008112 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800807e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008082:	9300      	str	r3, [sp, #0]
 8008084:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008086:	2200      	movs	r2, #0
 8008088:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800808c:	6878      	ldr	r0, [r7, #4]
 800808e:	f000 f857 	bl	8008140 <UART_WaitOnFlagUntilTimeout>
 8008092:	4603      	mov	r3, r0
 8008094:	2b00      	cmp	r3, #0
 8008096:	d03c      	beq.n	8008112 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800809e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080a0:	e853 3f00 	ldrex	r3, [r3]
 80080a4:	623b      	str	r3, [r7, #32]
   return(result);
 80080a6:	6a3b      	ldr	r3, [r7, #32]
 80080a8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80080ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	461a      	mov	r2, r3
 80080b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80080b6:	633b      	str	r3, [r7, #48]	@ 0x30
 80080b8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080ba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80080bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80080be:	e841 2300 	strex	r3, r2, [r1]
 80080c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80080c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d1e6      	bne.n	8008098 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	3308      	adds	r3, #8
 80080d0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080d2:	693b      	ldr	r3, [r7, #16]
 80080d4:	e853 3f00 	ldrex	r3, [r3]
 80080d8:	60fb      	str	r3, [r7, #12]
   return(result);
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	f023 0301 	bic.w	r3, r3, #1
 80080e0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	3308      	adds	r3, #8
 80080e8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80080ea:	61fa      	str	r2, [r7, #28]
 80080ec:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080ee:	69b9      	ldr	r1, [r7, #24]
 80080f0:	69fa      	ldr	r2, [r7, #28]
 80080f2:	e841 2300 	strex	r3, r2, [r1]
 80080f6:	617b      	str	r3, [r7, #20]
   return(result);
 80080f8:	697b      	ldr	r3, [r7, #20]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d1e5      	bne.n	80080ca <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	2220      	movs	r2, #32
 8008102:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	2200      	movs	r2, #0
 800810a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800810e:	2303      	movs	r3, #3
 8008110:	e012      	b.n	8008138 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	2220      	movs	r2, #32
 8008116:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	2220      	movs	r2, #32
 800811e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2200      	movs	r2, #0
 8008126:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2200      	movs	r2, #0
 800812c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	2200      	movs	r2, #0
 8008132:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008136:	2300      	movs	r3, #0
}
 8008138:	4618      	mov	r0, r3
 800813a:	3758      	adds	r7, #88	@ 0x58
 800813c:	46bd      	mov	sp, r7
 800813e:	bd80      	pop	{r7, pc}

08008140 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b084      	sub	sp, #16
 8008144:	af00      	add	r7, sp, #0
 8008146:	60f8      	str	r0, [r7, #12]
 8008148:	60b9      	str	r1, [r7, #8]
 800814a:	603b      	str	r3, [r7, #0]
 800814c:	4613      	mov	r3, r2
 800814e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008150:	e04f      	b.n	80081f2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008152:	69bb      	ldr	r3, [r7, #24]
 8008154:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008158:	d04b      	beq.n	80081f2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800815a:	f7f9 f9f9 	bl	8001550 <HAL_GetTick>
 800815e:	4602      	mov	r2, r0
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	1ad3      	subs	r3, r2, r3
 8008164:	69ba      	ldr	r2, [r7, #24]
 8008166:	429a      	cmp	r2, r3
 8008168:	d302      	bcc.n	8008170 <UART_WaitOnFlagUntilTimeout+0x30>
 800816a:	69bb      	ldr	r3, [r7, #24]
 800816c:	2b00      	cmp	r3, #0
 800816e:	d101      	bne.n	8008174 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008170:	2303      	movs	r3, #3
 8008172:	e04e      	b.n	8008212 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f003 0304 	and.w	r3, r3, #4
 800817e:	2b00      	cmp	r3, #0
 8008180:	d037      	beq.n	80081f2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008182:	68bb      	ldr	r3, [r7, #8]
 8008184:	2b80      	cmp	r3, #128	@ 0x80
 8008186:	d034      	beq.n	80081f2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008188:	68bb      	ldr	r3, [r7, #8]
 800818a:	2b40      	cmp	r3, #64	@ 0x40
 800818c:	d031      	beq.n	80081f2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	69db      	ldr	r3, [r3, #28]
 8008194:	f003 0308 	and.w	r3, r3, #8
 8008198:	2b08      	cmp	r3, #8
 800819a:	d110      	bne.n	80081be <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	2208      	movs	r2, #8
 80081a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80081a4:	68f8      	ldr	r0, [r7, #12]
 80081a6:	f000 f839 	bl	800821c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	2208      	movs	r2, #8
 80081ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	2200      	movs	r2, #0
 80081b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80081ba:	2301      	movs	r3, #1
 80081bc:	e029      	b.n	8008212 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	69db      	ldr	r3, [r3, #28]
 80081c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80081c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80081cc:	d111      	bne.n	80081f2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80081d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80081d8:	68f8      	ldr	r0, [r7, #12]
 80081da:	f000 f81f 	bl	800821c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	2220      	movs	r2, #32
 80081e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	2200      	movs	r2, #0
 80081ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80081ee:	2303      	movs	r3, #3
 80081f0:	e00f      	b.n	8008212 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	69da      	ldr	r2, [r3, #28]
 80081f8:	68bb      	ldr	r3, [r7, #8]
 80081fa:	4013      	ands	r3, r2
 80081fc:	68ba      	ldr	r2, [r7, #8]
 80081fe:	429a      	cmp	r2, r3
 8008200:	bf0c      	ite	eq
 8008202:	2301      	moveq	r3, #1
 8008204:	2300      	movne	r3, #0
 8008206:	b2db      	uxtb	r3, r3
 8008208:	461a      	mov	r2, r3
 800820a:	79fb      	ldrb	r3, [r7, #7]
 800820c:	429a      	cmp	r2, r3
 800820e:	d0a0      	beq.n	8008152 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008210:	2300      	movs	r3, #0
}
 8008212:	4618      	mov	r0, r3
 8008214:	3710      	adds	r7, #16
 8008216:	46bd      	mov	sp, r7
 8008218:	bd80      	pop	{r7, pc}
	...

0800821c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800821c:	b480      	push	{r7}
 800821e:	b095      	sub	sp, #84	@ 0x54
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800822a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800822c:	e853 3f00 	ldrex	r3, [r3]
 8008230:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008232:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008234:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008238:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	461a      	mov	r2, r3
 8008240:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008242:	643b      	str	r3, [r7, #64]	@ 0x40
 8008244:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008246:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008248:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800824a:	e841 2300 	strex	r3, r2, [r1]
 800824e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008250:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008252:	2b00      	cmp	r3, #0
 8008254:	d1e6      	bne.n	8008224 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	3308      	adds	r3, #8
 800825c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800825e:	6a3b      	ldr	r3, [r7, #32]
 8008260:	e853 3f00 	ldrex	r3, [r3]
 8008264:	61fb      	str	r3, [r7, #28]
   return(result);
 8008266:	69fa      	ldr	r2, [r7, #28]
 8008268:	4b1e      	ldr	r3, [pc, #120]	@ (80082e4 <UART_EndRxTransfer+0xc8>)
 800826a:	4013      	ands	r3, r2
 800826c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	3308      	adds	r3, #8
 8008274:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008276:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008278:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800827a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800827c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800827e:	e841 2300 	strex	r3, r2, [r1]
 8008282:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008286:	2b00      	cmp	r3, #0
 8008288:	d1e5      	bne.n	8008256 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800828e:	2b01      	cmp	r3, #1
 8008290:	d118      	bne.n	80082c4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	e853 3f00 	ldrex	r3, [r3]
 800829e:	60bb      	str	r3, [r7, #8]
   return(result);
 80082a0:	68bb      	ldr	r3, [r7, #8]
 80082a2:	f023 0310 	bic.w	r3, r3, #16
 80082a6:	647b      	str	r3, [r7, #68]	@ 0x44
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	461a      	mov	r2, r3
 80082ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80082b0:	61bb      	str	r3, [r7, #24]
 80082b2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082b4:	6979      	ldr	r1, [r7, #20]
 80082b6:	69ba      	ldr	r2, [r7, #24]
 80082b8:	e841 2300 	strex	r3, r2, [r1]
 80082bc:	613b      	str	r3, [r7, #16]
   return(result);
 80082be:	693b      	ldr	r3, [r7, #16]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d1e6      	bne.n	8008292 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2220      	movs	r2, #32
 80082c8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2200      	movs	r2, #0
 80082d0:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	2200      	movs	r2, #0
 80082d6:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80082d8:	bf00      	nop
 80082da:	3754      	adds	r7, #84	@ 0x54
 80082dc:	46bd      	mov	sp, r7
 80082de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e2:	4770      	bx	lr
 80082e4:	effffffe 	.word	0xeffffffe

080082e8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80082e8:	b480      	push	{r7}
 80082ea:	b085      	sub	sp, #20
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80082f6:	2b01      	cmp	r3, #1
 80082f8:	d101      	bne.n	80082fe <HAL_UARTEx_DisableFifoMode+0x16>
 80082fa:	2302      	movs	r3, #2
 80082fc:	e027      	b.n	800834e <HAL_UARTEx_DisableFifoMode+0x66>
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	2201      	movs	r2, #1
 8008302:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	2224      	movs	r2, #36	@ 0x24
 800830a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	681a      	ldr	r2, [r3, #0]
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	f022 0201 	bic.w	r2, r2, #1
 8008324:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800832c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	2200      	movs	r2, #0
 8008332:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	68fa      	ldr	r2, [r7, #12]
 800833a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2220      	movs	r2, #32
 8008340:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2200      	movs	r2, #0
 8008348:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800834c:	2300      	movs	r3, #0
}
 800834e:	4618      	mov	r0, r3
 8008350:	3714      	adds	r7, #20
 8008352:	46bd      	mov	sp, r7
 8008354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008358:	4770      	bx	lr

0800835a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800835a:	b580      	push	{r7, lr}
 800835c:	b084      	sub	sp, #16
 800835e:	af00      	add	r7, sp, #0
 8008360:	6078      	str	r0, [r7, #4]
 8008362:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800836a:	2b01      	cmp	r3, #1
 800836c:	d101      	bne.n	8008372 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800836e:	2302      	movs	r3, #2
 8008370:	e02d      	b.n	80083ce <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	2201      	movs	r2, #1
 8008376:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	2224      	movs	r2, #36	@ 0x24
 800837e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	681a      	ldr	r2, [r3, #0]
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	f022 0201 	bic.w	r2, r2, #1
 8008398:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	689b      	ldr	r3, [r3, #8]
 80083a0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	683a      	ldr	r2, [r7, #0]
 80083aa:	430a      	orrs	r2, r1
 80083ac:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80083ae:	6878      	ldr	r0, [r7, #4]
 80083b0:	f000 f850 	bl	8008454 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	68fa      	ldr	r2, [r7, #12]
 80083ba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2220      	movs	r2, #32
 80083c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	2200      	movs	r2, #0
 80083c8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80083cc:	2300      	movs	r3, #0
}
 80083ce:	4618      	mov	r0, r3
 80083d0:	3710      	adds	r7, #16
 80083d2:	46bd      	mov	sp, r7
 80083d4:	bd80      	pop	{r7, pc}

080083d6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80083d6:	b580      	push	{r7, lr}
 80083d8:	b084      	sub	sp, #16
 80083da:	af00      	add	r7, sp, #0
 80083dc:	6078      	str	r0, [r7, #4]
 80083de:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80083e6:	2b01      	cmp	r3, #1
 80083e8:	d101      	bne.n	80083ee <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80083ea:	2302      	movs	r3, #2
 80083ec:	e02d      	b.n	800844a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	2201      	movs	r2, #1
 80083f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	2224      	movs	r2, #36	@ 0x24
 80083fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	681a      	ldr	r2, [r3, #0]
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	f022 0201 	bic.w	r2, r2, #1
 8008414:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	689b      	ldr	r3, [r3, #8]
 800841c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	683a      	ldr	r2, [r7, #0]
 8008426:	430a      	orrs	r2, r1
 8008428:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800842a:	6878      	ldr	r0, [r7, #4]
 800842c:	f000 f812 	bl	8008454 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	68fa      	ldr	r2, [r7, #12]
 8008436:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2220      	movs	r2, #32
 800843c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2200      	movs	r2, #0
 8008444:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008448:	2300      	movs	r3, #0
}
 800844a:	4618      	mov	r0, r3
 800844c:	3710      	adds	r7, #16
 800844e:	46bd      	mov	sp, r7
 8008450:	bd80      	pop	{r7, pc}
	...

08008454 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008454:	b480      	push	{r7}
 8008456:	b085      	sub	sp, #20
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008460:	2b00      	cmp	r3, #0
 8008462:	d108      	bne.n	8008476 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	2201      	movs	r2, #1
 8008468:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2201      	movs	r2, #1
 8008470:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008474:	e031      	b.n	80084da <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008476:	2310      	movs	r3, #16
 8008478:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800847a:	2310      	movs	r3, #16
 800847c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	689b      	ldr	r3, [r3, #8]
 8008484:	0e5b      	lsrs	r3, r3, #25
 8008486:	b2db      	uxtb	r3, r3
 8008488:	f003 0307 	and.w	r3, r3, #7
 800848c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	689b      	ldr	r3, [r3, #8]
 8008494:	0f5b      	lsrs	r3, r3, #29
 8008496:	b2db      	uxtb	r3, r3
 8008498:	f003 0307 	and.w	r3, r3, #7
 800849c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800849e:	7bbb      	ldrb	r3, [r7, #14]
 80084a0:	7b3a      	ldrb	r2, [r7, #12]
 80084a2:	4911      	ldr	r1, [pc, #68]	@ (80084e8 <UARTEx_SetNbDataToProcess+0x94>)
 80084a4:	5c8a      	ldrb	r2, [r1, r2]
 80084a6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80084aa:	7b3a      	ldrb	r2, [r7, #12]
 80084ac:	490f      	ldr	r1, [pc, #60]	@ (80084ec <UARTEx_SetNbDataToProcess+0x98>)
 80084ae:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80084b0:	fb93 f3f2 	sdiv	r3, r3, r2
 80084b4:	b29a      	uxth	r2, r3
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80084bc:	7bfb      	ldrb	r3, [r7, #15]
 80084be:	7b7a      	ldrb	r2, [r7, #13]
 80084c0:	4909      	ldr	r1, [pc, #36]	@ (80084e8 <UARTEx_SetNbDataToProcess+0x94>)
 80084c2:	5c8a      	ldrb	r2, [r1, r2]
 80084c4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80084c8:	7b7a      	ldrb	r2, [r7, #13]
 80084ca:	4908      	ldr	r1, [pc, #32]	@ (80084ec <UARTEx_SetNbDataToProcess+0x98>)
 80084cc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80084ce:	fb93 f3f2 	sdiv	r3, r3, r2
 80084d2:	b29a      	uxth	r2, r3
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80084da:	bf00      	nop
 80084dc:	3714      	adds	r7, #20
 80084de:	46bd      	mov	sp, r7
 80084e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e4:	4770      	bx	lr
 80084e6:	bf00      	nop
 80084e8:	080093cc 	.word	0x080093cc
 80084ec:	080093d4 	.word	0x080093d4

080084f0 <std>:
 80084f0:	2300      	movs	r3, #0
 80084f2:	b510      	push	{r4, lr}
 80084f4:	4604      	mov	r4, r0
 80084f6:	e9c0 3300 	strd	r3, r3, [r0]
 80084fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80084fe:	6083      	str	r3, [r0, #8]
 8008500:	8181      	strh	r1, [r0, #12]
 8008502:	6643      	str	r3, [r0, #100]	@ 0x64
 8008504:	81c2      	strh	r2, [r0, #14]
 8008506:	6183      	str	r3, [r0, #24]
 8008508:	4619      	mov	r1, r3
 800850a:	2208      	movs	r2, #8
 800850c:	305c      	adds	r0, #92	@ 0x5c
 800850e:	f000 f906 	bl	800871e <memset>
 8008512:	4b0d      	ldr	r3, [pc, #52]	@ (8008548 <std+0x58>)
 8008514:	6263      	str	r3, [r4, #36]	@ 0x24
 8008516:	4b0d      	ldr	r3, [pc, #52]	@ (800854c <std+0x5c>)
 8008518:	62a3      	str	r3, [r4, #40]	@ 0x28
 800851a:	4b0d      	ldr	r3, [pc, #52]	@ (8008550 <std+0x60>)
 800851c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800851e:	4b0d      	ldr	r3, [pc, #52]	@ (8008554 <std+0x64>)
 8008520:	6323      	str	r3, [r4, #48]	@ 0x30
 8008522:	4b0d      	ldr	r3, [pc, #52]	@ (8008558 <std+0x68>)
 8008524:	6224      	str	r4, [r4, #32]
 8008526:	429c      	cmp	r4, r3
 8008528:	d006      	beq.n	8008538 <std+0x48>
 800852a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800852e:	4294      	cmp	r4, r2
 8008530:	d002      	beq.n	8008538 <std+0x48>
 8008532:	33d0      	adds	r3, #208	@ 0xd0
 8008534:	429c      	cmp	r4, r3
 8008536:	d105      	bne.n	8008544 <std+0x54>
 8008538:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800853c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008540:	f000 b966 	b.w	8008810 <__retarget_lock_init_recursive>
 8008544:	bd10      	pop	{r4, pc}
 8008546:	bf00      	nop
 8008548:	08008699 	.word	0x08008699
 800854c:	080086bb 	.word	0x080086bb
 8008550:	080086f3 	.word	0x080086f3
 8008554:	08008717 	.word	0x08008717
 8008558:	24000260 	.word	0x24000260

0800855c <stdio_exit_handler>:
 800855c:	4a02      	ldr	r2, [pc, #8]	@ (8008568 <stdio_exit_handler+0xc>)
 800855e:	4903      	ldr	r1, [pc, #12]	@ (800856c <stdio_exit_handler+0x10>)
 8008560:	4803      	ldr	r0, [pc, #12]	@ (8008570 <stdio_exit_handler+0x14>)
 8008562:	f000 b869 	b.w	8008638 <_fwalk_sglue>
 8008566:	bf00      	nop
 8008568:	2400002c 	.word	0x2400002c
 800856c:	080090b1 	.word	0x080090b1
 8008570:	2400003c 	.word	0x2400003c

08008574 <cleanup_stdio>:
 8008574:	6841      	ldr	r1, [r0, #4]
 8008576:	4b0c      	ldr	r3, [pc, #48]	@ (80085a8 <cleanup_stdio+0x34>)
 8008578:	4299      	cmp	r1, r3
 800857a:	b510      	push	{r4, lr}
 800857c:	4604      	mov	r4, r0
 800857e:	d001      	beq.n	8008584 <cleanup_stdio+0x10>
 8008580:	f000 fd96 	bl	80090b0 <_fflush_r>
 8008584:	68a1      	ldr	r1, [r4, #8]
 8008586:	4b09      	ldr	r3, [pc, #36]	@ (80085ac <cleanup_stdio+0x38>)
 8008588:	4299      	cmp	r1, r3
 800858a:	d002      	beq.n	8008592 <cleanup_stdio+0x1e>
 800858c:	4620      	mov	r0, r4
 800858e:	f000 fd8f 	bl	80090b0 <_fflush_r>
 8008592:	68e1      	ldr	r1, [r4, #12]
 8008594:	4b06      	ldr	r3, [pc, #24]	@ (80085b0 <cleanup_stdio+0x3c>)
 8008596:	4299      	cmp	r1, r3
 8008598:	d004      	beq.n	80085a4 <cleanup_stdio+0x30>
 800859a:	4620      	mov	r0, r4
 800859c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80085a0:	f000 bd86 	b.w	80090b0 <_fflush_r>
 80085a4:	bd10      	pop	{r4, pc}
 80085a6:	bf00      	nop
 80085a8:	24000260 	.word	0x24000260
 80085ac:	240002c8 	.word	0x240002c8
 80085b0:	24000330 	.word	0x24000330

080085b4 <global_stdio_init.part.0>:
 80085b4:	b510      	push	{r4, lr}
 80085b6:	4b0b      	ldr	r3, [pc, #44]	@ (80085e4 <global_stdio_init.part.0+0x30>)
 80085b8:	4c0b      	ldr	r4, [pc, #44]	@ (80085e8 <global_stdio_init.part.0+0x34>)
 80085ba:	4a0c      	ldr	r2, [pc, #48]	@ (80085ec <global_stdio_init.part.0+0x38>)
 80085bc:	601a      	str	r2, [r3, #0]
 80085be:	4620      	mov	r0, r4
 80085c0:	2200      	movs	r2, #0
 80085c2:	2104      	movs	r1, #4
 80085c4:	f7ff ff94 	bl	80084f0 <std>
 80085c8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80085cc:	2201      	movs	r2, #1
 80085ce:	2109      	movs	r1, #9
 80085d0:	f7ff ff8e 	bl	80084f0 <std>
 80085d4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80085d8:	2202      	movs	r2, #2
 80085da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80085de:	2112      	movs	r1, #18
 80085e0:	f7ff bf86 	b.w	80084f0 <std>
 80085e4:	24000398 	.word	0x24000398
 80085e8:	24000260 	.word	0x24000260
 80085ec:	0800855d 	.word	0x0800855d

080085f0 <__sfp_lock_acquire>:
 80085f0:	4801      	ldr	r0, [pc, #4]	@ (80085f8 <__sfp_lock_acquire+0x8>)
 80085f2:	f000 b90e 	b.w	8008812 <__retarget_lock_acquire_recursive>
 80085f6:	bf00      	nop
 80085f8:	240003a1 	.word	0x240003a1

080085fc <__sfp_lock_release>:
 80085fc:	4801      	ldr	r0, [pc, #4]	@ (8008604 <__sfp_lock_release+0x8>)
 80085fe:	f000 b909 	b.w	8008814 <__retarget_lock_release_recursive>
 8008602:	bf00      	nop
 8008604:	240003a1 	.word	0x240003a1

08008608 <__sinit>:
 8008608:	b510      	push	{r4, lr}
 800860a:	4604      	mov	r4, r0
 800860c:	f7ff fff0 	bl	80085f0 <__sfp_lock_acquire>
 8008610:	6a23      	ldr	r3, [r4, #32]
 8008612:	b11b      	cbz	r3, 800861c <__sinit+0x14>
 8008614:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008618:	f7ff bff0 	b.w	80085fc <__sfp_lock_release>
 800861c:	4b04      	ldr	r3, [pc, #16]	@ (8008630 <__sinit+0x28>)
 800861e:	6223      	str	r3, [r4, #32]
 8008620:	4b04      	ldr	r3, [pc, #16]	@ (8008634 <__sinit+0x2c>)
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d1f5      	bne.n	8008614 <__sinit+0xc>
 8008628:	f7ff ffc4 	bl	80085b4 <global_stdio_init.part.0>
 800862c:	e7f2      	b.n	8008614 <__sinit+0xc>
 800862e:	bf00      	nop
 8008630:	08008575 	.word	0x08008575
 8008634:	24000398 	.word	0x24000398

08008638 <_fwalk_sglue>:
 8008638:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800863c:	4607      	mov	r7, r0
 800863e:	4688      	mov	r8, r1
 8008640:	4614      	mov	r4, r2
 8008642:	2600      	movs	r6, #0
 8008644:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008648:	f1b9 0901 	subs.w	r9, r9, #1
 800864c:	d505      	bpl.n	800865a <_fwalk_sglue+0x22>
 800864e:	6824      	ldr	r4, [r4, #0]
 8008650:	2c00      	cmp	r4, #0
 8008652:	d1f7      	bne.n	8008644 <_fwalk_sglue+0xc>
 8008654:	4630      	mov	r0, r6
 8008656:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800865a:	89ab      	ldrh	r3, [r5, #12]
 800865c:	2b01      	cmp	r3, #1
 800865e:	d907      	bls.n	8008670 <_fwalk_sglue+0x38>
 8008660:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008664:	3301      	adds	r3, #1
 8008666:	d003      	beq.n	8008670 <_fwalk_sglue+0x38>
 8008668:	4629      	mov	r1, r5
 800866a:	4638      	mov	r0, r7
 800866c:	47c0      	blx	r8
 800866e:	4306      	orrs	r6, r0
 8008670:	3568      	adds	r5, #104	@ 0x68
 8008672:	e7e9      	b.n	8008648 <_fwalk_sglue+0x10>

08008674 <iprintf>:
 8008674:	b40f      	push	{r0, r1, r2, r3}
 8008676:	b507      	push	{r0, r1, r2, lr}
 8008678:	4906      	ldr	r1, [pc, #24]	@ (8008694 <iprintf+0x20>)
 800867a:	ab04      	add	r3, sp, #16
 800867c:	6808      	ldr	r0, [r1, #0]
 800867e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008682:	6881      	ldr	r1, [r0, #8]
 8008684:	9301      	str	r3, [sp, #4]
 8008686:	f000 f9e9 	bl	8008a5c <_vfiprintf_r>
 800868a:	b003      	add	sp, #12
 800868c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008690:	b004      	add	sp, #16
 8008692:	4770      	bx	lr
 8008694:	24000038 	.word	0x24000038

08008698 <__sread>:
 8008698:	b510      	push	{r4, lr}
 800869a:	460c      	mov	r4, r1
 800869c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086a0:	f000 f868 	bl	8008774 <_read_r>
 80086a4:	2800      	cmp	r0, #0
 80086a6:	bfab      	itete	ge
 80086a8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80086aa:	89a3      	ldrhlt	r3, [r4, #12]
 80086ac:	181b      	addge	r3, r3, r0
 80086ae:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80086b2:	bfac      	ite	ge
 80086b4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80086b6:	81a3      	strhlt	r3, [r4, #12]
 80086b8:	bd10      	pop	{r4, pc}

080086ba <__swrite>:
 80086ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086be:	461f      	mov	r7, r3
 80086c0:	898b      	ldrh	r3, [r1, #12]
 80086c2:	05db      	lsls	r3, r3, #23
 80086c4:	4605      	mov	r5, r0
 80086c6:	460c      	mov	r4, r1
 80086c8:	4616      	mov	r6, r2
 80086ca:	d505      	bpl.n	80086d8 <__swrite+0x1e>
 80086cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086d0:	2302      	movs	r3, #2
 80086d2:	2200      	movs	r2, #0
 80086d4:	f000 f83c 	bl	8008750 <_lseek_r>
 80086d8:	89a3      	ldrh	r3, [r4, #12]
 80086da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80086de:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80086e2:	81a3      	strh	r3, [r4, #12]
 80086e4:	4632      	mov	r2, r6
 80086e6:	463b      	mov	r3, r7
 80086e8:	4628      	mov	r0, r5
 80086ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80086ee:	f000 b853 	b.w	8008798 <_write_r>

080086f2 <__sseek>:
 80086f2:	b510      	push	{r4, lr}
 80086f4:	460c      	mov	r4, r1
 80086f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086fa:	f000 f829 	bl	8008750 <_lseek_r>
 80086fe:	1c43      	adds	r3, r0, #1
 8008700:	89a3      	ldrh	r3, [r4, #12]
 8008702:	bf15      	itete	ne
 8008704:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008706:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800870a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800870e:	81a3      	strheq	r3, [r4, #12]
 8008710:	bf18      	it	ne
 8008712:	81a3      	strhne	r3, [r4, #12]
 8008714:	bd10      	pop	{r4, pc}

08008716 <__sclose>:
 8008716:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800871a:	f000 b809 	b.w	8008730 <_close_r>

0800871e <memset>:
 800871e:	4402      	add	r2, r0
 8008720:	4603      	mov	r3, r0
 8008722:	4293      	cmp	r3, r2
 8008724:	d100      	bne.n	8008728 <memset+0xa>
 8008726:	4770      	bx	lr
 8008728:	f803 1b01 	strb.w	r1, [r3], #1
 800872c:	e7f9      	b.n	8008722 <memset+0x4>
	...

08008730 <_close_r>:
 8008730:	b538      	push	{r3, r4, r5, lr}
 8008732:	4d06      	ldr	r5, [pc, #24]	@ (800874c <_close_r+0x1c>)
 8008734:	2300      	movs	r3, #0
 8008736:	4604      	mov	r4, r0
 8008738:	4608      	mov	r0, r1
 800873a:	602b      	str	r3, [r5, #0]
 800873c:	f7f8 fb5f 	bl	8000dfe <_close>
 8008740:	1c43      	adds	r3, r0, #1
 8008742:	d102      	bne.n	800874a <_close_r+0x1a>
 8008744:	682b      	ldr	r3, [r5, #0]
 8008746:	b103      	cbz	r3, 800874a <_close_r+0x1a>
 8008748:	6023      	str	r3, [r4, #0]
 800874a:	bd38      	pop	{r3, r4, r5, pc}
 800874c:	2400039c 	.word	0x2400039c

08008750 <_lseek_r>:
 8008750:	b538      	push	{r3, r4, r5, lr}
 8008752:	4d07      	ldr	r5, [pc, #28]	@ (8008770 <_lseek_r+0x20>)
 8008754:	4604      	mov	r4, r0
 8008756:	4608      	mov	r0, r1
 8008758:	4611      	mov	r1, r2
 800875a:	2200      	movs	r2, #0
 800875c:	602a      	str	r2, [r5, #0]
 800875e:	461a      	mov	r2, r3
 8008760:	f7f8 fb74 	bl	8000e4c <_lseek>
 8008764:	1c43      	adds	r3, r0, #1
 8008766:	d102      	bne.n	800876e <_lseek_r+0x1e>
 8008768:	682b      	ldr	r3, [r5, #0]
 800876a:	b103      	cbz	r3, 800876e <_lseek_r+0x1e>
 800876c:	6023      	str	r3, [r4, #0]
 800876e:	bd38      	pop	{r3, r4, r5, pc}
 8008770:	2400039c 	.word	0x2400039c

08008774 <_read_r>:
 8008774:	b538      	push	{r3, r4, r5, lr}
 8008776:	4d07      	ldr	r5, [pc, #28]	@ (8008794 <_read_r+0x20>)
 8008778:	4604      	mov	r4, r0
 800877a:	4608      	mov	r0, r1
 800877c:	4611      	mov	r1, r2
 800877e:	2200      	movs	r2, #0
 8008780:	602a      	str	r2, [r5, #0]
 8008782:	461a      	mov	r2, r3
 8008784:	f7f8 fb02 	bl	8000d8c <_read>
 8008788:	1c43      	adds	r3, r0, #1
 800878a:	d102      	bne.n	8008792 <_read_r+0x1e>
 800878c:	682b      	ldr	r3, [r5, #0]
 800878e:	b103      	cbz	r3, 8008792 <_read_r+0x1e>
 8008790:	6023      	str	r3, [r4, #0]
 8008792:	bd38      	pop	{r3, r4, r5, pc}
 8008794:	2400039c 	.word	0x2400039c

08008798 <_write_r>:
 8008798:	b538      	push	{r3, r4, r5, lr}
 800879a:	4d07      	ldr	r5, [pc, #28]	@ (80087b8 <_write_r+0x20>)
 800879c:	4604      	mov	r4, r0
 800879e:	4608      	mov	r0, r1
 80087a0:	4611      	mov	r1, r2
 80087a2:	2200      	movs	r2, #0
 80087a4:	602a      	str	r2, [r5, #0]
 80087a6:	461a      	mov	r2, r3
 80087a8:	f7f8 fb0d 	bl	8000dc6 <_write>
 80087ac:	1c43      	adds	r3, r0, #1
 80087ae:	d102      	bne.n	80087b6 <_write_r+0x1e>
 80087b0:	682b      	ldr	r3, [r5, #0]
 80087b2:	b103      	cbz	r3, 80087b6 <_write_r+0x1e>
 80087b4:	6023      	str	r3, [r4, #0]
 80087b6:	bd38      	pop	{r3, r4, r5, pc}
 80087b8:	2400039c 	.word	0x2400039c

080087bc <__errno>:
 80087bc:	4b01      	ldr	r3, [pc, #4]	@ (80087c4 <__errno+0x8>)
 80087be:	6818      	ldr	r0, [r3, #0]
 80087c0:	4770      	bx	lr
 80087c2:	bf00      	nop
 80087c4:	24000038 	.word	0x24000038

080087c8 <__libc_init_array>:
 80087c8:	b570      	push	{r4, r5, r6, lr}
 80087ca:	4d0d      	ldr	r5, [pc, #52]	@ (8008800 <__libc_init_array+0x38>)
 80087cc:	4c0d      	ldr	r4, [pc, #52]	@ (8008804 <__libc_init_array+0x3c>)
 80087ce:	1b64      	subs	r4, r4, r5
 80087d0:	10a4      	asrs	r4, r4, #2
 80087d2:	2600      	movs	r6, #0
 80087d4:	42a6      	cmp	r6, r4
 80087d6:	d109      	bne.n	80087ec <__libc_init_array+0x24>
 80087d8:	4d0b      	ldr	r5, [pc, #44]	@ (8008808 <__libc_init_array+0x40>)
 80087da:	4c0c      	ldr	r4, [pc, #48]	@ (800880c <__libc_init_array+0x44>)
 80087dc:	f000 fdb8 	bl	8009350 <_init>
 80087e0:	1b64      	subs	r4, r4, r5
 80087e2:	10a4      	asrs	r4, r4, #2
 80087e4:	2600      	movs	r6, #0
 80087e6:	42a6      	cmp	r6, r4
 80087e8:	d105      	bne.n	80087f6 <__libc_init_array+0x2e>
 80087ea:	bd70      	pop	{r4, r5, r6, pc}
 80087ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80087f0:	4798      	blx	r3
 80087f2:	3601      	adds	r6, #1
 80087f4:	e7ee      	b.n	80087d4 <__libc_init_array+0xc>
 80087f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80087fa:	4798      	blx	r3
 80087fc:	3601      	adds	r6, #1
 80087fe:	e7f2      	b.n	80087e6 <__libc_init_array+0x1e>
 8008800:	08009418 	.word	0x08009418
 8008804:	08009418 	.word	0x08009418
 8008808:	08009418 	.word	0x08009418
 800880c:	0800941c 	.word	0x0800941c

08008810 <__retarget_lock_init_recursive>:
 8008810:	4770      	bx	lr

08008812 <__retarget_lock_acquire_recursive>:
 8008812:	4770      	bx	lr

08008814 <__retarget_lock_release_recursive>:
 8008814:	4770      	bx	lr
	...

08008818 <_free_r>:
 8008818:	b538      	push	{r3, r4, r5, lr}
 800881a:	4605      	mov	r5, r0
 800881c:	2900      	cmp	r1, #0
 800881e:	d041      	beq.n	80088a4 <_free_r+0x8c>
 8008820:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008824:	1f0c      	subs	r4, r1, #4
 8008826:	2b00      	cmp	r3, #0
 8008828:	bfb8      	it	lt
 800882a:	18e4      	addlt	r4, r4, r3
 800882c:	f000 f8e0 	bl	80089f0 <__malloc_lock>
 8008830:	4a1d      	ldr	r2, [pc, #116]	@ (80088a8 <_free_r+0x90>)
 8008832:	6813      	ldr	r3, [r2, #0]
 8008834:	b933      	cbnz	r3, 8008844 <_free_r+0x2c>
 8008836:	6063      	str	r3, [r4, #4]
 8008838:	6014      	str	r4, [r2, #0]
 800883a:	4628      	mov	r0, r5
 800883c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008840:	f000 b8dc 	b.w	80089fc <__malloc_unlock>
 8008844:	42a3      	cmp	r3, r4
 8008846:	d908      	bls.n	800885a <_free_r+0x42>
 8008848:	6820      	ldr	r0, [r4, #0]
 800884a:	1821      	adds	r1, r4, r0
 800884c:	428b      	cmp	r3, r1
 800884e:	bf01      	itttt	eq
 8008850:	6819      	ldreq	r1, [r3, #0]
 8008852:	685b      	ldreq	r3, [r3, #4]
 8008854:	1809      	addeq	r1, r1, r0
 8008856:	6021      	streq	r1, [r4, #0]
 8008858:	e7ed      	b.n	8008836 <_free_r+0x1e>
 800885a:	461a      	mov	r2, r3
 800885c:	685b      	ldr	r3, [r3, #4]
 800885e:	b10b      	cbz	r3, 8008864 <_free_r+0x4c>
 8008860:	42a3      	cmp	r3, r4
 8008862:	d9fa      	bls.n	800885a <_free_r+0x42>
 8008864:	6811      	ldr	r1, [r2, #0]
 8008866:	1850      	adds	r0, r2, r1
 8008868:	42a0      	cmp	r0, r4
 800886a:	d10b      	bne.n	8008884 <_free_r+0x6c>
 800886c:	6820      	ldr	r0, [r4, #0]
 800886e:	4401      	add	r1, r0
 8008870:	1850      	adds	r0, r2, r1
 8008872:	4283      	cmp	r3, r0
 8008874:	6011      	str	r1, [r2, #0]
 8008876:	d1e0      	bne.n	800883a <_free_r+0x22>
 8008878:	6818      	ldr	r0, [r3, #0]
 800887a:	685b      	ldr	r3, [r3, #4]
 800887c:	6053      	str	r3, [r2, #4]
 800887e:	4408      	add	r0, r1
 8008880:	6010      	str	r0, [r2, #0]
 8008882:	e7da      	b.n	800883a <_free_r+0x22>
 8008884:	d902      	bls.n	800888c <_free_r+0x74>
 8008886:	230c      	movs	r3, #12
 8008888:	602b      	str	r3, [r5, #0]
 800888a:	e7d6      	b.n	800883a <_free_r+0x22>
 800888c:	6820      	ldr	r0, [r4, #0]
 800888e:	1821      	adds	r1, r4, r0
 8008890:	428b      	cmp	r3, r1
 8008892:	bf04      	itt	eq
 8008894:	6819      	ldreq	r1, [r3, #0]
 8008896:	685b      	ldreq	r3, [r3, #4]
 8008898:	6063      	str	r3, [r4, #4]
 800889a:	bf04      	itt	eq
 800889c:	1809      	addeq	r1, r1, r0
 800889e:	6021      	streq	r1, [r4, #0]
 80088a0:	6054      	str	r4, [r2, #4]
 80088a2:	e7ca      	b.n	800883a <_free_r+0x22>
 80088a4:	bd38      	pop	{r3, r4, r5, pc}
 80088a6:	bf00      	nop
 80088a8:	240003a8 	.word	0x240003a8

080088ac <sbrk_aligned>:
 80088ac:	b570      	push	{r4, r5, r6, lr}
 80088ae:	4e0f      	ldr	r6, [pc, #60]	@ (80088ec <sbrk_aligned+0x40>)
 80088b0:	460c      	mov	r4, r1
 80088b2:	6831      	ldr	r1, [r6, #0]
 80088b4:	4605      	mov	r5, r0
 80088b6:	b911      	cbnz	r1, 80088be <sbrk_aligned+0x12>
 80088b8:	f000 fcb6 	bl	8009228 <_sbrk_r>
 80088bc:	6030      	str	r0, [r6, #0]
 80088be:	4621      	mov	r1, r4
 80088c0:	4628      	mov	r0, r5
 80088c2:	f000 fcb1 	bl	8009228 <_sbrk_r>
 80088c6:	1c43      	adds	r3, r0, #1
 80088c8:	d103      	bne.n	80088d2 <sbrk_aligned+0x26>
 80088ca:	f04f 34ff 	mov.w	r4, #4294967295
 80088ce:	4620      	mov	r0, r4
 80088d0:	bd70      	pop	{r4, r5, r6, pc}
 80088d2:	1cc4      	adds	r4, r0, #3
 80088d4:	f024 0403 	bic.w	r4, r4, #3
 80088d8:	42a0      	cmp	r0, r4
 80088da:	d0f8      	beq.n	80088ce <sbrk_aligned+0x22>
 80088dc:	1a21      	subs	r1, r4, r0
 80088de:	4628      	mov	r0, r5
 80088e0:	f000 fca2 	bl	8009228 <_sbrk_r>
 80088e4:	3001      	adds	r0, #1
 80088e6:	d1f2      	bne.n	80088ce <sbrk_aligned+0x22>
 80088e8:	e7ef      	b.n	80088ca <sbrk_aligned+0x1e>
 80088ea:	bf00      	nop
 80088ec:	240003a4 	.word	0x240003a4

080088f0 <_malloc_r>:
 80088f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80088f4:	1ccd      	adds	r5, r1, #3
 80088f6:	f025 0503 	bic.w	r5, r5, #3
 80088fa:	3508      	adds	r5, #8
 80088fc:	2d0c      	cmp	r5, #12
 80088fe:	bf38      	it	cc
 8008900:	250c      	movcc	r5, #12
 8008902:	2d00      	cmp	r5, #0
 8008904:	4606      	mov	r6, r0
 8008906:	db01      	blt.n	800890c <_malloc_r+0x1c>
 8008908:	42a9      	cmp	r1, r5
 800890a:	d904      	bls.n	8008916 <_malloc_r+0x26>
 800890c:	230c      	movs	r3, #12
 800890e:	6033      	str	r3, [r6, #0]
 8008910:	2000      	movs	r0, #0
 8008912:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008916:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80089ec <_malloc_r+0xfc>
 800891a:	f000 f869 	bl	80089f0 <__malloc_lock>
 800891e:	f8d8 3000 	ldr.w	r3, [r8]
 8008922:	461c      	mov	r4, r3
 8008924:	bb44      	cbnz	r4, 8008978 <_malloc_r+0x88>
 8008926:	4629      	mov	r1, r5
 8008928:	4630      	mov	r0, r6
 800892a:	f7ff ffbf 	bl	80088ac <sbrk_aligned>
 800892e:	1c43      	adds	r3, r0, #1
 8008930:	4604      	mov	r4, r0
 8008932:	d158      	bne.n	80089e6 <_malloc_r+0xf6>
 8008934:	f8d8 4000 	ldr.w	r4, [r8]
 8008938:	4627      	mov	r7, r4
 800893a:	2f00      	cmp	r7, #0
 800893c:	d143      	bne.n	80089c6 <_malloc_r+0xd6>
 800893e:	2c00      	cmp	r4, #0
 8008940:	d04b      	beq.n	80089da <_malloc_r+0xea>
 8008942:	6823      	ldr	r3, [r4, #0]
 8008944:	4639      	mov	r1, r7
 8008946:	4630      	mov	r0, r6
 8008948:	eb04 0903 	add.w	r9, r4, r3
 800894c:	f000 fc6c 	bl	8009228 <_sbrk_r>
 8008950:	4581      	cmp	r9, r0
 8008952:	d142      	bne.n	80089da <_malloc_r+0xea>
 8008954:	6821      	ldr	r1, [r4, #0]
 8008956:	1a6d      	subs	r5, r5, r1
 8008958:	4629      	mov	r1, r5
 800895a:	4630      	mov	r0, r6
 800895c:	f7ff ffa6 	bl	80088ac <sbrk_aligned>
 8008960:	3001      	adds	r0, #1
 8008962:	d03a      	beq.n	80089da <_malloc_r+0xea>
 8008964:	6823      	ldr	r3, [r4, #0]
 8008966:	442b      	add	r3, r5
 8008968:	6023      	str	r3, [r4, #0]
 800896a:	f8d8 3000 	ldr.w	r3, [r8]
 800896e:	685a      	ldr	r2, [r3, #4]
 8008970:	bb62      	cbnz	r2, 80089cc <_malloc_r+0xdc>
 8008972:	f8c8 7000 	str.w	r7, [r8]
 8008976:	e00f      	b.n	8008998 <_malloc_r+0xa8>
 8008978:	6822      	ldr	r2, [r4, #0]
 800897a:	1b52      	subs	r2, r2, r5
 800897c:	d420      	bmi.n	80089c0 <_malloc_r+0xd0>
 800897e:	2a0b      	cmp	r2, #11
 8008980:	d917      	bls.n	80089b2 <_malloc_r+0xc2>
 8008982:	1961      	adds	r1, r4, r5
 8008984:	42a3      	cmp	r3, r4
 8008986:	6025      	str	r5, [r4, #0]
 8008988:	bf18      	it	ne
 800898a:	6059      	strne	r1, [r3, #4]
 800898c:	6863      	ldr	r3, [r4, #4]
 800898e:	bf08      	it	eq
 8008990:	f8c8 1000 	streq.w	r1, [r8]
 8008994:	5162      	str	r2, [r4, r5]
 8008996:	604b      	str	r3, [r1, #4]
 8008998:	4630      	mov	r0, r6
 800899a:	f000 f82f 	bl	80089fc <__malloc_unlock>
 800899e:	f104 000b 	add.w	r0, r4, #11
 80089a2:	1d23      	adds	r3, r4, #4
 80089a4:	f020 0007 	bic.w	r0, r0, #7
 80089a8:	1ac2      	subs	r2, r0, r3
 80089aa:	bf1c      	itt	ne
 80089ac:	1a1b      	subne	r3, r3, r0
 80089ae:	50a3      	strne	r3, [r4, r2]
 80089b0:	e7af      	b.n	8008912 <_malloc_r+0x22>
 80089b2:	6862      	ldr	r2, [r4, #4]
 80089b4:	42a3      	cmp	r3, r4
 80089b6:	bf0c      	ite	eq
 80089b8:	f8c8 2000 	streq.w	r2, [r8]
 80089bc:	605a      	strne	r2, [r3, #4]
 80089be:	e7eb      	b.n	8008998 <_malloc_r+0xa8>
 80089c0:	4623      	mov	r3, r4
 80089c2:	6864      	ldr	r4, [r4, #4]
 80089c4:	e7ae      	b.n	8008924 <_malloc_r+0x34>
 80089c6:	463c      	mov	r4, r7
 80089c8:	687f      	ldr	r7, [r7, #4]
 80089ca:	e7b6      	b.n	800893a <_malloc_r+0x4a>
 80089cc:	461a      	mov	r2, r3
 80089ce:	685b      	ldr	r3, [r3, #4]
 80089d0:	42a3      	cmp	r3, r4
 80089d2:	d1fb      	bne.n	80089cc <_malloc_r+0xdc>
 80089d4:	2300      	movs	r3, #0
 80089d6:	6053      	str	r3, [r2, #4]
 80089d8:	e7de      	b.n	8008998 <_malloc_r+0xa8>
 80089da:	230c      	movs	r3, #12
 80089dc:	6033      	str	r3, [r6, #0]
 80089de:	4630      	mov	r0, r6
 80089e0:	f000 f80c 	bl	80089fc <__malloc_unlock>
 80089e4:	e794      	b.n	8008910 <_malloc_r+0x20>
 80089e6:	6005      	str	r5, [r0, #0]
 80089e8:	e7d6      	b.n	8008998 <_malloc_r+0xa8>
 80089ea:	bf00      	nop
 80089ec:	240003a8 	.word	0x240003a8

080089f0 <__malloc_lock>:
 80089f0:	4801      	ldr	r0, [pc, #4]	@ (80089f8 <__malloc_lock+0x8>)
 80089f2:	f7ff bf0e 	b.w	8008812 <__retarget_lock_acquire_recursive>
 80089f6:	bf00      	nop
 80089f8:	240003a0 	.word	0x240003a0

080089fc <__malloc_unlock>:
 80089fc:	4801      	ldr	r0, [pc, #4]	@ (8008a04 <__malloc_unlock+0x8>)
 80089fe:	f7ff bf09 	b.w	8008814 <__retarget_lock_release_recursive>
 8008a02:	bf00      	nop
 8008a04:	240003a0 	.word	0x240003a0

08008a08 <__sfputc_r>:
 8008a08:	6893      	ldr	r3, [r2, #8]
 8008a0a:	3b01      	subs	r3, #1
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	b410      	push	{r4}
 8008a10:	6093      	str	r3, [r2, #8]
 8008a12:	da08      	bge.n	8008a26 <__sfputc_r+0x1e>
 8008a14:	6994      	ldr	r4, [r2, #24]
 8008a16:	42a3      	cmp	r3, r4
 8008a18:	db01      	blt.n	8008a1e <__sfputc_r+0x16>
 8008a1a:	290a      	cmp	r1, #10
 8008a1c:	d103      	bne.n	8008a26 <__sfputc_r+0x1e>
 8008a1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008a22:	f000 bb6d 	b.w	8009100 <__swbuf_r>
 8008a26:	6813      	ldr	r3, [r2, #0]
 8008a28:	1c58      	adds	r0, r3, #1
 8008a2a:	6010      	str	r0, [r2, #0]
 8008a2c:	7019      	strb	r1, [r3, #0]
 8008a2e:	4608      	mov	r0, r1
 8008a30:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008a34:	4770      	bx	lr

08008a36 <__sfputs_r>:
 8008a36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a38:	4606      	mov	r6, r0
 8008a3a:	460f      	mov	r7, r1
 8008a3c:	4614      	mov	r4, r2
 8008a3e:	18d5      	adds	r5, r2, r3
 8008a40:	42ac      	cmp	r4, r5
 8008a42:	d101      	bne.n	8008a48 <__sfputs_r+0x12>
 8008a44:	2000      	movs	r0, #0
 8008a46:	e007      	b.n	8008a58 <__sfputs_r+0x22>
 8008a48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a4c:	463a      	mov	r2, r7
 8008a4e:	4630      	mov	r0, r6
 8008a50:	f7ff ffda 	bl	8008a08 <__sfputc_r>
 8008a54:	1c43      	adds	r3, r0, #1
 8008a56:	d1f3      	bne.n	8008a40 <__sfputs_r+0xa>
 8008a58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008a5c <_vfiprintf_r>:
 8008a5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a60:	460d      	mov	r5, r1
 8008a62:	b09d      	sub	sp, #116	@ 0x74
 8008a64:	4614      	mov	r4, r2
 8008a66:	4698      	mov	r8, r3
 8008a68:	4606      	mov	r6, r0
 8008a6a:	b118      	cbz	r0, 8008a74 <_vfiprintf_r+0x18>
 8008a6c:	6a03      	ldr	r3, [r0, #32]
 8008a6e:	b90b      	cbnz	r3, 8008a74 <_vfiprintf_r+0x18>
 8008a70:	f7ff fdca 	bl	8008608 <__sinit>
 8008a74:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008a76:	07d9      	lsls	r1, r3, #31
 8008a78:	d405      	bmi.n	8008a86 <_vfiprintf_r+0x2a>
 8008a7a:	89ab      	ldrh	r3, [r5, #12]
 8008a7c:	059a      	lsls	r2, r3, #22
 8008a7e:	d402      	bmi.n	8008a86 <_vfiprintf_r+0x2a>
 8008a80:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008a82:	f7ff fec6 	bl	8008812 <__retarget_lock_acquire_recursive>
 8008a86:	89ab      	ldrh	r3, [r5, #12]
 8008a88:	071b      	lsls	r3, r3, #28
 8008a8a:	d501      	bpl.n	8008a90 <_vfiprintf_r+0x34>
 8008a8c:	692b      	ldr	r3, [r5, #16]
 8008a8e:	b99b      	cbnz	r3, 8008ab8 <_vfiprintf_r+0x5c>
 8008a90:	4629      	mov	r1, r5
 8008a92:	4630      	mov	r0, r6
 8008a94:	f000 fb72 	bl	800917c <__swsetup_r>
 8008a98:	b170      	cbz	r0, 8008ab8 <_vfiprintf_r+0x5c>
 8008a9a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008a9c:	07dc      	lsls	r4, r3, #31
 8008a9e:	d504      	bpl.n	8008aaa <_vfiprintf_r+0x4e>
 8008aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8008aa4:	b01d      	add	sp, #116	@ 0x74
 8008aa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008aaa:	89ab      	ldrh	r3, [r5, #12]
 8008aac:	0598      	lsls	r0, r3, #22
 8008aae:	d4f7      	bmi.n	8008aa0 <_vfiprintf_r+0x44>
 8008ab0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008ab2:	f7ff feaf 	bl	8008814 <__retarget_lock_release_recursive>
 8008ab6:	e7f3      	b.n	8008aa0 <_vfiprintf_r+0x44>
 8008ab8:	2300      	movs	r3, #0
 8008aba:	9309      	str	r3, [sp, #36]	@ 0x24
 8008abc:	2320      	movs	r3, #32
 8008abe:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008ac2:	f8cd 800c 	str.w	r8, [sp, #12]
 8008ac6:	2330      	movs	r3, #48	@ 0x30
 8008ac8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008c78 <_vfiprintf_r+0x21c>
 8008acc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008ad0:	f04f 0901 	mov.w	r9, #1
 8008ad4:	4623      	mov	r3, r4
 8008ad6:	469a      	mov	sl, r3
 8008ad8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008adc:	b10a      	cbz	r2, 8008ae2 <_vfiprintf_r+0x86>
 8008ade:	2a25      	cmp	r2, #37	@ 0x25
 8008ae0:	d1f9      	bne.n	8008ad6 <_vfiprintf_r+0x7a>
 8008ae2:	ebba 0b04 	subs.w	fp, sl, r4
 8008ae6:	d00b      	beq.n	8008b00 <_vfiprintf_r+0xa4>
 8008ae8:	465b      	mov	r3, fp
 8008aea:	4622      	mov	r2, r4
 8008aec:	4629      	mov	r1, r5
 8008aee:	4630      	mov	r0, r6
 8008af0:	f7ff ffa1 	bl	8008a36 <__sfputs_r>
 8008af4:	3001      	adds	r0, #1
 8008af6:	f000 80a7 	beq.w	8008c48 <_vfiprintf_r+0x1ec>
 8008afa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008afc:	445a      	add	r2, fp
 8008afe:	9209      	str	r2, [sp, #36]	@ 0x24
 8008b00:	f89a 3000 	ldrb.w	r3, [sl]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	f000 809f 	beq.w	8008c48 <_vfiprintf_r+0x1ec>
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	f04f 32ff 	mov.w	r2, #4294967295
 8008b10:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008b14:	f10a 0a01 	add.w	sl, sl, #1
 8008b18:	9304      	str	r3, [sp, #16]
 8008b1a:	9307      	str	r3, [sp, #28]
 8008b1c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008b20:	931a      	str	r3, [sp, #104]	@ 0x68
 8008b22:	4654      	mov	r4, sl
 8008b24:	2205      	movs	r2, #5
 8008b26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b2a:	4853      	ldr	r0, [pc, #332]	@ (8008c78 <_vfiprintf_r+0x21c>)
 8008b2c:	f7f7 fbf0 	bl	8000310 <memchr>
 8008b30:	9a04      	ldr	r2, [sp, #16]
 8008b32:	b9d8      	cbnz	r0, 8008b6c <_vfiprintf_r+0x110>
 8008b34:	06d1      	lsls	r1, r2, #27
 8008b36:	bf44      	itt	mi
 8008b38:	2320      	movmi	r3, #32
 8008b3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008b3e:	0713      	lsls	r3, r2, #28
 8008b40:	bf44      	itt	mi
 8008b42:	232b      	movmi	r3, #43	@ 0x2b
 8008b44:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008b48:	f89a 3000 	ldrb.w	r3, [sl]
 8008b4c:	2b2a      	cmp	r3, #42	@ 0x2a
 8008b4e:	d015      	beq.n	8008b7c <_vfiprintf_r+0x120>
 8008b50:	9a07      	ldr	r2, [sp, #28]
 8008b52:	4654      	mov	r4, sl
 8008b54:	2000      	movs	r0, #0
 8008b56:	f04f 0c0a 	mov.w	ip, #10
 8008b5a:	4621      	mov	r1, r4
 8008b5c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008b60:	3b30      	subs	r3, #48	@ 0x30
 8008b62:	2b09      	cmp	r3, #9
 8008b64:	d94b      	bls.n	8008bfe <_vfiprintf_r+0x1a2>
 8008b66:	b1b0      	cbz	r0, 8008b96 <_vfiprintf_r+0x13a>
 8008b68:	9207      	str	r2, [sp, #28]
 8008b6a:	e014      	b.n	8008b96 <_vfiprintf_r+0x13a>
 8008b6c:	eba0 0308 	sub.w	r3, r0, r8
 8008b70:	fa09 f303 	lsl.w	r3, r9, r3
 8008b74:	4313      	orrs	r3, r2
 8008b76:	9304      	str	r3, [sp, #16]
 8008b78:	46a2      	mov	sl, r4
 8008b7a:	e7d2      	b.n	8008b22 <_vfiprintf_r+0xc6>
 8008b7c:	9b03      	ldr	r3, [sp, #12]
 8008b7e:	1d19      	adds	r1, r3, #4
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	9103      	str	r1, [sp, #12]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	bfbb      	ittet	lt
 8008b88:	425b      	neglt	r3, r3
 8008b8a:	f042 0202 	orrlt.w	r2, r2, #2
 8008b8e:	9307      	strge	r3, [sp, #28]
 8008b90:	9307      	strlt	r3, [sp, #28]
 8008b92:	bfb8      	it	lt
 8008b94:	9204      	strlt	r2, [sp, #16]
 8008b96:	7823      	ldrb	r3, [r4, #0]
 8008b98:	2b2e      	cmp	r3, #46	@ 0x2e
 8008b9a:	d10a      	bne.n	8008bb2 <_vfiprintf_r+0x156>
 8008b9c:	7863      	ldrb	r3, [r4, #1]
 8008b9e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008ba0:	d132      	bne.n	8008c08 <_vfiprintf_r+0x1ac>
 8008ba2:	9b03      	ldr	r3, [sp, #12]
 8008ba4:	1d1a      	adds	r2, r3, #4
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	9203      	str	r2, [sp, #12]
 8008baa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008bae:	3402      	adds	r4, #2
 8008bb0:	9305      	str	r3, [sp, #20]
 8008bb2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008c88 <_vfiprintf_r+0x22c>
 8008bb6:	7821      	ldrb	r1, [r4, #0]
 8008bb8:	2203      	movs	r2, #3
 8008bba:	4650      	mov	r0, sl
 8008bbc:	f7f7 fba8 	bl	8000310 <memchr>
 8008bc0:	b138      	cbz	r0, 8008bd2 <_vfiprintf_r+0x176>
 8008bc2:	9b04      	ldr	r3, [sp, #16]
 8008bc4:	eba0 000a 	sub.w	r0, r0, sl
 8008bc8:	2240      	movs	r2, #64	@ 0x40
 8008bca:	4082      	lsls	r2, r0
 8008bcc:	4313      	orrs	r3, r2
 8008bce:	3401      	adds	r4, #1
 8008bd0:	9304      	str	r3, [sp, #16]
 8008bd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008bd6:	4829      	ldr	r0, [pc, #164]	@ (8008c7c <_vfiprintf_r+0x220>)
 8008bd8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008bdc:	2206      	movs	r2, #6
 8008bde:	f7f7 fb97 	bl	8000310 <memchr>
 8008be2:	2800      	cmp	r0, #0
 8008be4:	d03f      	beq.n	8008c66 <_vfiprintf_r+0x20a>
 8008be6:	4b26      	ldr	r3, [pc, #152]	@ (8008c80 <_vfiprintf_r+0x224>)
 8008be8:	bb1b      	cbnz	r3, 8008c32 <_vfiprintf_r+0x1d6>
 8008bea:	9b03      	ldr	r3, [sp, #12]
 8008bec:	3307      	adds	r3, #7
 8008bee:	f023 0307 	bic.w	r3, r3, #7
 8008bf2:	3308      	adds	r3, #8
 8008bf4:	9303      	str	r3, [sp, #12]
 8008bf6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008bf8:	443b      	add	r3, r7
 8008bfa:	9309      	str	r3, [sp, #36]	@ 0x24
 8008bfc:	e76a      	b.n	8008ad4 <_vfiprintf_r+0x78>
 8008bfe:	fb0c 3202 	mla	r2, ip, r2, r3
 8008c02:	460c      	mov	r4, r1
 8008c04:	2001      	movs	r0, #1
 8008c06:	e7a8      	b.n	8008b5a <_vfiprintf_r+0xfe>
 8008c08:	2300      	movs	r3, #0
 8008c0a:	3401      	adds	r4, #1
 8008c0c:	9305      	str	r3, [sp, #20]
 8008c0e:	4619      	mov	r1, r3
 8008c10:	f04f 0c0a 	mov.w	ip, #10
 8008c14:	4620      	mov	r0, r4
 8008c16:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008c1a:	3a30      	subs	r2, #48	@ 0x30
 8008c1c:	2a09      	cmp	r2, #9
 8008c1e:	d903      	bls.n	8008c28 <_vfiprintf_r+0x1cc>
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d0c6      	beq.n	8008bb2 <_vfiprintf_r+0x156>
 8008c24:	9105      	str	r1, [sp, #20]
 8008c26:	e7c4      	b.n	8008bb2 <_vfiprintf_r+0x156>
 8008c28:	fb0c 2101 	mla	r1, ip, r1, r2
 8008c2c:	4604      	mov	r4, r0
 8008c2e:	2301      	movs	r3, #1
 8008c30:	e7f0      	b.n	8008c14 <_vfiprintf_r+0x1b8>
 8008c32:	ab03      	add	r3, sp, #12
 8008c34:	9300      	str	r3, [sp, #0]
 8008c36:	462a      	mov	r2, r5
 8008c38:	4b12      	ldr	r3, [pc, #72]	@ (8008c84 <_vfiprintf_r+0x228>)
 8008c3a:	a904      	add	r1, sp, #16
 8008c3c:	4630      	mov	r0, r6
 8008c3e:	f3af 8000 	nop.w
 8008c42:	4607      	mov	r7, r0
 8008c44:	1c78      	adds	r0, r7, #1
 8008c46:	d1d6      	bne.n	8008bf6 <_vfiprintf_r+0x19a>
 8008c48:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008c4a:	07d9      	lsls	r1, r3, #31
 8008c4c:	d405      	bmi.n	8008c5a <_vfiprintf_r+0x1fe>
 8008c4e:	89ab      	ldrh	r3, [r5, #12]
 8008c50:	059a      	lsls	r2, r3, #22
 8008c52:	d402      	bmi.n	8008c5a <_vfiprintf_r+0x1fe>
 8008c54:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008c56:	f7ff fddd 	bl	8008814 <__retarget_lock_release_recursive>
 8008c5a:	89ab      	ldrh	r3, [r5, #12]
 8008c5c:	065b      	lsls	r3, r3, #25
 8008c5e:	f53f af1f 	bmi.w	8008aa0 <_vfiprintf_r+0x44>
 8008c62:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008c64:	e71e      	b.n	8008aa4 <_vfiprintf_r+0x48>
 8008c66:	ab03      	add	r3, sp, #12
 8008c68:	9300      	str	r3, [sp, #0]
 8008c6a:	462a      	mov	r2, r5
 8008c6c:	4b05      	ldr	r3, [pc, #20]	@ (8008c84 <_vfiprintf_r+0x228>)
 8008c6e:	a904      	add	r1, sp, #16
 8008c70:	4630      	mov	r0, r6
 8008c72:	f000 f879 	bl	8008d68 <_printf_i>
 8008c76:	e7e4      	b.n	8008c42 <_vfiprintf_r+0x1e6>
 8008c78:	080093dc 	.word	0x080093dc
 8008c7c:	080093e6 	.word	0x080093e6
 8008c80:	00000000 	.word	0x00000000
 8008c84:	08008a37 	.word	0x08008a37
 8008c88:	080093e2 	.word	0x080093e2

08008c8c <_printf_common>:
 8008c8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c90:	4616      	mov	r6, r2
 8008c92:	4698      	mov	r8, r3
 8008c94:	688a      	ldr	r2, [r1, #8]
 8008c96:	690b      	ldr	r3, [r1, #16]
 8008c98:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008c9c:	4293      	cmp	r3, r2
 8008c9e:	bfb8      	it	lt
 8008ca0:	4613      	movlt	r3, r2
 8008ca2:	6033      	str	r3, [r6, #0]
 8008ca4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008ca8:	4607      	mov	r7, r0
 8008caa:	460c      	mov	r4, r1
 8008cac:	b10a      	cbz	r2, 8008cb2 <_printf_common+0x26>
 8008cae:	3301      	adds	r3, #1
 8008cb0:	6033      	str	r3, [r6, #0]
 8008cb2:	6823      	ldr	r3, [r4, #0]
 8008cb4:	0699      	lsls	r1, r3, #26
 8008cb6:	bf42      	ittt	mi
 8008cb8:	6833      	ldrmi	r3, [r6, #0]
 8008cba:	3302      	addmi	r3, #2
 8008cbc:	6033      	strmi	r3, [r6, #0]
 8008cbe:	6825      	ldr	r5, [r4, #0]
 8008cc0:	f015 0506 	ands.w	r5, r5, #6
 8008cc4:	d106      	bne.n	8008cd4 <_printf_common+0x48>
 8008cc6:	f104 0a19 	add.w	sl, r4, #25
 8008cca:	68e3      	ldr	r3, [r4, #12]
 8008ccc:	6832      	ldr	r2, [r6, #0]
 8008cce:	1a9b      	subs	r3, r3, r2
 8008cd0:	42ab      	cmp	r3, r5
 8008cd2:	dc26      	bgt.n	8008d22 <_printf_common+0x96>
 8008cd4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008cd8:	6822      	ldr	r2, [r4, #0]
 8008cda:	3b00      	subs	r3, #0
 8008cdc:	bf18      	it	ne
 8008cde:	2301      	movne	r3, #1
 8008ce0:	0692      	lsls	r2, r2, #26
 8008ce2:	d42b      	bmi.n	8008d3c <_printf_common+0xb0>
 8008ce4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008ce8:	4641      	mov	r1, r8
 8008cea:	4638      	mov	r0, r7
 8008cec:	47c8      	blx	r9
 8008cee:	3001      	adds	r0, #1
 8008cf0:	d01e      	beq.n	8008d30 <_printf_common+0xa4>
 8008cf2:	6823      	ldr	r3, [r4, #0]
 8008cf4:	6922      	ldr	r2, [r4, #16]
 8008cf6:	f003 0306 	and.w	r3, r3, #6
 8008cfa:	2b04      	cmp	r3, #4
 8008cfc:	bf02      	ittt	eq
 8008cfe:	68e5      	ldreq	r5, [r4, #12]
 8008d00:	6833      	ldreq	r3, [r6, #0]
 8008d02:	1aed      	subeq	r5, r5, r3
 8008d04:	68a3      	ldr	r3, [r4, #8]
 8008d06:	bf0c      	ite	eq
 8008d08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008d0c:	2500      	movne	r5, #0
 8008d0e:	4293      	cmp	r3, r2
 8008d10:	bfc4      	itt	gt
 8008d12:	1a9b      	subgt	r3, r3, r2
 8008d14:	18ed      	addgt	r5, r5, r3
 8008d16:	2600      	movs	r6, #0
 8008d18:	341a      	adds	r4, #26
 8008d1a:	42b5      	cmp	r5, r6
 8008d1c:	d11a      	bne.n	8008d54 <_printf_common+0xc8>
 8008d1e:	2000      	movs	r0, #0
 8008d20:	e008      	b.n	8008d34 <_printf_common+0xa8>
 8008d22:	2301      	movs	r3, #1
 8008d24:	4652      	mov	r2, sl
 8008d26:	4641      	mov	r1, r8
 8008d28:	4638      	mov	r0, r7
 8008d2a:	47c8      	blx	r9
 8008d2c:	3001      	adds	r0, #1
 8008d2e:	d103      	bne.n	8008d38 <_printf_common+0xac>
 8008d30:	f04f 30ff 	mov.w	r0, #4294967295
 8008d34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d38:	3501      	adds	r5, #1
 8008d3a:	e7c6      	b.n	8008cca <_printf_common+0x3e>
 8008d3c:	18e1      	adds	r1, r4, r3
 8008d3e:	1c5a      	adds	r2, r3, #1
 8008d40:	2030      	movs	r0, #48	@ 0x30
 8008d42:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008d46:	4422      	add	r2, r4
 8008d48:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008d4c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008d50:	3302      	adds	r3, #2
 8008d52:	e7c7      	b.n	8008ce4 <_printf_common+0x58>
 8008d54:	2301      	movs	r3, #1
 8008d56:	4622      	mov	r2, r4
 8008d58:	4641      	mov	r1, r8
 8008d5a:	4638      	mov	r0, r7
 8008d5c:	47c8      	blx	r9
 8008d5e:	3001      	adds	r0, #1
 8008d60:	d0e6      	beq.n	8008d30 <_printf_common+0xa4>
 8008d62:	3601      	adds	r6, #1
 8008d64:	e7d9      	b.n	8008d1a <_printf_common+0x8e>
	...

08008d68 <_printf_i>:
 8008d68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008d6c:	7e0f      	ldrb	r7, [r1, #24]
 8008d6e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008d70:	2f78      	cmp	r7, #120	@ 0x78
 8008d72:	4691      	mov	r9, r2
 8008d74:	4680      	mov	r8, r0
 8008d76:	460c      	mov	r4, r1
 8008d78:	469a      	mov	sl, r3
 8008d7a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008d7e:	d807      	bhi.n	8008d90 <_printf_i+0x28>
 8008d80:	2f62      	cmp	r7, #98	@ 0x62
 8008d82:	d80a      	bhi.n	8008d9a <_printf_i+0x32>
 8008d84:	2f00      	cmp	r7, #0
 8008d86:	f000 80d2 	beq.w	8008f2e <_printf_i+0x1c6>
 8008d8a:	2f58      	cmp	r7, #88	@ 0x58
 8008d8c:	f000 80b9 	beq.w	8008f02 <_printf_i+0x19a>
 8008d90:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008d94:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008d98:	e03a      	b.n	8008e10 <_printf_i+0xa8>
 8008d9a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008d9e:	2b15      	cmp	r3, #21
 8008da0:	d8f6      	bhi.n	8008d90 <_printf_i+0x28>
 8008da2:	a101      	add	r1, pc, #4	@ (adr r1, 8008da8 <_printf_i+0x40>)
 8008da4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008da8:	08008e01 	.word	0x08008e01
 8008dac:	08008e15 	.word	0x08008e15
 8008db0:	08008d91 	.word	0x08008d91
 8008db4:	08008d91 	.word	0x08008d91
 8008db8:	08008d91 	.word	0x08008d91
 8008dbc:	08008d91 	.word	0x08008d91
 8008dc0:	08008e15 	.word	0x08008e15
 8008dc4:	08008d91 	.word	0x08008d91
 8008dc8:	08008d91 	.word	0x08008d91
 8008dcc:	08008d91 	.word	0x08008d91
 8008dd0:	08008d91 	.word	0x08008d91
 8008dd4:	08008f15 	.word	0x08008f15
 8008dd8:	08008e3f 	.word	0x08008e3f
 8008ddc:	08008ecf 	.word	0x08008ecf
 8008de0:	08008d91 	.word	0x08008d91
 8008de4:	08008d91 	.word	0x08008d91
 8008de8:	08008f37 	.word	0x08008f37
 8008dec:	08008d91 	.word	0x08008d91
 8008df0:	08008e3f 	.word	0x08008e3f
 8008df4:	08008d91 	.word	0x08008d91
 8008df8:	08008d91 	.word	0x08008d91
 8008dfc:	08008ed7 	.word	0x08008ed7
 8008e00:	6833      	ldr	r3, [r6, #0]
 8008e02:	1d1a      	adds	r2, r3, #4
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	6032      	str	r2, [r6, #0]
 8008e08:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008e0c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008e10:	2301      	movs	r3, #1
 8008e12:	e09d      	b.n	8008f50 <_printf_i+0x1e8>
 8008e14:	6833      	ldr	r3, [r6, #0]
 8008e16:	6820      	ldr	r0, [r4, #0]
 8008e18:	1d19      	adds	r1, r3, #4
 8008e1a:	6031      	str	r1, [r6, #0]
 8008e1c:	0606      	lsls	r6, r0, #24
 8008e1e:	d501      	bpl.n	8008e24 <_printf_i+0xbc>
 8008e20:	681d      	ldr	r5, [r3, #0]
 8008e22:	e003      	b.n	8008e2c <_printf_i+0xc4>
 8008e24:	0645      	lsls	r5, r0, #25
 8008e26:	d5fb      	bpl.n	8008e20 <_printf_i+0xb8>
 8008e28:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008e2c:	2d00      	cmp	r5, #0
 8008e2e:	da03      	bge.n	8008e38 <_printf_i+0xd0>
 8008e30:	232d      	movs	r3, #45	@ 0x2d
 8008e32:	426d      	negs	r5, r5
 8008e34:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008e38:	4859      	ldr	r0, [pc, #356]	@ (8008fa0 <_printf_i+0x238>)
 8008e3a:	230a      	movs	r3, #10
 8008e3c:	e011      	b.n	8008e62 <_printf_i+0xfa>
 8008e3e:	6821      	ldr	r1, [r4, #0]
 8008e40:	6833      	ldr	r3, [r6, #0]
 8008e42:	0608      	lsls	r0, r1, #24
 8008e44:	f853 5b04 	ldr.w	r5, [r3], #4
 8008e48:	d402      	bmi.n	8008e50 <_printf_i+0xe8>
 8008e4a:	0649      	lsls	r1, r1, #25
 8008e4c:	bf48      	it	mi
 8008e4e:	b2ad      	uxthmi	r5, r5
 8008e50:	2f6f      	cmp	r7, #111	@ 0x6f
 8008e52:	4853      	ldr	r0, [pc, #332]	@ (8008fa0 <_printf_i+0x238>)
 8008e54:	6033      	str	r3, [r6, #0]
 8008e56:	bf14      	ite	ne
 8008e58:	230a      	movne	r3, #10
 8008e5a:	2308      	moveq	r3, #8
 8008e5c:	2100      	movs	r1, #0
 8008e5e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008e62:	6866      	ldr	r6, [r4, #4]
 8008e64:	60a6      	str	r6, [r4, #8]
 8008e66:	2e00      	cmp	r6, #0
 8008e68:	bfa2      	ittt	ge
 8008e6a:	6821      	ldrge	r1, [r4, #0]
 8008e6c:	f021 0104 	bicge.w	r1, r1, #4
 8008e70:	6021      	strge	r1, [r4, #0]
 8008e72:	b90d      	cbnz	r5, 8008e78 <_printf_i+0x110>
 8008e74:	2e00      	cmp	r6, #0
 8008e76:	d04b      	beq.n	8008f10 <_printf_i+0x1a8>
 8008e78:	4616      	mov	r6, r2
 8008e7a:	fbb5 f1f3 	udiv	r1, r5, r3
 8008e7e:	fb03 5711 	mls	r7, r3, r1, r5
 8008e82:	5dc7      	ldrb	r7, [r0, r7]
 8008e84:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008e88:	462f      	mov	r7, r5
 8008e8a:	42bb      	cmp	r3, r7
 8008e8c:	460d      	mov	r5, r1
 8008e8e:	d9f4      	bls.n	8008e7a <_printf_i+0x112>
 8008e90:	2b08      	cmp	r3, #8
 8008e92:	d10b      	bne.n	8008eac <_printf_i+0x144>
 8008e94:	6823      	ldr	r3, [r4, #0]
 8008e96:	07df      	lsls	r7, r3, #31
 8008e98:	d508      	bpl.n	8008eac <_printf_i+0x144>
 8008e9a:	6923      	ldr	r3, [r4, #16]
 8008e9c:	6861      	ldr	r1, [r4, #4]
 8008e9e:	4299      	cmp	r1, r3
 8008ea0:	bfde      	ittt	le
 8008ea2:	2330      	movle	r3, #48	@ 0x30
 8008ea4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008ea8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008eac:	1b92      	subs	r2, r2, r6
 8008eae:	6122      	str	r2, [r4, #16]
 8008eb0:	f8cd a000 	str.w	sl, [sp]
 8008eb4:	464b      	mov	r3, r9
 8008eb6:	aa03      	add	r2, sp, #12
 8008eb8:	4621      	mov	r1, r4
 8008eba:	4640      	mov	r0, r8
 8008ebc:	f7ff fee6 	bl	8008c8c <_printf_common>
 8008ec0:	3001      	adds	r0, #1
 8008ec2:	d14a      	bne.n	8008f5a <_printf_i+0x1f2>
 8008ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8008ec8:	b004      	add	sp, #16
 8008eca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ece:	6823      	ldr	r3, [r4, #0]
 8008ed0:	f043 0320 	orr.w	r3, r3, #32
 8008ed4:	6023      	str	r3, [r4, #0]
 8008ed6:	4833      	ldr	r0, [pc, #204]	@ (8008fa4 <_printf_i+0x23c>)
 8008ed8:	2778      	movs	r7, #120	@ 0x78
 8008eda:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008ede:	6823      	ldr	r3, [r4, #0]
 8008ee0:	6831      	ldr	r1, [r6, #0]
 8008ee2:	061f      	lsls	r7, r3, #24
 8008ee4:	f851 5b04 	ldr.w	r5, [r1], #4
 8008ee8:	d402      	bmi.n	8008ef0 <_printf_i+0x188>
 8008eea:	065f      	lsls	r7, r3, #25
 8008eec:	bf48      	it	mi
 8008eee:	b2ad      	uxthmi	r5, r5
 8008ef0:	6031      	str	r1, [r6, #0]
 8008ef2:	07d9      	lsls	r1, r3, #31
 8008ef4:	bf44      	itt	mi
 8008ef6:	f043 0320 	orrmi.w	r3, r3, #32
 8008efa:	6023      	strmi	r3, [r4, #0]
 8008efc:	b11d      	cbz	r5, 8008f06 <_printf_i+0x19e>
 8008efe:	2310      	movs	r3, #16
 8008f00:	e7ac      	b.n	8008e5c <_printf_i+0xf4>
 8008f02:	4827      	ldr	r0, [pc, #156]	@ (8008fa0 <_printf_i+0x238>)
 8008f04:	e7e9      	b.n	8008eda <_printf_i+0x172>
 8008f06:	6823      	ldr	r3, [r4, #0]
 8008f08:	f023 0320 	bic.w	r3, r3, #32
 8008f0c:	6023      	str	r3, [r4, #0]
 8008f0e:	e7f6      	b.n	8008efe <_printf_i+0x196>
 8008f10:	4616      	mov	r6, r2
 8008f12:	e7bd      	b.n	8008e90 <_printf_i+0x128>
 8008f14:	6833      	ldr	r3, [r6, #0]
 8008f16:	6825      	ldr	r5, [r4, #0]
 8008f18:	6961      	ldr	r1, [r4, #20]
 8008f1a:	1d18      	adds	r0, r3, #4
 8008f1c:	6030      	str	r0, [r6, #0]
 8008f1e:	062e      	lsls	r6, r5, #24
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	d501      	bpl.n	8008f28 <_printf_i+0x1c0>
 8008f24:	6019      	str	r1, [r3, #0]
 8008f26:	e002      	b.n	8008f2e <_printf_i+0x1c6>
 8008f28:	0668      	lsls	r0, r5, #25
 8008f2a:	d5fb      	bpl.n	8008f24 <_printf_i+0x1bc>
 8008f2c:	8019      	strh	r1, [r3, #0]
 8008f2e:	2300      	movs	r3, #0
 8008f30:	6123      	str	r3, [r4, #16]
 8008f32:	4616      	mov	r6, r2
 8008f34:	e7bc      	b.n	8008eb0 <_printf_i+0x148>
 8008f36:	6833      	ldr	r3, [r6, #0]
 8008f38:	1d1a      	adds	r2, r3, #4
 8008f3a:	6032      	str	r2, [r6, #0]
 8008f3c:	681e      	ldr	r6, [r3, #0]
 8008f3e:	6862      	ldr	r2, [r4, #4]
 8008f40:	2100      	movs	r1, #0
 8008f42:	4630      	mov	r0, r6
 8008f44:	f7f7 f9e4 	bl	8000310 <memchr>
 8008f48:	b108      	cbz	r0, 8008f4e <_printf_i+0x1e6>
 8008f4a:	1b80      	subs	r0, r0, r6
 8008f4c:	6060      	str	r0, [r4, #4]
 8008f4e:	6863      	ldr	r3, [r4, #4]
 8008f50:	6123      	str	r3, [r4, #16]
 8008f52:	2300      	movs	r3, #0
 8008f54:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008f58:	e7aa      	b.n	8008eb0 <_printf_i+0x148>
 8008f5a:	6923      	ldr	r3, [r4, #16]
 8008f5c:	4632      	mov	r2, r6
 8008f5e:	4649      	mov	r1, r9
 8008f60:	4640      	mov	r0, r8
 8008f62:	47d0      	blx	sl
 8008f64:	3001      	adds	r0, #1
 8008f66:	d0ad      	beq.n	8008ec4 <_printf_i+0x15c>
 8008f68:	6823      	ldr	r3, [r4, #0]
 8008f6a:	079b      	lsls	r3, r3, #30
 8008f6c:	d413      	bmi.n	8008f96 <_printf_i+0x22e>
 8008f6e:	68e0      	ldr	r0, [r4, #12]
 8008f70:	9b03      	ldr	r3, [sp, #12]
 8008f72:	4298      	cmp	r0, r3
 8008f74:	bfb8      	it	lt
 8008f76:	4618      	movlt	r0, r3
 8008f78:	e7a6      	b.n	8008ec8 <_printf_i+0x160>
 8008f7a:	2301      	movs	r3, #1
 8008f7c:	4632      	mov	r2, r6
 8008f7e:	4649      	mov	r1, r9
 8008f80:	4640      	mov	r0, r8
 8008f82:	47d0      	blx	sl
 8008f84:	3001      	adds	r0, #1
 8008f86:	d09d      	beq.n	8008ec4 <_printf_i+0x15c>
 8008f88:	3501      	adds	r5, #1
 8008f8a:	68e3      	ldr	r3, [r4, #12]
 8008f8c:	9903      	ldr	r1, [sp, #12]
 8008f8e:	1a5b      	subs	r3, r3, r1
 8008f90:	42ab      	cmp	r3, r5
 8008f92:	dcf2      	bgt.n	8008f7a <_printf_i+0x212>
 8008f94:	e7eb      	b.n	8008f6e <_printf_i+0x206>
 8008f96:	2500      	movs	r5, #0
 8008f98:	f104 0619 	add.w	r6, r4, #25
 8008f9c:	e7f5      	b.n	8008f8a <_printf_i+0x222>
 8008f9e:	bf00      	nop
 8008fa0:	080093ed 	.word	0x080093ed
 8008fa4:	080093fe 	.word	0x080093fe

08008fa8 <__sflush_r>:
 8008fa8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008fac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fb0:	0716      	lsls	r6, r2, #28
 8008fb2:	4605      	mov	r5, r0
 8008fb4:	460c      	mov	r4, r1
 8008fb6:	d454      	bmi.n	8009062 <__sflush_r+0xba>
 8008fb8:	684b      	ldr	r3, [r1, #4]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	dc02      	bgt.n	8008fc4 <__sflush_r+0x1c>
 8008fbe:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	dd48      	ble.n	8009056 <__sflush_r+0xae>
 8008fc4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008fc6:	2e00      	cmp	r6, #0
 8008fc8:	d045      	beq.n	8009056 <__sflush_r+0xae>
 8008fca:	2300      	movs	r3, #0
 8008fcc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008fd0:	682f      	ldr	r7, [r5, #0]
 8008fd2:	6a21      	ldr	r1, [r4, #32]
 8008fd4:	602b      	str	r3, [r5, #0]
 8008fd6:	d030      	beq.n	800903a <__sflush_r+0x92>
 8008fd8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008fda:	89a3      	ldrh	r3, [r4, #12]
 8008fdc:	0759      	lsls	r1, r3, #29
 8008fde:	d505      	bpl.n	8008fec <__sflush_r+0x44>
 8008fe0:	6863      	ldr	r3, [r4, #4]
 8008fe2:	1ad2      	subs	r2, r2, r3
 8008fe4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008fe6:	b10b      	cbz	r3, 8008fec <__sflush_r+0x44>
 8008fe8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008fea:	1ad2      	subs	r2, r2, r3
 8008fec:	2300      	movs	r3, #0
 8008fee:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008ff0:	6a21      	ldr	r1, [r4, #32]
 8008ff2:	4628      	mov	r0, r5
 8008ff4:	47b0      	blx	r6
 8008ff6:	1c43      	adds	r3, r0, #1
 8008ff8:	89a3      	ldrh	r3, [r4, #12]
 8008ffa:	d106      	bne.n	800900a <__sflush_r+0x62>
 8008ffc:	6829      	ldr	r1, [r5, #0]
 8008ffe:	291d      	cmp	r1, #29
 8009000:	d82b      	bhi.n	800905a <__sflush_r+0xb2>
 8009002:	4a2a      	ldr	r2, [pc, #168]	@ (80090ac <__sflush_r+0x104>)
 8009004:	410a      	asrs	r2, r1
 8009006:	07d6      	lsls	r6, r2, #31
 8009008:	d427      	bmi.n	800905a <__sflush_r+0xb2>
 800900a:	2200      	movs	r2, #0
 800900c:	6062      	str	r2, [r4, #4]
 800900e:	04d9      	lsls	r1, r3, #19
 8009010:	6922      	ldr	r2, [r4, #16]
 8009012:	6022      	str	r2, [r4, #0]
 8009014:	d504      	bpl.n	8009020 <__sflush_r+0x78>
 8009016:	1c42      	adds	r2, r0, #1
 8009018:	d101      	bne.n	800901e <__sflush_r+0x76>
 800901a:	682b      	ldr	r3, [r5, #0]
 800901c:	b903      	cbnz	r3, 8009020 <__sflush_r+0x78>
 800901e:	6560      	str	r0, [r4, #84]	@ 0x54
 8009020:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009022:	602f      	str	r7, [r5, #0]
 8009024:	b1b9      	cbz	r1, 8009056 <__sflush_r+0xae>
 8009026:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800902a:	4299      	cmp	r1, r3
 800902c:	d002      	beq.n	8009034 <__sflush_r+0x8c>
 800902e:	4628      	mov	r0, r5
 8009030:	f7ff fbf2 	bl	8008818 <_free_r>
 8009034:	2300      	movs	r3, #0
 8009036:	6363      	str	r3, [r4, #52]	@ 0x34
 8009038:	e00d      	b.n	8009056 <__sflush_r+0xae>
 800903a:	2301      	movs	r3, #1
 800903c:	4628      	mov	r0, r5
 800903e:	47b0      	blx	r6
 8009040:	4602      	mov	r2, r0
 8009042:	1c50      	adds	r0, r2, #1
 8009044:	d1c9      	bne.n	8008fda <__sflush_r+0x32>
 8009046:	682b      	ldr	r3, [r5, #0]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d0c6      	beq.n	8008fda <__sflush_r+0x32>
 800904c:	2b1d      	cmp	r3, #29
 800904e:	d001      	beq.n	8009054 <__sflush_r+0xac>
 8009050:	2b16      	cmp	r3, #22
 8009052:	d11e      	bne.n	8009092 <__sflush_r+0xea>
 8009054:	602f      	str	r7, [r5, #0]
 8009056:	2000      	movs	r0, #0
 8009058:	e022      	b.n	80090a0 <__sflush_r+0xf8>
 800905a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800905e:	b21b      	sxth	r3, r3
 8009060:	e01b      	b.n	800909a <__sflush_r+0xf2>
 8009062:	690f      	ldr	r7, [r1, #16]
 8009064:	2f00      	cmp	r7, #0
 8009066:	d0f6      	beq.n	8009056 <__sflush_r+0xae>
 8009068:	0793      	lsls	r3, r2, #30
 800906a:	680e      	ldr	r6, [r1, #0]
 800906c:	bf08      	it	eq
 800906e:	694b      	ldreq	r3, [r1, #20]
 8009070:	600f      	str	r7, [r1, #0]
 8009072:	bf18      	it	ne
 8009074:	2300      	movne	r3, #0
 8009076:	eba6 0807 	sub.w	r8, r6, r7
 800907a:	608b      	str	r3, [r1, #8]
 800907c:	f1b8 0f00 	cmp.w	r8, #0
 8009080:	dde9      	ble.n	8009056 <__sflush_r+0xae>
 8009082:	6a21      	ldr	r1, [r4, #32]
 8009084:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009086:	4643      	mov	r3, r8
 8009088:	463a      	mov	r2, r7
 800908a:	4628      	mov	r0, r5
 800908c:	47b0      	blx	r6
 800908e:	2800      	cmp	r0, #0
 8009090:	dc08      	bgt.n	80090a4 <__sflush_r+0xfc>
 8009092:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009096:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800909a:	81a3      	strh	r3, [r4, #12]
 800909c:	f04f 30ff 	mov.w	r0, #4294967295
 80090a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090a4:	4407      	add	r7, r0
 80090a6:	eba8 0800 	sub.w	r8, r8, r0
 80090aa:	e7e7      	b.n	800907c <__sflush_r+0xd4>
 80090ac:	dfbffffe 	.word	0xdfbffffe

080090b0 <_fflush_r>:
 80090b0:	b538      	push	{r3, r4, r5, lr}
 80090b2:	690b      	ldr	r3, [r1, #16]
 80090b4:	4605      	mov	r5, r0
 80090b6:	460c      	mov	r4, r1
 80090b8:	b913      	cbnz	r3, 80090c0 <_fflush_r+0x10>
 80090ba:	2500      	movs	r5, #0
 80090bc:	4628      	mov	r0, r5
 80090be:	bd38      	pop	{r3, r4, r5, pc}
 80090c0:	b118      	cbz	r0, 80090ca <_fflush_r+0x1a>
 80090c2:	6a03      	ldr	r3, [r0, #32]
 80090c4:	b90b      	cbnz	r3, 80090ca <_fflush_r+0x1a>
 80090c6:	f7ff fa9f 	bl	8008608 <__sinit>
 80090ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d0f3      	beq.n	80090ba <_fflush_r+0xa>
 80090d2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80090d4:	07d0      	lsls	r0, r2, #31
 80090d6:	d404      	bmi.n	80090e2 <_fflush_r+0x32>
 80090d8:	0599      	lsls	r1, r3, #22
 80090da:	d402      	bmi.n	80090e2 <_fflush_r+0x32>
 80090dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80090de:	f7ff fb98 	bl	8008812 <__retarget_lock_acquire_recursive>
 80090e2:	4628      	mov	r0, r5
 80090e4:	4621      	mov	r1, r4
 80090e6:	f7ff ff5f 	bl	8008fa8 <__sflush_r>
 80090ea:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80090ec:	07da      	lsls	r2, r3, #31
 80090ee:	4605      	mov	r5, r0
 80090f0:	d4e4      	bmi.n	80090bc <_fflush_r+0xc>
 80090f2:	89a3      	ldrh	r3, [r4, #12]
 80090f4:	059b      	lsls	r3, r3, #22
 80090f6:	d4e1      	bmi.n	80090bc <_fflush_r+0xc>
 80090f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80090fa:	f7ff fb8b 	bl	8008814 <__retarget_lock_release_recursive>
 80090fe:	e7dd      	b.n	80090bc <_fflush_r+0xc>

08009100 <__swbuf_r>:
 8009100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009102:	460e      	mov	r6, r1
 8009104:	4614      	mov	r4, r2
 8009106:	4605      	mov	r5, r0
 8009108:	b118      	cbz	r0, 8009112 <__swbuf_r+0x12>
 800910a:	6a03      	ldr	r3, [r0, #32]
 800910c:	b90b      	cbnz	r3, 8009112 <__swbuf_r+0x12>
 800910e:	f7ff fa7b 	bl	8008608 <__sinit>
 8009112:	69a3      	ldr	r3, [r4, #24]
 8009114:	60a3      	str	r3, [r4, #8]
 8009116:	89a3      	ldrh	r3, [r4, #12]
 8009118:	071a      	lsls	r2, r3, #28
 800911a:	d501      	bpl.n	8009120 <__swbuf_r+0x20>
 800911c:	6923      	ldr	r3, [r4, #16]
 800911e:	b943      	cbnz	r3, 8009132 <__swbuf_r+0x32>
 8009120:	4621      	mov	r1, r4
 8009122:	4628      	mov	r0, r5
 8009124:	f000 f82a 	bl	800917c <__swsetup_r>
 8009128:	b118      	cbz	r0, 8009132 <__swbuf_r+0x32>
 800912a:	f04f 37ff 	mov.w	r7, #4294967295
 800912e:	4638      	mov	r0, r7
 8009130:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009132:	6823      	ldr	r3, [r4, #0]
 8009134:	6922      	ldr	r2, [r4, #16]
 8009136:	1a98      	subs	r0, r3, r2
 8009138:	6963      	ldr	r3, [r4, #20]
 800913a:	b2f6      	uxtb	r6, r6
 800913c:	4283      	cmp	r3, r0
 800913e:	4637      	mov	r7, r6
 8009140:	dc05      	bgt.n	800914e <__swbuf_r+0x4e>
 8009142:	4621      	mov	r1, r4
 8009144:	4628      	mov	r0, r5
 8009146:	f7ff ffb3 	bl	80090b0 <_fflush_r>
 800914a:	2800      	cmp	r0, #0
 800914c:	d1ed      	bne.n	800912a <__swbuf_r+0x2a>
 800914e:	68a3      	ldr	r3, [r4, #8]
 8009150:	3b01      	subs	r3, #1
 8009152:	60a3      	str	r3, [r4, #8]
 8009154:	6823      	ldr	r3, [r4, #0]
 8009156:	1c5a      	adds	r2, r3, #1
 8009158:	6022      	str	r2, [r4, #0]
 800915a:	701e      	strb	r6, [r3, #0]
 800915c:	6962      	ldr	r2, [r4, #20]
 800915e:	1c43      	adds	r3, r0, #1
 8009160:	429a      	cmp	r2, r3
 8009162:	d004      	beq.n	800916e <__swbuf_r+0x6e>
 8009164:	89a3      	ldrh	r3, [r4, #12]
 8009166:	07db      	lsls	r3, r3, #31
 8009168:	d5e1      	bpl.n	800912e <__swbuf_r+0x2e>
 800916a:	2e0a      	cmp	r6, #10
 800916c:	d1df      	bne.n	800912e <__swbuf_r+0x2e>
 800916e:	4621      	mov	r1, r4
 8009170:	4628      	mov	r0, r5
 8009172:	f7ff ff9d 	bl	80090b0 <_fflush_r>
 8009176:	2800      	cmp	r0, #0
 8009178:	d0d9      	beq.n	800912e <__swbuf_r+0x2e>
 800917a:	e7d6      	b.n	800912a <__swbuf_r+0x2a>

0800917c <__swsetup_r>:
 800917c:	b538      	push	{r3, r4, r5, lr}
 800917e:	4b29      	ldr	r3, [pc, #164]	@ (8009224 <__swsetup_r+0xa8>)
 8009180:	4605      	mov	r5, r0
 8009182:	6818      	ldr	r0, [r3, #0]
 8009184:	460c      	mov	r4, r1
 8009186:	b118      	cbz	r0, 8009190 <__swsetup_r+0x14>
 8009188:	6a03      	ldr	r3, [r0, #32]
 800918a:	b90b      	cbnz	r3, 8009190 <__swsetup_r+0x14>
 800918c:	f7ff fa3c 	bl	8008608 <__sinit>
 8009190:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009194:	0719      	lsls	r1, r3, #28
 8009196:	d422      	bmi.n	80091de <__swsetup_r+0x62>
 8009198:	06da      	lsls	r2, r3, #27
 800919a:	d407      	bmi.n	80091ac <__swsetup_r+0x30>
 800919c:	2209      	movs	r2, #9
 800919e:	602a      	str	r2, [r5, #0]
 80091a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80091a4:	81a3      	strh	r3, [r4, #12]
 80091a6:	f04f 30ff 	mov.w	r0, #4294967295
 80091aa:	e033      	b.n	8009214 <__swsetup_r+0x98>
 80091ac:	0758      	lsls	r0, r3, #29
 80091ae:	d512      	bpl.n	80091d6 <__swsetup_r+0x5a>
 80091b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80091b2:	b141      	cbz	r1, 80091c6 <__swsetup_r+0x4a>
 80091b4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80091b8:	4299      	cmp	r1, r3
 80091ba:	d002      	beq.n	80091c2 <__swsetup_r+0x46>
 80091bc:	4628      	mov	r0, r5
 80091be:	f7ff fb2b 	bl	8008818 <_free_r>
 80091c2:	2300      	movs	r3, #0
 80091c4:	6363      	str	r3, [r4, #52]	@ 0x34
 80091c6:	89a3      	ldrh	r3, [r4, #12]
 80091c8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80091cc:	81a3      	strh	r3, [r4, #12]
 80091ce:	2300      	movs	r3, #0
 80091d0:	6063      	str	r3, [r4, #4]
 80091d2:	6923      	ldr	r3, [r4, #16]
 80091d4:	6023      	str	r3, [r4, #0]
 80091d6:	89a3      	ldrh	r3, [r4, #12]
 80091d8:	f043 0308 	orr.w	r3, r3, #8
 80091dc:	81a3      	strh	r3, [r4, #12]
 80091de:	6923      	ldr	r3, [r4, #16]
 80091e0:	b94b      	cbnz	r3, 80091f6 <__swsetup_r+0x7a>
 80091e2:	89a3      	ldrh	r3, [r4, #12]
 80091e4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80091e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80091ec:	d003      	beq.n	80091f6 <__swsetup_r+0x7a>
 80091ee:	4621      	mov	r1, r4
 80091f0:	4628      	mov	r0, r5
 80091f2:	f000 f84f 	bl	8009294 <__smakebuf_r>
 80091f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80091fa:	f013 0201 	ands.w	r2, r3, #1
 80091fe:	d00a      	beq.n	8009216 <__swsetup_r+0x9a>
 8009200:	2200      	movs	r2, #0
 8009202:	60a2      	str	r2, [r4, #8]
 8009204:	6962      	ldr	r2, [r4, #20]
 8009206:	4252      	negs	r2, r2
 8009208:	61a2      	str	r2, [r4, #24]
 800920a:	6922      	ldr	r2, [r4, #16]
 800920c:	b942      	cbnz	r2, 8009220 <__swsetup_r+0xa4>
 800920e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009212:	d1c5      	bne.n	80091a0 <__swsetup_r+0x24>
 8009214:	bd38      	pop	{r3, r4, r5, pc}
 8009216:	0799      	lsls	r1, r3, #30
 8009218:	bf58      	it	pl
 800921a:	6962      	ldrpl	r2, [r4, #20]
 800921c:	60a2      	str	r2, [r4, #8]
 800921e:	e7f4      	b.n	800920a <__swsetup_r+0x8e>
 8009220:	2000      	movs	r0, #0
 8009222:	e7f7      	b.n	8009214 <__swsetup_r+0x98>
 8009224:	24000038 	.word	0x24000038

08009228 <_sbrk_r>:
 8009228:	b538      	push	{r3, r4, r5, lr}
 800922a:	4d06      	ldr	r5, [pc, #24]	@ (8009244 <_sbrk_r+0x1c>)
 800922c:	2300      	movs	r3, #0
 800922e:	4604      	mov	r4, r0
 8009230:	4608      	mov	r0, r1
 8009232:	602b      	str	r3, [r5, #0]
 8009234:	f7f7 fe18 	bl	8000e68 <_sbrk>
 8009238:	1c43      	adds	r3, r0, #1
 800923a:	d102      	bne.n	8009242 <_sbrk_r+0x1a>
 800923c:	682b      	ldr	r3, [r5, #0]
 800923e:	b103      	cbz	r3, 8009242 <_sbrk_r+0x1a>
 8009240:	6023      	str	r3, [r4, #0]
 8009242:	bd38      	pop	{r3, r4, r5, pc}
 8009244:	2400039c 	.word	0x2400039c

08009248 <__swhatbuf_r>:
 8009248:	b570      	push	{r4, r5, r6, lr}
 800924a:	460c      	mov	r4, r1
 800924c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009250:	2900      	cmp	r1, #0
 8009252:	b096      	sub	sp, #88	@ 0x58
 8009254:	4615      	mov	r5, r2
 8009256:	461e      	mov	r6, r3
 8009258:	da0d      	bge.n	8009276 <__swhatbuf_r+0x2e>
 800925a:	89a3      	ldrh	r3, [r4, #12]
 800925c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009260:	f04f 0100 	mov.w	r1, #0
 8009264:	bf14      	ite	ne
 8009266:	2340      	movne	r3, #64	@ 0x40
 8009268:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800926c:	2000      	movs	r0, #0
 800926e:	6031      	str	r1, [r6, #0]
 8009270:	602b      	str	r3, [r5, #0]
 8009272:	b016      	add	sp, #88	@ 0x58
 8009274:	bd70      	pop	{r4, r5, r6, pc}
 8009276:	466a      	mov	r2, sp
 8009278:	f000 f848 	bl	800930c <_fstat_r>
 800927c:	2800      	cmp	r0, #0
 800927e:	dbec      	blt.n	800925a <__swhatbuf_r+0x12>
 8009280:	9901      	ldr	r1, [sp, #4]
 8009282:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009286:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800928a:	4259      	negs	r1, r3
 800928c:	4159      	adcs	r1, r3
 800928e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009292:	e7eb      	b.n	800926c <__swhatbuf_r+0x24>

08009294 <__smakebuf_r>:
 8009294:	898b      	ldrh	r3, [r1, #12]
 8009296:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009298:	079d      	lsls	r5, r3, #30
 800929a:	4606      	mov	r6, r0
 800929c:	460c      	mov	r4, r1
 800929e:	d507      	bpl.n	80092b0 <__smakebuf_r+0x1c>
 80092a0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80092a4:	6023      	str	r3, [r4, #0]
 80092a6:	6123      	str	r3, [r4, #16]
 80092a8:	2301      	movs	r3, #1
 80092aa:	6163      	str	r3, [r4, #20]
 80092ac:	b003      	add	sp, #12
 80092ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80092b0:	ab01      	add	r3, sp, #4
 80092b2:	466a      	mov	r2, sp
 80092b4:	f7ff ffc8 	bl	8009248 <__swhatbuf_r>
 80092b8:	9f00      	ldr	r7, [sp, #0]
 80092ba:	4605      	mov	r5, r0
 80092bc:	4639      	mov	r1, r7
 80092be:	4630      	mov	r0, r6
 80092c0:	f7ff fb16 	bl	80088f0 <_malloc_r>
 80092c4:	b948      	cbnz	r0, 80092da <__smakebuf_r+0x46>
 80092c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80092ca:	059a      	lsls	r2, r3, #22
 80092cc:	d4ee      	bmi.n	80092ac <__smakebuf_r+0x18>
 80092ce:	f023 0303 	bic.w	r3, r3, #3
 80092d2:	f043 0302 	orr.w	r3, r3, #2
 80092d6:	81a3      	strh	r3, [r4, #12]
 80092d8:	e7e2      	b.n	80092a0 <__smakebuf_r+0xc>
 80092da:	89a3      	ldrh	r3, [r4, #12]
 80092dc:	6020      	str	r0, [r4, #0]
 80092de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80092e2:	81a3      	strh	r3, [r4, #12]
 80092e4:	9b01      	ldr	r3, [sp, #4]
 80092e6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80092ea:	b15b      	cbz	r3, 8009304 <__smakebuf_r+0x70>
 80092ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80092f0:	4630      	mov	r0, r6
 80092f2:	f000 f81d 	bl	8009330 <_isatty_r>
 80092f6:	b128      	cbz	r0, 8009304 <__smakebuf_r+0x70>
 80092f8:	89a3      	ldrh	r3, [r4, #12]
 80092fa:	f023 0303 	bic.w	r3, r3, #3
 80092fe:	f043 0301 	orr.w	r3, r3, #1
 8009302:	81a3      	strh	r3, [r4, #12]
 8009304:	89a3      	ldrh	r3, [r4, #12]
 8009306:	431d      	orrs	r5, r3
 8009308:	81a5      	strh	r5, [r4, #12]
 800930a:	e7cf      	b.n	80092ac <__smakebuf_r+0x18>

0800930c <_fstat_r>:
 800930c:	b538      	push	{r3, r4, r5, lr}
 800930e:	4d07      	ldr	r5, [pc, #28]	@ (800932c <_fstat_r+0x20>)
 8009310:	2300      	movs	r3, #0
 8009312:	4604      	mov	r4, r0
 8009314:	4608      	mov	r0, r1
 8009316:	4611      	mov	r1, r2
 8009318:	602b      	str	r3, [r5, #0]
 800931a:	f7f7 fd7c 	bl	8000e16 <_fstat>
 800931e:	1c43      	adds	r3, r0, #1
 8009320:	d102      	bne.n	8009328 <_fstat_r+0x1c>
 8009322:	682b      	ldr	r3, [r5, #0]
 8009324:	b103      	cbz	r3, 8009328 <_fstat_r+0x1c>
 8009326:	6023      	str	r3, [r4, #0]
 8009328:	bd38      	pop	{r3, r4, r5, pc}
 800932a:	bf00      	nop
 800932c:	2400039c 	.word	0x2400039c

08009330 <_isatty_r>:
 8009330:	b538      	push	{r3, r4, r5, lr}
 8009332:	4d06      	ldr	r5, [pc, #24]	@ (800934c <_isatty_r+0x1c>)
 8009334:	2300      	movs	r3, #0
 8009336:	4604      	mov	r4, r0
 8009338:	4608      	mov	r0, r1
 800933a:	602b      	str	r3, [r5, #0]
 800933c:	f7f7 fd7b 	bl	8000e36 <_isatty>
 8009340:	1c43      	adds	r3, r0, #1
 8009342:	d102      	bne.n	800934a <_isatty_r+0x1a>
 8009344:	682b      	ldr	r3, [r5, #0]
 8009346:	b103      	cbz	r3, 800934a <_isatty_r+0x1a>
 8009348:	6023      	str	r3, [r4, #0]
 800934a:	bd38      	pop	{r3, r4, r5, pc}
 800934c:	2400039c 	.word	0x2400039c

08009350 <_init>:
 8009350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009352:	bf00      	nop
 8009354:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009356:	bc08      	pop	{r3}
 8009358:	469e      	mov	lr, r3
 800935a:	4770      	bx	lr

0800935c <_fini>:
 800935c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800935e:	bf00      	nop
 8009360:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009362:	bc08      	pop	{r3}
 8009364:	469e      	mov	lr, r3
 8009366:	4770      	bx	lr
